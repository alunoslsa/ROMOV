
STM32L412.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007028  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d0  080071b8  080071b8  000171b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007388  08007388  000200b4  2**0
                  CONTENTS
  4 .ARM          00000008  08007388  08007388  00017388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007390  08007390  000200b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007390  08007390  00017390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007394  08007394  00017394  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000b4  20000000  08007398  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b00  200000b4  0800744c  000200b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001bb4  0800744c  00021bb4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001fcd0  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003769  00000000  00000000  0003fdb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  00043520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001528  00000000  00000000  00044b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000400a  00000000  00000000  000460a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018229  00000000  00000000  0004a0b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b5b4b  00000000  00000000  000622db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00117e26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006334  00000000  00000000  00117e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000b4 	.word	0x200000b4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080071a0 	.word	0x080071a0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000b8 	.word	0x200000b8
 80001cc:	080071a0 	.word	0x080071a0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800057c:	f000 fbe1 	bl	8000d42 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000580:	f000 f84a 	bl	8000618 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000584:	f000 f8c8 	bl	8000718 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000588:	f000 f896 	bl	80006b8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800058c:	f002 fea8 	bl	80032e0 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of xSemaphoreBiEncoder */
  xSemaphoreBiEncoderHandle = osSemaphoreNew(1, 1, &xSemaphoreBiEncoder_attributes);
 8000590:	4a15      	ldr	r2, [pc, #84]	; (80005e8 <main+0x70>)
 8000592:	2101      	movs	r1, #1
 8000594:	2001      	movs	r0, #1
 8000596:	f002 ff9a 	bl	80034ce <osSemaphoreNew>
 800059a:	4603      	mov	r3, r0
 800059c:	4a13      	ldr	r2, [pc, #76]	; (80005ec <main+0x74>)
 800059e:	6013      	str	r3, [r2, #0]

  /* creation of xSemaphoreBiSync */
  xSemaphoreBiSyncHandle = osSemaphoreNew(1, 1, &xSemaphoreBiSync_attributes);
 80005a0:	4a13      	ldr	r2, [pc, #76]	; (80005f0 <main+0x78>)
 80005a2:	2101      	movs	r1, #1
 80005a4:	2001      	movs	r0, #1
 80005a6:	f002 ff92 	bl	80034ce <osSemaphoreNew>
 80005aa:	4603      	mov	r3, r0
 80005ac:	4a11      	ldr	r2, [pc, #68]	; (80005f4 <main+0x7c>)
 80005ae:	6013      	str	r3, [r2, #0]
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of xQueueUSART */
  xQueueUSARTHandle = osMessageQueueNew (3, 20, &xQueueUSART_attributes);
 80005b0:	4a11      	ldr	r2, [pc, #68]	; (80005f8 <main+0x80>)
 80005b2:	2114      	movs	r1, #20
 80005b4:	2003      	movs	r0, #3
 80005b6:	f003 f813 	bl	80035e0 <osMessageQueueNew>
 80005ba:	4603      	mov	r3, r0
 80005bc:	4a0f      	ldr	r2, [pc, #60]	; (80005fc <main+0x84>)
 80005be:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SendOdom */
  SendOdomHandle = osThreadNew(prvSendOdom, NULL, &SendOdom_attributes);
 80005c0:	4a0f      	ldr	r2, [pc, #60]	; (8000600 <main+0x88>)
 80005c2:	2100      	movs	r1, #0
 80005c4:	480f      	ldr	r0, [pc, #60]	; (8000604 <main+0x8c>)
 80005c6:	f002 fed5 	bl	8003374 <osThreadNew>
 80005ca:	4603      	mov	r3, r0
 80005cc:	4a0e      	ldr	r2, [pc, #56]	; (8000608 <main+0x90>)
 80005ce:	6013      	str	r3, [r2, #0]

  /* creation of SendMessage */
  SendMessageHandle = osThreadNew(prvSendMessage, NULL, &SendMessage_attributes);
 80005d0:	4a0e      	ldr	r2, [pc, #56]	; (800060c <main+0x94>)
 80005d2:	2100      	movs	r1, #0
 80005d4:	480e      	ldr	r0, [pc, #56]	; (8000610 <main+0x98>)
 80005d6:	f002 fecd 	bl	8003374 <osThreadNew>
 80005da:	4603      	mov	r3, r0
 80005dc:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <main+0x9c>)
 80005de:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005e0:	f002 fea2 	bl	8003328 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005e4:	e7fe      	b.n	80005e4 <main+0x6c>
 80005e6:	bf00      	nop
 80005e8:	0800728c 	.word	0x0800728c
 80005ec:	20001b10 	.word	0x20001b10
 80005f0:	0800729c 	.word	0x0800729c
 80005f4:	20001a88 	.word	0x20001a88
 80005f8:	08007274 	.word	0x08007274
 80005fc:	20001a84 	.word	0x20001a84
 8000600:	0800722c 	.word	0x0800722c
 8000604:	0800094d 	.word	0x0800094d
 8000608:	20001a7c 	.word	0x20001a7c
 800060c:	08007250 	.word	0x08007250
 8000610:	080009cd 	.word	0x080009cd
 8000614:	20001a74 	.word	0x20001a74

08000618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b096      	sub	sp, #88	; 0x58
 800061c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800061e:	f107 0314 	add.w	r3, r7, #20
 8000622:	2244      	movs	r2, #68	; 0x44
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f006 f92a 	bl	8006880 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800062c:	463b      	mov	r3, r7
 800062e:	2200      	movs	r2, #0
 8000630:	601a      	str	r2, [r3, #0]
 8000632:	605a      	str	r2, [r3, #4]
 8000634:	609a      	str	r2, [r3, #8]
 8000636:	60da      	str	r2, [r3, #12]
 8000638:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800063a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800063e:	f000 fe4b 	bl	80012d8 <HAL_PWREx_ControlVoltageScaling>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000648:	f000 f9f2 	bl	8000a30 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800064c:	2302      	movs	r3, #2
 800064e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000650:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000654:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000656:	2340      	movs	r3, #64	; 0x40
 8000658:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800065a:	2302      	movs	r3, #2
 800065c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800065e:	2302      	movs	r3, #2
 8000660:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000662:	2301      	movs	r3, #1
 8000664:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000666:	230a      	movs	r3, #10
 8000668:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800066a:	2302      	movs	r3, #2
 800066c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800066e:	2302      	movs	r3, #2
 8000670:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000672:	f107 0314 	add.w	r3, r7, #20
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fe84 	bl	8001384 <HAL_RCC_OscConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000682:	f000 f9d5 	bl	8000a30 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000686:	230f      	movs	r3, #15
 8000688:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800068a:	2303      	movs	r3, #3
 800068c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800068e:	2300      	movs	r3, #0
 8000690:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000692:	2300      	movs	r3, #0
 8000694:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000696:	2300      	movs	r3, #0
 8000698:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800069a:	463b      	mov	r3, r7
 800069c:	2104      	movs	r1, #4
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fad6 	bl	8001c50 <HAL_RCC_ClockConfig>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80006aa:	f000 f9c1 	bl	8000a30 <Error_Handler>
  }
}
 80006ae:	bf00      	nop
 80006b0:	3758      	adds	r7, #88	; 0x58
 80006b2:	46bd      	mov	sp, r7
 80006b4:	bd80      	pop	{r7, pc}
	...

080006b8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006bc:	4b14      	ldr	r3, [pc, #80]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006be:	4a15      	ldr	r2, [pc, #84]	; (8000714 <MX_USART2_UART_Init+0x5c>)
 80006c0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006c2:	4b13      	ldr	r3, [pc, #76]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006c8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ca:	4b11      	ldr	r3, [pc, #68]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006d0:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006d6:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006d8:	2200      	movs	r2, #0
 80006da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006dc:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006de:	220c      	movs	r2, #12
 80006e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006e2:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e8:	4b09      	ldr	r3, [pc, #36]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006ee:	4b08      	ldr	r3, [pc, #32]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006f4:	4b06      	ldr	r3, [pc, #24]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_USART2_UART_Init+0x58>)
 80006fc:	f002 f8e6 	bl	80028cc <HAL_UART_Init>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d001      	beq.n	800070a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000706:	f000 f993 	bl	8000a30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800070a:	bf00      	nop
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	20001a8c 	.word	0x20001a8c
 8000714:	40004400 	.word	0x40004400

08000718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800071e:	f107 030c 	add.w	r3, r7, #12
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800072e:	4b24      	ldr	r3, [pc, #144]	; (80007c0 <MX_GPIO_Init+0xa8>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000732:	4a23      	ldr	r2, [pc, #140]	; (80007c0 <MX_GPIO_Init+0xa8>)
 8000734:	f043 0304 	orr.w	r3, r3, #4
 8000738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800073a:	4b21      	ldr	r3, [pc, #132]	; (80007c0 <MX_GPIO_Init+0xa8>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073e:	f003 0304 	and.w	r3, r3, #4
 8000742:	60bb      	str	r3, [r7, #8]
 8000744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000746:	4b1e      	ldr	r3, [pc, #120]	; (80007c0 <MX_GPIO_Init+0xa8>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a1d      	ldr	r2, [pc, #116]	; (80007c0 <MX_GPIO_Init+0xa8>)
 800074c:	f043 0301 	orr.w	r3, r3, #1
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b1b      	ldr	r3, [pc, #108]	; (80007c0 <MX_GPIO_Init+0xa8>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f003 0301 	and.w	r3, r3, #1
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800075e:	230f      	movs	r3, #15
 8000760:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000762:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000766:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	4619      	mov	r1, r3
 8000772:	4814      	ldr	r0, [pc, #80]	; (80007c4 <MX_GPIO_Init+0xac>)
 8000774:	f000 fc00 	bl	8000f78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000778:	2200      	movs	r2, #0
 800077a:	2105      	movs	r1, #5
 800077c:	2006      	movs	r0, #6
 800077e:	f000 fbd1 	bl	8000f24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000782:	2006      	movs	r0, #6
 8000784:	f000 fbea 	bl	8000f5c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000788:	2200      	movs	r2, #0
 800078a:	2105      	movs	r1, #5
 800078c:	2007      	movs	r0, #7
 800078e:	f000 fbc9 	bl	8000f24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000792:	2007      	movs	r0, #7
 8000794:	f000 fbe2 	bl	8000f5c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 8000798:	2200      	movs	r2, #0
 800079a:	2105      	movs	r1, #5
 800079c:	2008      	movs	r0, #8
 800079e:	f000 fbc1 	bl	8000f24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80007a2:	2008      	movs	r0, #8
 80007a4:	f000 fbda 	bl	8000f5c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2105      	movs	r1, #5
 80007ac:	2009      	movs	r0, #9
 80007ae:	f000 fbb9 	bl	8000f24 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80007b2:	2009      	movs	r0, #9
 80007b4:	f000 fbd2 	bl	8000f5c <HAL_NVIC_EnableIRQ>

}
 80007b8:	bf00      	nop
 80007ba:	3720      	adds	r7, #32
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	40021000 	.word	0x40021000
 80007c4:	48000800 	.word	0x48000800

080007c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	80fb      	strh	r3, [r7, #6]

	if (GPIO_Pin==GPIO_PIN_9){
 80007d2:	88fb      	ldrh	r3, [r7, #6]
 80007d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80007d8:	d113      	bne.n	8000802 <HAL_GPIO_EXTI_Callback+0x3a>
		static BaseType_t pxHigherPriorityTaskWoken;

		xSemaphoreGiveFromISR( xSemaphoreBiSyncHandle, &pxHigherPriorityTaskWoken );
 80007da:	4b4e      	ldr	r3, [pc, #312]	; (8000914 <HAL_GPIO_EXTI_Callback+0x14c>)
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	494e      	ldr	r1, [pc, #312]	; (8000918 <HAL_GPIO_EXTI_Callback+0x150>)
 80007e0:	4618      	mov	r0, r3
 80007e2:	f003 fb9a 	bl	8003f1a <xQueueGiveFromISR>

		if( pxHigherPriorityTaskWoken == pdTRUE )
 80007e6:	4b4c      	ldr	r3, [pc, #304]	; (8000918 <HAL_GPIO_EXTI_Callback+0x150>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	f040 808e 	bne.w	800090c <HAL_GPIO_EXTI_Callback+0x144>
			taskYIELD(); /* forces the context change */
 80007f0:	4b4a      	ldr	r3, [pc, #296]	; (800091c <HAL_GPIO_EXTI_Callback+0x154>)
 80007f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	f3bf 8f4f 	dsb	sy
 80007fc:	f3bf 8f6f 	isb	sy
		xSemaphoreGiveFromISR( xSemaphoreBiEncoderHandle, &pxHigherPriorityTaskWoken );

		if( pxHigherPriorityTaskWoken == pdTRUE )
			taskYIELD(); /* forces the context change */
	}
}
 8000800:	e084      	b.n	800090c <HAL_GPIO_EXTI_Callback+0x144>
	}else if ((GPIO_Pin==GPIO_PIN_0)||(GPIO_Pin==GPIO_PIN_1)){
 8000802:	88fb      	ldrh	r3, [r7, #6]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d002      	beq.n	800080e <HAL_GPIO_EXTI_Callback+0x46>
 8000808:	88fb      	ldrh	r3, [r7, #6]
 800080a:	2b02      	cmp	r3, #2
 800080c:	d13b      	bne.n	8000886 <HAL_GPIO_EXTI_Callback+0xbe>
		Wheel_L_Old = Wheel_L_New;
 800080e:	4b44      	ldr	r3, [pc, #272]	; (8000920 <HAL_GPIO_EXTI_Callback+0x158>)
 8000810:	781a      	ldrb	r2, [r3, #0]
 8000812:	4b44      	ldr	r3, [pc, #272]	; (8000924 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000814:	701a      	strb	r2, [r3, #0]
		xSemaphoreTakeFromISR(xSemaphoreBiEncoderHandle, &pxHigherPriorityTaskWoken);
 8000816:	4b44      	ldr	r3, [pc, #272]	; (8000928 <HAL_GPIO_EXTI_Callback+0x160>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4a44      	ldr	r2, [pc, #272]	; (800092c <HAL_GPIO_EXTI_Callback+0x164>)
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f003 fdf4 	bl	800440c <xQueueReceiveFromISR>
		Wheel_L_New = 2*HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) + HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1);
 8000824:	2101      	movs	r1, #1
 8000826:	4842      	ldr	r0, [pc, #264]	; (8000930 <HAL_GPIO_EXTI_Callback+0x168>)
 8000828:	f000 fd18 	bl	800125c <HAL_GPIO_ReadPin>
 800082c:	4603      	mov	r3, r0
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	b2dc      	uxtb	r4, r3
 8000832:	2102      	movs	r1, #2
 8000834:	483e      	ldr	r0, [pc, #248]	; (8000930 <HAL_GPIO_EXTI_Callback+0x168>)
 8000836:	f000 fd11 	bl	800125c <HAL_GPIO_ReadPin>
 800083a:	4603      	mov	r3, r0
 800083c:	4423      	add	r3, r4
 800083e:	b2da      	uxtb	r2, r3
 8000840:	4b37      	ldr	r3, [pc, #220]	; (8000920 <HAL_GPIO_EXTI_Callback+0x158>)
 8000842:	701a      	strb	r2, [r3, #0]
		Wheel_L += QEM[Wheel_L_Old*4 + Wheel_L_New];
 8000844:	4b37      	ldr	r3, [pc, #220]	; (8000924 <HAL_GPIO_EXTI_Callback+0x15c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	4a35      	ldr	r2, [pc, #212]	; (8000920 <HAL_GPIO_EXTI_Callback+0x158>)
 800084c:	7812      	ldrb	r2, [r2, #0]
 800084e:	4413      	add	r3, r2
 8000850:	4a38      	ldr	r2, [pc, #224]	; (8000934 <HAL_GPIO_EXTI_Callback+0x16c>)
 8000852:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000856:	4b38      	ldr	r3, [pc, #224]	; (8000938 <HAL_GPIO_EXTI_Callback+0x170>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4413      	add	r3, r2
 800085c:	4a36      	ldr	r2, [pc, #216]	; (8000938 <HAL_GPIO_EXTI_Callback+0x170>)
 800085e:	6013      	str	r3, [r2, #0]
		xSemaphoreGiveFromISR( xSemaphoreBiEncoderHandle, &pxHigherPriorityTaskWoken );
 8000860:	4b31      	ldr	r3, [pc, #196]	; (8000928 <HAL_GPIO_EXTI_Callback+0x160>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4931      	ldr	r1, [pc, #196]	; (800092c <HAL_GPIO_EXTI_Callback+0x164>)
 8000866:	4618      	mov	r0, r3
 8000868:	f003 fb57 	bl	8003f1a <xQueueGiveFromISR>
		if( pxHigherPriorityTaskWoken == pdTRUE )
 800086c:	4b2f      	ldr	r3, [pc, #188]	; (800092c <HAL_GPIO_EXTI_Callback+0x164>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d14a      	bne.n	800090a <HAL_GPIO_EXTI_Callback+0x142>
			taskYIELD(); /* forces the context change */
 8000874:	4b29      	ldr	r3, [pc, #164]	; (800091c <HAL_GPIO_EXTI_Callback+0x154>)
 8000876:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	f3bf 8f4f 	dsb	sy
 8000880:	f3bf 8f6f 	isb	sy
	}else if ((GPIO_Pin==GPIO_PIN_0)||(GPIO_Pin==GPIO_PIN_1)){
 8000884:	e041      	b.n	800090a <HAL_GPIO_EXTI_Callback+0x142>
	else if ((GPIO_Pin==GPIO_PIN_2)||(GPIO_Pin==GPIO_PIN_3)){
 8000886:	88fb      	ldrh	r3, [r7, #6]
 8000888:	2b04      	cmp	r3, #4
 800088a:	d002      	beq.n	8000892 <HAL_GPIO_EXTI_Callback+0xca>
 800088c:	88fb      	ldrh	r3, [r7, #6]
 800088e:	2b08      	cmp	r3, #8
 8000890:	d13c      	bne.n	800090c <HAL_GPIO_EXTI_Callback+0x144>
		Wheel_R_Old = Wheel_R_New;
 8000892:	4b2a      	ldr	r3, [pc, #168]	; (800093c <HAL_GPIO_EXTI_Callback+0x174>)
 8000894:	781a      	ldrb	r2, [r3, #0]
 8000896:	4b2a      	ldr	r3, [pc, #168]	; (8000940 <HAL_GPIO_EXTI_Callback+0x178>)
 8000898:	701a      	strb	r2, [r3, #0]
		xSemaphoreTakeFromISR(xSemaphoreBiEncoderHandle, &pxHigherPriorityTaskWoken);
 800089a:	4b23      	ldr	r3, [pc, #140]	; (8000928 <HAL_GPIO_EXTI_Callback+0x160>)
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	4a29      	ldr	r2, [pc, #164]	; (8000944 <HAL_GPIO_EXTI_Callback+0x17c>)
 80008a0:	2100      	movs	r1, #0
 80008a2:	4618      	mov	r0, r3
 80008a4:	f003 fdb2 	bl	800440c <xQueueReceiveFromISR>
		Wheel_R_New = 2*HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_3) + HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_2);
 80008a8:	2108      	movs	r1, #8
 80008aa:	4821      	ldr	r0, [pc, #132]	; (8000930 <HAL_GPIO_EXTI_Callback+0x168>)
 80008ac:	f000 fcd6 	bl	800125c <HAL_GPIO_ReadPin>
 80008b0:	4603      	mov	r3, r0
 80008b2:	005b      	lsls	r3, r3, #1
 80008b4:	b2dc      	uxtb	r4, r3
 80008b6:	2104      	movs	r1, #4
 80008b8:	481d      	ldr	r0, [pc, #116]	; (8000930 <HAL_GPIO_EXTI_Callback+0x168>)
 80008ba:	f000 fccf 	bl	800125c <HAL_GPIO_ReadPin>
 80008be:	4603      	mov	r3, r0
 80008c0:	4423      	add	r3, r4
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	4b1d      	ldr	r3, [pc, #116]	; (800093c <HAL_GPIO_EXTI_Callback+0x174>)
 80008c6:	701a      	strb	r2, [r3, #0]
		Wheel_R += QEM[Wheel_R_Old*4 + Wheel_R_New];
 80008c8:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <HAL_GPIO_EXTI_Callback+0x178>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	4a1b      	ldr	r2, [pc, #108]	; (800093c <HAL_GPIO_EXTI_Callback+0x174>)
 80008d0:	7812      	ldrb	r2, [r2, #0]
 80008d2:	4413      	add	r3, r2
 80008d4:	4a17      	ldr	r2, [pc, #92]	; (8000934 <HAL_GPIO_EXTI_Callback+0x16c>)
 80008d6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80008da:	4b1b      	ldr	r3, [pc, #108]	; (8000948 <HAL_GPIO_EXTI_Callback+0x180>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	4413      	add	r3, r2
 80008e0:	4a19      	ldr	r2, [pc, #100]	; (8000948 <HAL_GPIO_EXTI_Callback+0x180>)
 80008e2:	6013      	str	r3, [r2, #0]
		xSemaphoreGiveFromISR( xSemaphoreBiEncoderHandle, &pxHigherPriorityTaskWoken );
 80008e4:	4b10      	ldr	r3, [pc, #64]	; (8000928 <HAL_GPIO_EXTI_Callback+0x160>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4916      	ldr	r1, [pc, #88]	; (8000944 <HAL_GPIO_EXTI_Callback+0x17c>)
 80008ea:	4618      	mov	r0, r3
 80008ec:	f003 fb15 	bl	8003f1a <xQueueGiveFromISR>
		if( pxHigherPriorityTaskWoken == pdTRUE )
 80008f0:	4b14      	ldr	r3, [pc, #80]	; (8000944 <HAL_GPIO_EXTI_Callback+0x17c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d109      	bne.n	800090c <HAL_GPIO_EXTI_Callback+0x144>
			taskYIELD(); /* forces the context change */
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <HAL_GPIO_EXTI_Callback+0x154>)
 80008fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	f3bf 8f4f 	dsb	sy
 8000904:	f3bf 8f6f 	isb	sy
}
 8000908:	e000      	b.n	800090c <HAL_GPIO_EXTI_Callback+0x144>
	}else if ((GPIO_Pin==GPIO_PIN_0)||(GPIO_Pin==GPIO_PIN_1)){
 800090a:	bf00      	nop
}
 800090c:	bf00      	nop
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	bd90      	pop	{r4, r7, pc}
 8000914:	20001a88 	.word	0x20001a88
 8000918:	200000d4 	.word	0x200000d4
 800091c:	e000ed04 	.word	0xe000ed04
 8000920:	200000d3 	.word	0x200000d3
 8000924:	200000d2 	.word	0x200000d2
 8000928:	20001b10 	.word	0x20001b10
 800092c:	200000d8 	.word	0x200000d8
 8000930:	48000800 	.word	0x48000800
 8000934:	20000000 	.word	0x20000000
 8000938:	20001a78 	.word	0x20001a78
 800093c:	200000d1 	.word	0x200000d1
 8000940:	200000d0 	.word	0x200000d0
 8000944:	200000dc 	.word	0x200000dc
 8000948:	20001a80 	.word	0x20001a80

0800094c <prvSendOdom>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_prvSendOdom */
void prvSendOdom(void *argument)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08c      	sub	sp, #48	; 0x30
 8000950:	af02      	add	r7, sp, #8
 8000952:	6078      	str	r0, [r7, #4]
	char message[20];
	int32_t Wheel_R_cpy, Wheel_L_cpy;
  /* Infinite loop */
  for(;;)
  {
	  osDelay(10);
 8000954:	200a      	movs	r0, #10
 8000956:	f002 fd9f 	bl	8003498 <osDelay>

	  xSemaphoreTake(xSemaphoreBiEncoderHandle, ( TickType_t) portMAX_DELAY);
 800095a:	4b17      	ldr	r3, [pc, #92]	; (80009b8 <prvSendOdom+0x6c>)
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000962:	4618      	mov	r0, r3
 8000964:	f003 fc46 	bl	80041f4 <xQueueSemaphoreTake>
	  Wheel_R_cpy = Wheel_R;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <prvSendOdom+0x70>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
	  Wheel_L_cpy = Wheel_L;
 800096e:	4b14      	ldr	r3, [pc, #80]	; (80009c0 <prvSendOdom+0x74>)
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	623b      	str	r3, [r7, #32]

	  Wheel_L = 0;
 8000974:	4b12      	ldr	r3, [pc, #72]	; (80009c0 <prvSendOdom+0x74>)
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
	  Wheel_R = 0;
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <prvSendOdom+0x70>)
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
      xSemaphoreGive(xSemaphoreBiEncoderHandle);
 8000980:	4b0d      	ldr	r3, [pc, #52]	; (80009b8 <prvSendOdom+0x6c>)
 8000982:	6818      	ldr	r0, [r3, #0]
 8000984:	2300      	movs	r3, #0
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	f003 f92d 	bl	8003be8 <xQueueGenericSend>

	  //Create message
	  sprintf(message, "%lu %li %li\n", xTaskGetTickCount(), Wheel_L_cpy, Wheel_R_cpy);
 800098e:	f004 fa99 	bl	8004ec4 <xTaskGetTickCount>
 8000992:	4602      	mov	r2, r0
 8000994:	f107 000c 	add.w	r0, r7, #12
 8000998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	6a3b      	ldr	r3, [r7, #32]
 800099e:	4909      	ldr	r1, [pc, #36]	; (80009c4 <prvSendOdom+0x78>)
 80009a0:	f006 f84a 	bl	8006a38 <siprintf>

	  xQueueSendToBack( xQueueUSARTHandle, &message, ( TickType_t ) portMAX_DELAY );
 80009a4:	4b08      	ldr	r3, [pc, #32]	; (80009c8 <prvSendOdom+0x7c>)
 80009a6:	6818      	ldr	r0, [r3, #0]
 80009a8:	f107 010c 	add.w	r1, r7, #12
 80009ac:	2300      	movs	r3, #0
 80009ae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009b2:	f003 f919 	bl	8003be8 <xQueueGenericSend>
	  osDelay(10);
 80009b6:	e7cd      	b.n	8000954 <prvSendOdom+0x8>
 80009b8:	20001b10 	.word	0x20001b10
 80009bc:	20001a80 	.word	0x20001a80
 80009c0:	20001a78 	.word	0x20001a78
 80009c4:	08007204 	.word	0x08007204
 80009c8:	20001a84 	.word	0x20001a84

080009cc <prvSendMessage>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_prvSendMessage */
void prvSendMessage(void *argument)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
	char message[20];
  /* Infinite loop */
  for(;;)
  {
	  /* Block until receive message. */
	  xQueueReceive( xQueueUSARTHandle, &message, ( TickType_t ) portMAX_DELAY );
 80009d4:	4b0b      	ldr	r3, [pc, #44]	; (8000a04 <prvSendMessage+0x38>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f107 010c 	add.w	r1, r7, #12
 80009dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80009e0:	4618      	mov	r0, r3
 80009e2:	f003 fb27 	bl	8004034 <xQueueReceive>
	  HAL_UART_Transmit(&huart2, &message, strlen( message ), 20);
 80009e6:	f107 030c 	add.w	r3, r7, #12
 80009ea:	4618      	mov	r0, r3
 80009ec:	f7ff fbf0 	bl	80001d0 <strlen>
 80009f0:	4603      	mov	r3, r0
 80009f2:	b29a      	uxth	r2, r3
 80009f4:	f107 010c 	add.w	r1, r7, #12
 80009f8:	2314      	movs	r3, #20
 80009fa:	4803      	ldr	r0, [pc, #12]	; (8000a08 <prvSendMessage+0x3c>)
 80009fc:	f001 ffb4 	bl	8002968 <HAL_UART_Transmit>
	  xQueueReceive( xQueueUSARTHandle, &message, ( TickType_t ) portMAX_DELAY );
 8000a00:	e7e8      	b.n	80009d4 <prvSendMessage+0x8>
 8000a02:	bf00      	nop
 8000a04:	20001a84 	.word	0x20001a84
 8000a08:	20001a8c 	.word	0x20001a8c

08000a0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a1a:	4293      	cmp	r3, r2
 8000a1c:	d101      	bne.n	8000a22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a1e:	f000 f9a9 	bl	8000d74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40001000 	.word	0x40001000

08000a30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a34:	b672      	cpsid	i
}
 8000a36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <Error_Handler+0x8>
	...

08000a3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b082      	sub	sp, #8
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	4b11      	ldr	r3, [pc, #68]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a46:	4a10      	ldr	r2, [pc, #64]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000a4e:	4b0e      	ldr	r3, [pc, #56]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a52:	f003 0301 	and.w	r3, r3, #1
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a5e:	4a0a      	ldr	r2, [pc, #40]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a64:	6593      	str	r3, [r2, #88]	; 0x58
 8000a66:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <HAL_MspInit+0x4c>)
 8000a68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a72:	2200      	movs	r2, #0
 8000a74:	210f      	movs	r1, #15
 8000a76:	f06f 0001 	mvn.w	r0, #1
 8000a7a:	f000 fa53 	bl	8000f24 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a7e:	bf00      	nop
 8000a80:	3708      	adds	r7, #8
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40021000 	.word	0x40021000

08000a8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b096      	sub	sp, #88	; 0x58
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000a98:	2200      	movs	r2, #0
 8000a9a:	601a      	str	r2, [r3, #0]
 8000a9c:	605a      	str	r2, [r3, #4]
 8000a9e:	609a      	str	r2, [r3, #8]
 8000aa0:	60da      	str	r2, [r3, #12]
 8000aa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	2234      	movs	r2, #52	; 0x34
 8000aaa:	2100      	movs	r1, #0
 8000aac:	4618      	mov	r0, r3
 8000aae:	f005 fee7 	bl	8006880 <memset>
  if(huart->Instance==USART2)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a1f      	ldr	r2, [pc, #124]	; (8000b34 <HAL_UART_MspInit+0xa8>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d136      	bne.n	8000b2a <HAL_UART_MspInit+0x9e>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000abc:	2302      	movs	r3, #2
 8000abe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ac4:	f107 0310 	add.w	r3, r7, #16
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f001 faf9 	bl	80020c0 <HAL_RCCEx_PeriphCLKConfig>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ad4:	f7ff ffac 	bl	8000a30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ad8:	4b17      	ldr	r3, [pc, #92]	; (8000b38 <HAL_UART_MspInit+0xac>)
 8000ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000adc:	4a16      	ldr	r2, [pc, #88]	; (8000b38 <HAL_UART_MspInit+0xac>)
 8000ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ae2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ae4:	4b14      	ldr	r3, [pc, #80]	; (8000b38 <HAL_UART_MspInit+0xac>)
 8000ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ae8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aec:	60fb      	str	r3, [r7, #12]
 8000aee:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af0:	4b11      	ldr	r3, [pc, #68]	; (8000b38 <HAL_UART_MspInit+0xac>)
 8000af2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000af4:	4a10      	ldr	r2, [pc, #64]	; (8000b38 <HAL_UART_MspInit+0xac>)
 8000af6:	f043 0301 	orr.w	r3, r3, #1
 8000afa:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000afc:	4b0e      	ldr	r3, [pc, #56]	; (8000b38 <HAL_UART_MspInit+0xac>)
 8000afe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b00:	f003 0301 	and.w	r3, r3, #1
 8000b04:	60bb      	str	r3, [r7, #8]
 8000b06:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b08:	230c      	movs	r3, #12
 8000b0a:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b10:	2300      	movs	r3, #0
 8000b12:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b18:	2307      	movs	r3, #7
 8000b1a:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b1c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b20:	4619      	mov	r1, r3
 8000b22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b26:	f000 fa27 	bl	8000f78 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b2a:	bf00      	nop
 8000b2c:	3758      	adds	r7, #88	; 0x58
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40004400 	.word	0x40004400
 8000b38:	40021000 	.word	0x40021000

08000b3c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08c      	sub	sp, #48	; 0x30
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority ,0);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	6879      	ldr	r1, [r7, #4]
 8000b50:	2036      	movs	r0, #54	; 0x36
 8000b52:	f000 f9e7 	bl	8000f24 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8000b56:	2036      	movs	r0, #54	; 0x36
 8000b58:	f000 fa00 	bl	8000f5c <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b5c:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <HAL_InitTick+0x9c>)
 8000b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b60:	4a1d      	ldr	r2, [pc, #116]	; (8000bd8 <HAL_InitTick+0x9c>)
 8000b62:	f043 0310 	orr.w	r3, r3, #16
 8000b66:	6593      	str	r3, [r2, #88]	; 0x58
 8000b68:	4b1b      	ldr	r3, [pc, #108]	; (8000bd8 <HAL_InitTick+0x9c>)
 8000b6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b6c:	f003 0310 	and.w	r3, r3, #16
 8000b70:	60fb      	str	r3, [r7, #12]
 8000b72:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b74:	f107 0210 	add.w	r2, r7, #16
 8000b78:	f107 0314 	add.w	r3, r7, #20
 8000b7c:	4611      	mov	r1, r2
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f001 fa0c 	bl	8001f9c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b84:	f001 f9de 	bl	8001f44 <HAL_RCC_GetPCLK1Freq>
 8000b88:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b8c:	4a13      	ldr	r2, [pc, #76]	; (8000bdc <HAL_InitTick+0xa0>)
 8000b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b92:	0c9b      	lsrs	r3, r3, #18
 8000b94:	3b01      	subs	r3, #1
 8000b96:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b98:	4b11      	ldr	r3, [pc, #68]	; (8000be0 <HAL_InitTick+0xa4>)
 8000b9a:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <HAL_InitTick+0xa8>)
 8000b9c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b9e:	4b10      	ldr	r3, [pc, #64]	; (8000be0 <HAL_InitTick+0xa4>)
 8000ba0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ba4:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ba6:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <HAL_InitTick+0xa4>)
 8000ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000baa:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <HAL_InitTick+0xa4>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb2:	4b0b      	ldr	r3, [pc, #44]	; (8000be0 <HAL_InitTick+0xa4>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000bb8:	4809      	ldr	r0, [pc, #36]	; (8000be0 <HAL_InitTick+0xa4>)
 8000bba:	f001 fc07 	bl	80023cc <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d104      	bne.n	8000bce <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000bc4:	4806      	ldr	r0, [pc, #24]	; (8000be0 <HAL_InitTick+0xa4>)
 8000bc6:	f001 fc63 	bl	8002490 <HAL_TIM_Base_Start_IT>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	e000      	b.n	8000bd0 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3730      	adds	r7, #48	; 0x30
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40021000 	.word	0x40021000
 8000bdc:	431bde83 	.word	0x431bde83
 8000be0:	20001b14 	.word	0x20001b14
 8000be4:	40001000 	.word	0x40001000

08000be8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <NMI_Handler+0x4>

08000bee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <HardFault_Handler+0x4>

08000bf4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <MemManage_Handler+0x4>

08000bfa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <BusFault_Handler+0x4>

08000c00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <UsageFault_Handler+0x4>

08000c06 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c0a:	bf00      	nop
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr

08000c14 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000c18:	2001      	movs	r0, #1
 8000c1a:	f000 fb37 	bl	800128c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}

08000c22 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000c22:	b580      	push	{r7, lr}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000c26:	2002      	movs	r0, #2
 8000c28:	f000 fb30 	bl	800128c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000c34:	2004      	movs	r0, #4
 8000c36:	f000 fb29 	bl	800128c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000c42:	2008      	movs	r0, #8
 8000c44:	f000 fb22 	bl	800128c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}

08000c4c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c50:	4802      	ldr	r0, [pc, #8]	; (8000c5c <TIM6_IRQHandler+0x10>)
 8000c52:	f001 fc71 	bl	8002538 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	20001b14 	.word	0x20001b14

08000c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c68:	4a14      	ldr	r2, [pc, #80]	; (8000cbc <_sbrk+0x5c>)
 8000c6a:	4b15      	ldr	r3, [pc, #84]	; (8000cc0 <_sbrk+0x60>)
 8000c6c:	1ad3      	subs	r3, r2, r3
 8000c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c74:	4b13      	ldr	r3, [pc, #76]	; (8000cc4 <_sbrk+0x64>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d102      	bne.n	8000c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c7c:	4b11      	ldr	r3, [pc, #68]	; (8000cc4 <_sbrk+0x64>)
 8000c7e:	4a12      	ldr	r2, [pc, #72]	; (8000cc8 <_sbrk+0x68>)
 8000c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <_sbrk+0x64>)
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4413      	add	r3, r2
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d207      	bcs.n	8000ca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c90:	f005 fdbc 	bl	800680c <__errno>
 8000c94:	4603      	mov	r3, r0
 8000c96:	220c      	movs	r2, #12
 8000c98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c9e:	e009      	b.n	8000cb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ca0:	4b08      	ldr	r3, [pc, #32]	; (8000cc4 <_sbrk+0x64>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ca6:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <_sbrk+0x64>)
 8000ca8:	681a      	ldr	r2, [r3, #0]
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4413      	add	r3, r2
 8000cae:	4a05      	ldr	r2, [pc, #20]	; (8000cc4 <_sbrk+0x64>)
 8000cb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cb2:	68fb      	ldr	r3, [r7, #12]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}
 8000cbc:	2000a000 	.word	0x2000a000
 8000cc0:	00000400 	.word	0x00000400
 8000cc4:	200000e0 	.word	0x200000e0
 8000cc8:	20001bb8 	.word	0x20001bb8

08000ccc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <SystemInit+0x20>)
 8000cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cd6:	4a05      	ldr	r2, [pc, #20]	; (8000cec <SystemInit+0x20>)
 8000cd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ce0:	bf00      	nop
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	e000ed00 	.word	0xe000ed00

08000cf0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d28 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000cf4:	f7ff ffea 	bl	8000ccc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cfa:	490d      	ldr	r1, [pc, #52]	; (8000d30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cfc:	4a0d      	ldr	r2, [pc, #52]	; (8000d34 <LoopForever+0xe>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d00:	e002      	b.n	8000d08 <LoopCopyDataInit>

08000d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d06:	3304      	adds	r3, #4

08000d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d0c:	d3f9      	bcc.n	8000d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d0e:	4a0a      	ldr	r2, [pc, #40]	; (8000d38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d10:	4c0a      	ldr	r4, [pc, #40]	; (8000d3c <LoopForever+0x16>)
  movs r3, #0
 8000d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d14:	e001      	b.n	8000d1a <LoopFillZerobss>

08000d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d18:	3204      	adds	r2, #4

08000d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d1c:	d3fb      	bcc.n	8000d16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d1e:	f005 fd7b 	bl	8006818 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d22:	f7ff fc29 	bl	8000578 <main>

08000d26 <LoopForever>:

LoopForever:
    b LoopForever
 8000d26:	e7fe      	b.n	8000d26 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d28:	2000a000 	.word	0x2000a000
  ldr r0, =_sdata
 8000d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d30:	200000b4 	.word	0x200000b4
  ldr r2, =_sidata
 8000d34:	08007398 	.word	0x08007398
  ldr r2, =_sbss
 8000d38:	200000b4 	.word	0x200000b4
  ldr r4, =_ebss
 8000d3c:	20001bb4 	.word	0x20001bb4

08000d40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d40:	e7fe      	b.n	8000d40 <ADC1_2_IRQHandler>

08000d42 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d4c:	2003      	movs	r0, #3
 8000d4e:	f000 f8de 	bl	8000f0e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d52:	200f      	movs	r0, #15
 8000d54:	f7ff fef2 	bl	8000b3c <HAL_InitTick>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d002      	beq.n	8000d64 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d5e:	2301      	movs	r3, #1
 8000d60:	71fb      	strb	r3, [r7, #7]
 8000d62:	e001      	b.n	8000d68 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d64:	f7ff fe6a 	bl	8000a3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d68:	79fb      	ldrb	r3, [r7, #7]
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3708      	adds	r7, #8
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d78:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <HAL_IncTick+0x20>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <HAL_IncTick+0x24>)
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4413      	add	r3, r2
 8000d84:	4a04      	ldr	r2, [pc, #16]	; (8000d98 <HAL_IncTick+0x24>)
 8000d86:	6013      	str	r3, [r2, #0]
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000048 	.word	0x20000048
 8000d98:	20001b60 	.word	0x20001b60

08000d9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000da0:	4b03      	ldr	r3, [pc, #12]	; (8000db0 <HAL_GetTick+0x14>)
 8000da2:	681b      	ldr	r3, [r3, #0]
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	20001b60 	.word	0x20001b60

08000db4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b085      	sub	sp, #20
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f003 0307 	and.w	r3, r3, #7
 8000dc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dca:	68ba      	ldr	r2, [r7, #8]
 8000dcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ddc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000de0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000de6:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <__NVIC_SetPriorityGrouping+0x44>)
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	60d3      	str	r3, [r2, #12]
}
 8000dec:	bf00      	nop
 8000dee:	3714      	adds	r7, #20
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr
 8000df8:	e000ed00 	.word	0xe000ed00

08000dfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e00:	4b04      	ldr	r3, [pc, #16]	; (8000e14 <__NVIC_GetPriorityGrouping+0x18>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	0a1b      	lsrs	r3, r3, #8
 8000e06:	f003 0307 	and.w	r3, r3, #7
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	b083      	sub	sp, #12
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	db0b      	blt.n	8000e42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e2a:	79fb      	ldrb	r3, [r7, #7]
 8000e2c:	f003 021f 	and.w	r2, r3, #31
 8000e30:	4907      	ldr	r1, [pc, #28]	; (8000e50 <__NVIC_EnableIRQ+0x38>)
 8000e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e36:	095b      	lsrs	r3, r3, #5
 8000e38:	2001      	movs	r0, #1
 8000e3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	e000e100 	.word	0xe000e100

08000e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	6039      	str	r1, [r7, #0]
 8000e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	db0a      	blt.n	8000e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	b2da      	uxtb	r2, r3
 8000e6c:	490c      	ldr	r1, [pc, #48]	; (8000ea0 <__NVIC_SetPriority+0x4c>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	0112      	lsls	r2, r2, #4
 8000e74:	b2d2      	uxtb	r2, r2
 8000e76:	440b      	add	r3, r1
 8000e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e7c:	e00a      	b.n	8000e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	b2da      	uxtb	r2, r3
 8000e82:	4908      	ldr	r1, [pc, #32]	; (8000ea4 <__NVIC_SetPriority+0x50>)
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	f003 030f 	and.w	r3, r3, #15
 8000e8a:	3b04      	subs	r3, #4
 8000e8c:	0112      	lsls	r2, r2, #4
 8000e8e:	b2d2      	uxtb	r2, r2
 8000e90:	440b      	add	r3, r1
 8000e92:	761a      	strb	r2, [r3, #24]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000e100 	.word	0xe000e100
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b089      	sub	sp, #36	; 0x24
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f003 0307 	and.w	r3, r3, #7
 8000eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ebc:	69fb      	ldr	r3, [r7, #28]
 8000ebe:	f1c3 0307 	rsb	r3, r3, #7
 8000ec2:	2b04      	cmp	r3, #4
 8000ec4:	bf28      	it	cs
 8000ec6:	2304      	movcs	r3, #4
 8000ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eca:	69fb      	ldr	r3, [r7, #28]
 8000ecc:	3304      	adds	r3, #4
 8000ece:	2b06      	cmp	r3, #6
 8000ed0:	d902      	bls.n	8000ed8 <NVIC_EncodePriority+0x30>
 8000ed2:	69fb      	ldr	r3, [r7, #28]
 8000ed4:	3b03      	subs	r3, #3
 8000ed6:	e000      	b.n	8000eda <NVIC_EncodePriority+0x32>
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000edc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000ee0:	69bb      	ldr	r3, [r7, #24]
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43da      	mvns	r2, r3
 8000ee8:	68bb      	ldr	r3, [r7, #8]
 8000eea:	401a      	ands	r2, r3
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ef0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8000efa:	43d9      	mvns	r1, r3
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f00:	4313      	orrs	r3, r2
         );
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	3724      	adds	r7, #36	; 0x24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0
 8000f14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ff4c 	bl	8000db4 <__NVIC_SetPriorityGrouping>
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
 8000f30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f36:	f7ff ff61 	bl	8000dfc <__NVIC_GetPriorityGrouping>
 8000f3a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	68b9      	ldr	r1, [r7, #8]
 8000f40:	6978      	ldr	r0, [r7, #20]
 8000f42:	f7ff ffb1 	bl	8000ea8 <NVIC_EncodePriority>
 8000f46:	4602      	mov	r2, r0
 8000f48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f4c:	4611      	mov	r1, r2
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f7ff ff80 	bl	8000e54 <__NVIC_SetPriority>
}
 8000f54:	bf00      	nop
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff ff54 	bl	8000e18 <__NVIC_EnableIRQ>
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b087      	sub	sp, #28
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	6078      	str	r0, [r7, #4]
 8000f80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f82:	2300      	movs	r3, #0
 8000f84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f86:	e14e      	b.n	8001226 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681a      	ldr	r2, [r3, #0]
 8000f8c:	2101      	movs	r1, #1
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	4013      	ands	r3, r2
 8000f96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	f000 8140 	beq.w	8001220 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d005      	beq.n	8000fb8 <HAL_GPIO_Init+0x40>
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b02      	cmp	r3, #2
 8000fb6:	d130      	bne.n	800101a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	2203      	movs	r2, #3
 8000fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc8:	43db      	mvns	r3, r3
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	4013      	ands	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	68da      	ldr	r2, [r3, #12]
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	005b      	lsls	r3, r3, #1
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	693a      	ldr	r2, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fee:	2201      	movs	r2, #1
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff6:	43db      	mvns	r3, r3
 8000ff8:	693a      	ldr	r2, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	091b      	lsrs	r3, r3, #4
 8001004:	f003 0201 	and.w	r2, r3, #1
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	fa02 f303 	lsl.w	r3, r2, r3
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f003 0303 	and.w	r3, r3, #3
 8001022:	2b03      	cmp	r3, #3
 8001024:	d017      	beq.n	8001056 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	2203      	movs	r2, #3
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	4013      	ands	r3, r2
 800103c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	689a      	ldr	r2, [r3, #8]
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b02      	cmp	r3, #2
 8001060:	d123      	bne.n	80010aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	08da      	lsrs	r2, r3, #3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	3208      	adds	r2, #8
 800106a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800106e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	009b      	lsls	r3, r3, #2
 8001078:	220f      	movs	r2, #15
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	691a      	ldr	r2, [r3, #16]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	f003 0307 	and.w	r3, r3, #7
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	fa02 f303 	lsl.w	r3, r2, r3
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	08da      	lsrs	r2, r3, #3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	3208      	adds	r2, #8
 80010a4:	6939      	ldr	r1, [r7, #16]
 80010a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	005b      	lsls	r3, r3, #1
 80010b4:	2203      	movs	r2, #3
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	693a      	ldr	r2, [r7, #16]
 80010be:	4013      	ands	r3, r2
 80010c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f003 0203 	and.w	r2, r3, #3
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	005b      	lsls	r3, r3, #1
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f000 809a 	beq.w	8001220 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ec:	4b55      	ldr	r3, [pc, #340]	; (8001244 <HAL_GPIO_Init+0x2cc>)
 80010ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010f0:	4a54      	ldr	r2, [pc, #336]	; (8001244 <HAL_GPIO_Init+0x2cc>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	6613      	str	r3, [r2, #96]	; 0x60
 80010f8:	4b52      	ldr	r3, [pc, #328]	; (8001244 <HAL_GPIO_Init+0x2cc>)
 80010fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	60bb      	str	r3, [r7, #8]
 8001102:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001104:	4a50      	ldr	r2, [pc, #320]	; (8001248 <HAL_GPIO_Init+0x2d0>)
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	089b      	lsrs	r3, r3, #2
 800110a:	3302      	adds	r3, #2
 800110c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001110:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	f003 0303 	and.w	r3, r3, #3
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	220f      	movs	r2, #15
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800112e:	d013      	beq.n	8001158 <HAL_GPIO_Init+0x1e0>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a46      	ldr	r2, [pc, #280]	; (800124c <HAL_GPIO_Init+0x2d4>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d00d      	beq.n	8001154 <HAL_GPIO_Init+0x1dc>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a45      	ldr	r2, [pc, #276]	; (8001250 <HAL_GPIO_Init+0x2d8>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d007      	beq.n	8001150 <HAL_GPIO_Init+0x1d8>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a44      	ldr	r2, [pc, #272]	; (8001254 <HAL_GPIO_Init+0x2dc>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d101      	bne.n	800114c <HAL_GPIO_Init+0x1d4>
 8001148:	2303      	movs	r3, #3
 800114a:	e006      	b.n	800115a <HAL_GPIO_Init+0x1e2>
 800114c:	2307      	movs	r3, #7
 800114e:	e004      	b.n	800115a <HAL_GPIO_Init+0x1e2>
 8001150:	2302      	movs	r3, #2
 8001152:	e002      	b.n	800115a <HAL_GPIO_Init+0x1e2>
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <HAL_GPIO_Init+0x1e2>
 8001158:	2300      	movs	r3, #0
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	f002 0203 	and.w	r2, r2, #3
 8001160:	0092      	lsls	r2, r2, #2
 8001162:	4093      	lsls	r3, r2
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800116a:	4937      	ldr	r1, [pc, #220]	; (8001248 <HAL_GPIO_Init+0x2d0>)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	089b      	lsrs	r3, r3, #2
 8001170:	3302      	adds	r3, #2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001178:	4b37      	ldr	r3, [pc, #220]	; (8001258 <HAL_GPIO_Init+0x2e0>)
 800117a:	689b      	ldr	r3, [r3, #8]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800119c:	4a2e      	ldr	r2, [pc, #184]	; (8001258 <HAL_GPIO_Init+0x2e0>)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011a2:	4b2d      	ldr	r3, [pc, #180]	; (8001258 <HAL_GPIO_Init+0x2e0>)
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011c6:	4a24      	ldr	r2, [pc, #144]	; (8001258 <HAL_GPIO_Init+0x2e0>)
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011cc:	4b22      	ldr	r3, [pc, #136]	; (8001258 <HAL_GPIO_Init+0x2e0>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	43db      	mvns	r3, r3
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	4013      	ands	r3, r2
 80011da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d003      	beq.n	80011f0 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80011e8:	693a      	ldr	r2, [r7, #16]
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011f0:	4a19      	ldr	r2, [pc, #100]	; (8001258 <HAL_GPIO_Init+0x2e0>)
 80011f2:	693b      	ldr	r3, [r7, #16]
 80011f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80011f6:	4b18      	ldr	r3, [pc, #96]	; (8001258 <HAL_GPIO_Init+0x2e0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	43db      	mvns	r3, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4013      	ands	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	685b      	ldr	r3, [r3, #4]
 800120a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001212:	693a      	ldr	r2, [r7, #16]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4313      	orrs	r3, r2
 8001218:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800121a:	4a0f      	ldr	r2, [pc, #60]	; (8001258 <HAL_GPIO_Init+0x2e0>)
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001220:	697b      	ldr	r3, [r7, #20]
 8001222:	3301      	adds	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681a      	ldr	r2, [r3, #0]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	fa22 f303 	lsr.w	r3, r2, r3
 8001230:	2b00      	cmp	r3, #0
 8001232:	f47f aea9 	bne.w	8000f88 <HAL_GPIO_Init+0x10>
  }
}
 8001236:	bf00      	nop
 8001238:	bf00      	nop
 800123a:	371c      	adds	r7, #28
 800123c:	46bd      	mov	sp, r7
 800123e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001242:	4770      	bx	lr
 8001244:	40021000 	.word	0x40021000
 8001248:	40010000 	.word	0x40010000
 800124c:	48000400 	.word	0x48000400
 8001250:	48000800 	.word	0x48000800
 8001254:	48000c00 	.word	0x48000c00
 8001258:	40010400 	.word	0x40010400

0800125c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800125c:	b480      	push	{r7}
 800125e:	b085      	sub	sp, #20
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
 8001264:	460b      	mov	r3, r1
 8001266:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691a      	ldr	r2, [r3, #16]
 800126c:	887b      	ldrh	r3, [r7, #2]
 800126e:	4013      	ands	r3, r2
 8001270:	2b00      	cmp	r3, #0
 8001272:	d002      	beq.n	800127a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001274:	2301      	movs	r3, #1
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	e001      	b.n	800127e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800127a:	2300      	movs	r3, #0
 800127c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800127e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001280:	4618      	mov	r0, r3
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001298:	695a      	ldr	r2, [r3, #20]
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	4013      	ands	r3, r2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d006      	beq.n	80012b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012a2:	4a05      	ldr	r2, [pc, #20]	; (80012b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012a4:	88fb      	ldrh	r3, [r7, #6]
 80012a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012a8:	88fb      	ldrh	r3, [r7, #6]
 80012aa:	4618      	mov	r0, r3
 80012ac:	f7ff fa8c 	bl	80007c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80012b0:	bf00      	nop
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	40010400 	.word	0x40010400

080012bc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012c0:	4b04      	ldr	r3, [pc, #16]	; (80012d4 <HAL_PWREx_GetVoltageRange+0x18>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80012c8:	4618      	mov	r0, r3
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40007000 	.word	0x40007000

080012d8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012d8:	b480      	push	{r7}
 80012da:	b085      	sub	sp, #20
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012e6:	d130      	bne.n	800134a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012e8:	4b23      	ldr	r3, [pc, #140]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012f4:	d038      	beq.n	8001368 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012fe:	4a1e      	ldr	r2, [pc, #120]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001300:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001304:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001306:	4b1d      	ldr	r3, [pc, #116]	; (800137c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2232      	movs	r2, #50	; 0x32
 800130c:	fb02 f303 	mul.w	r3, r2, r3
 8001310:	4a1b      	ldr	r2, [pc, #108]	; (8001380 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001312:	fba2 2303 	umull	r2, r3, r2, r3
 8001316:	0c9b      	lsrs	r3, r3, #18
 8001318:	3301      	adds	r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800131c:	e002      	b.n	8001324 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	3b01      	subs	r3, #1
 8001322:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001324:	4b14      	ldr	r3, [pc, #80]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001326:	695b      	ldr	r3, [r3, #20]
 8001328:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800132c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001330:	d102      	bne.n	8001338 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d1f2      	bne.n	800131e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001338:	4b0f      	ldr	r3, [pc, #60]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800133a:	695b      	ldr	r3, [r3, #20]
 800133c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001340:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001344:	d110      	bne.n	8001368 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001346:	2303      	movs	r3, #3
 8001348:	e00f      	b.n	800136a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800134a:	4b0b      	ldr	r3, [pc, #44]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001356:	d007      	beq.n	8001368 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001358:	4b07      	ldr	r3, [pc, #28]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001360:	4a05      	ldr	r2, [pc, #20]	; (8001378 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001362:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001366:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
 8001376:	bf00      	nop
 8001378:	40007000 	.word	0x40007000
 800137c:	20000040 	.word	0x20000040
 8001380:	431bde83 	.word	0x431bde83

08001384 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b08a      	sub	sp, #40	; 0x28
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d102      	bne.n	8001398 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	f000 bc56 	b.w	8001c44 <HAL_RCC_OscConfig+0x8c0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001398:	4ba1      	ldr	r3, [pc, #644]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	f003 030c 	and.w	r3, r3, #12
 80013a0:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013a2:	4b9f      	ldr	r3, [pc, #636]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0310 	and.w	r3, r3, #16
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	f000 80e6 	beq.w	8001586 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013ba:	6a3b      	ldr	r3, [r7, #32]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d007      	beq.n	80013d0 <HAL_RCC_OscConfig+0x4c>
 80013c0:	6a3b      	ldr	r3, [r7, #32]
 80013c2:	2b0c      	cmp	r3, #12
 80013c4:	f040 808d 	bne.w	80014e2 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	f040 8089 	bne.w	80014e2 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013d0:	4b93      	ldr	r3, [pc, #588]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f003 0302 	and.w	r3, r3, #2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d006      	beq.n	80013ea <HAL_RCC_OscConfig+0x66>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d102      	bne.n	80013ea <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80013e4:	2301      	movs	r3, #1
 80013e6:	f000 bc2d 	b.w	8001c44 <HAL_RCC_OscConfig+0x8c0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013ee:	4b8c      	ldr	r3, [pc, #560]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f003 0308 	and.w	r3, r3, #8
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d004      	beq.n	8001404 <HAL_RCC_OscConfig+0x80>
 80013fa:	4b89      	ldr	r3, [pc, #548]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001402:	e005      	b.n	8001410 <HAL_RCC_OscConfig+0x8c>
 8001404:	4b86      	ldr	r3, [pc, #536]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 8001406:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800140a:	091b      	lsrs	r3, r3, #4
 800140c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001410:	4293      	cmp	r3, r2
 8001412:	d224      	bcs.n	800145e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001418:	4618      	mov	r0, r3
 800141a:	f000 fdf1 	bl	8002000 <RCC_SetFlashLatencyFromMSIRange>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d002      	beq.n	800142a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	f000 bc0d 	b.w	8001c44 <HAL_RCC_OscConfig+0x8c0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800142a:	4b7d      	ldr	r3, [pc, #500]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a7c      	ldr	r2, [pc, #496]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 8001430:	f043 0308 	orr.w	r3, r3, #8
 8001434:	6013      	str	r3, [r2, #0]
 8001436:	4b7a      	ldr	r3, [pc, #488]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001442:	4977      	ldr	r1, [pc, #476]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 8001444:	4313      	orrs	r3, r2
 8001446:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001448:	4b75      	ldr	r3, [pc, #468]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a1b      	ldr	r3, [r3, #32]
 8001454:	021b      	lsls	r3, r3, #8
 8001456:	4972      	ldr	r1, [pc, #456]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 8001458:	4313      	orrs	r3, r2
 800145a:	604b      	str	r3, [r1, #4]
 800145c:	e025      	b.n	80014aa <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800145e:	4b70      	ldr	r3, [pc, #448]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a6f      	ldr	r2, [pc, #444]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 8001464:	f043 0308 	orr.w	r3, r3, #8
 8001468:	6013      	str	r3, [r2, #0]
 800146a:	4b6d      	ldr	r3, [pc, #436]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001476:	496a      	ldr	r1, [pc, #424]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 8001478:	4313      	orrs	r3, r2
 800147a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800147c:	4b68      	ldr	r3, [pc, #416]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	6a1b      	ldr	r3, [r3, #32]
 8001488:	021b      	lsls	r3, r3, #8
 800148a:	4965      	ldr	r1, [pc, #404]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 800148c:	4313      	orrs	r3, r2
 800148e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d109      	bne.n	80014aa <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149a:	4618      	mov	r0, r3
 800149c:	f000 fdb0 	bl	8002000 <RCC_SetFlashLatencyFromMSIRange>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e3cc      	b.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014aa:	f000 fcb3 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 80014ae:	4602      	mov	r2, r0
 80014b0:	4b5b      	ldr	r3, [pc, #364]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	091b      	lsrs	r3, r3, #4
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	495a      	ldr	r1, [pc, #360]	; (8001624 <HAL_RCC_OscConfig+0x2a0>)
 80014bc:	5ccb      	ldrb	r3, [r1, r3]
 80014be:	f003 031f 	and.w	r3, r3, #31
 80014c2:	fa22 f303 	lsr.w	r3, r2, r3
 80014c6:	4a58      	ldr	r2, [pc, #352]	; (8001628 <HAL_RCC_OscConfig+0x2a4>)
 80014c8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014ca:	4b58      	ldr	r3, [pc, #352]	; (800162c <HAL_RCC_OscConfig+0x2a8>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fb34 	bl	8000b3c <HAL_InitTick>
 80014d4:	4603      	mov	r3, r0
 80014d6:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80014d8:	7dfb      	ldrb	r3, [r7, #23]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d052      	beq.n	8001584 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80014de:	7dfb      	ldrb	r3, [r7, #23]
 80014e0:	e3b0      	b.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d032      	beq.n	8001550 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014ea:	4b4d      	ldr	r3, [pc, #308]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a4c      	ldr	r2, [pc, #304]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014f6:	f7ff fc51 	bl	8000d9c <HAL_GetTick>
 80014fa:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014fe:	f7ff fc4d 	bl	8000d9c <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e399      	b.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001510:	4b43      	ldr	r3, [pc, #268]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b00      	cmp	r3, #0
 800151a:	d0f0      	beq.n	80014fe <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800151c:	4b40      	ldr	r3, [pc, #256]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a3f      	ldr	r2, [pc, #252]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 8001522:	f043 0308 	orr.w	r3, r3, #8
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	4b3d      	ldr	r3, [pc, #244]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001534:	493a      	ldr	r1, [pc, #232]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 8001536:	4313      	orrs	r3, r2
 8001538:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800153a:	4b39      	ldr	r3, [pc, #228]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a1b      	ldr	r3, [r3, #32]
 8001546:	021b      	lsls	r3, r3, #8
 8001548:	4935      	ldr	r1, [pc, #212]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 800154a:	4313      	orrs	r3, r2
 800154c:	604b      	str	r3, [r1, #4]
 800154e:	e01a      	b.n	8001586 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001550:	4b33      	ldr	r3, [pc, #204]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	4a32      	ldr	r2, [pc, #200]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 8001556:	f023 0301 	bic.w	r3, r3, #1
 800155a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800155c:	f7ff fc1e 	bl	8000d9c <HAL_GetTick>
 8001560:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001564:	f7ff fc1a 	bl	8000d9c <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	69bb      	ldr	r3, [r7, #24]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b02      	cmp	r3, #2
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e366      	b.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001576:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x1e0>
 8001582:	e000      	b.n	8001586 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001584:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0301 	and.w	r3, r3, #1
 800158e:	2b00      	cmp	r3, #0
 8001590:	d073      	beq.n	800167a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001592:	6a3b      	ldr	r3, [r7, #32]
 8001594:	2b08      	cmp	r3, #8
 8001596:	d005      	beq.n	80015a4 <HAL_RCC_OscConfig+0x220>
 8001598:	6a3b      	ldr	r3, [r7, #32]
 800159a:	2b0c      	cmp	r3, #12
 800159c:	d10e      	bne.n	80015bc <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	2b03      	cmp	r3, #3
 80015a2:	d10b      	bne.n	80015bc <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015a4:	4b1e      	ldr	r3, [pc, #120]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d063      	beq.n	8001678 <HAL_RCC_OscConfig+0x2f4>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d15f      	bne.n	8001678 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e343      	b.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015c4:	d106      	bne.n	80015d4 <HAL_RCC_OscConfig+0x250>
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a15      	ldr	r2, [pc, #84]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 80015cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d0:	6013      	str	r3, [r2, #0]
 80015d2:	e01d      	b.n	8001610 <HAL_RCC_OscConfig+0x28c>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015dc:	d10c      	bne.n	80015f8 <HAL_RCC_OscConfig+0x274>
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a0f      	ldr	r2, [pc, #60]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 80015e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	4b0d      	ldr	r3, [pc, #52]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a0c      	ldr	r2, [pc, #48]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 80015f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015f4:	6013      	str	r3, [r2, #0]
 80015f6:	e00b      	b.n	8001610 <HAL_RCC_OscConfig+0x28c>
 80015f8:	4b09      	ldr	r3, [pc, #36]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a08      	ldr	r2, [pc, #32]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 80015fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	4b06      	ldr	r3, [pc, #24]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a05      	ldr	r2, [pc, #20]	; (8001620 <HAL_RCC_OscConfig+0x29c>)
 800160a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800160e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d01b      	beq.n	8001650 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7ff fbc0 	bl	8000d9c <HAL_GetTick>
 800161c:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800161e:	e010      	b.n	8001642 <HAL_RCC_OscConfig+0x2be>
 8001620:	40021000 	.word	0x40021000
 8001624:	080072ac 	.word	0x080072ac
 8001628:	20000040 	.word	0x20000040
 800162c:	20000044 	.word	0x20000044
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001630:	f7ff fbb4 	bl	8000d9c <HAL_GetTick>
 8001634:	4602      	mov	r2, r0
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	1ad3      	subs	r3, r2, r3
 800163a:	2b64      	cmp	r3, #100	; 0x64
 800163c:	d901      	bls.n	8001642 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800163e:	2303      	movs	r3, #3
 8001640:	e300      	b.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001642:	4ba0      	ldr	r3, [pc, #640]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f0      	beq.n	8001630 <HAL_RCC_OscConfig+0x2ac>
 800164e:	e014      	b.n	800167a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001650:	f7ff fba4 	bl	8000d9c <HAL_GetTick>
 8001654:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001658:	f7ff fba0 	bl	8000d9c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b64      	cmp	r3, #100	; 0x64
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e2ec      	b.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800166a:	4b96      	ldr	r3, [pc, #600]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0x2d4>
 8001676:	e000      	b.n	800167a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001678:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0302 	and.w	r3, r3, #2
 8001682:	2b00      	cmp	r3, #0
 8001684:	d060      	beq.n	8001748 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001686:	6a3b      	ldr	r3, [r7, #32]
 8001688:	2b04      	cmp	r3, #4
 800168a:	d005      	beq.n	8001698 <HAL_RCC_OscConfig+0x314>
 800168c:	6a3b      	ldr	r3, [r7, #32]
 800168e:	2b0c      	cmp	r3, #12
 8001690:	d119      	bne.n	80016c6 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001692:	69fb      	ldr	r3, [r7, #28]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d116      	bne.n	80016c6 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001698:	4b8a      	ldr	r3, [pc, #552]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d005      	beq.n	80016b0 <HAL_RCC_OscConfig+0x32c>
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d101      	bne.n	80016b0 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e2c9      	b.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b0:	4b84      	ldr	r3, [pc, #528]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	691b      	ldr	r3, [r3, #16]
 80016bc:	061b      	lsls	r3, r3, #24
 80016be:	4981      	ldr	r1, [pc, #516]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016c4:	e040      	b.n	8001748 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d023      	beq.n	8001716 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016ce:	4b7d      	ldr	r3, [pc, #500]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a7c      	ldr	r2, [pc, #496]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 80016d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016da:	f7ff fb5f 	bl	8000d9c <HAL_GetTick>
 80016de:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016e2:	f7ff fb5b 	bl	8000d9c <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e2a7      	b.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016f4:	4b73      	ldr	r3, [pc, #460]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001700:	4b70      	ldr	r3, [pc, #448]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	691b      	ldr	r3, [r3, #16]
 800170c:	061b      	lsls	r3, r3, #24
 800170e:	496d      	ldr	r1, [pc, #436]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 8001710:	4313      	orrs	r3, r2
 8001712:	604b      	str	r3, [r1, #4]
 8001714:	e018      	b.n	8001748 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001716:	4b6b      	ldr	r3, [pc, #428]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4a6a      	ldr	r2, [pc, #424]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 800171c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001720:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001722:	f7ff fb3b 	bl	8000d9c <HAL_GetTick>
 8001726:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001728:	e008      	b.n	800173c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800172a:	f7ff fb37 	bl	8000d9c <HAL_GetTick>
 800172e:	4602      	mov	r2, r0
 8001730:	69bb      	ldr	r3, [r7, #24]
 8001732:	1ad3      	subs	r3, r2, r3
 8001734:	2b02      	cmp	r3, #2
 8001736:	d901      	bls.n	800173c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e283      	b.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800173c:	4b61      	ldr	r3, [pc, #388]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1f0      	bne.n	800172a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 0308 	and.w	r3, r3, #8
 8001750:	2b00      	cmp	r3, #0
 8001752:	d07f      	beq.n	8001854 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	695b      	ldr	r3, [r3, #20]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d05f      	beq.n	800181c <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800175c:	4b59      	ldr	r3, [pc, #356]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 800175e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001762:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	699a      	ldr	r2, [r3, #24]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	f003 0310 	and.w	r3, r3, #16
 800176e:	429a      	cmp	r2, r3
 8001770:	d037      	beq.n	80017e2 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d006      	beq.n	800178a <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e25c      	b.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b00      	cmp	r3, #0
 8001792:	d01b      	beq.n	80017cc <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8001794:	4b4b      	ldr	r3, [pc, #300]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 8001796:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800179a:	4a4a      	ldr	r2, [pc, #296]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 800179c:	f023 0301 	bic.w	r3, r3, #1
 80017a0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017a4:	f7ff fafa 	bl	8000d9c <HAL_GetTick>
 80017a8:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ac:	f7ff faf6 	bl	8000d9c <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b11      	cmp	r3, #17
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e242      	b.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017be:	4b41      	ldr	r3, [pc, #260]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 80017c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017c4:	f003 0302 	and.w	r3, r3, #2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d1ef      	bne.n	80017ac <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80017cc:	4b3d      	ldr	r3, [pc, #244]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 80017ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d2:	f023 0210 	bic.w	r2, r3, #16
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	699b      	ldr	r3, [r3, #24]
 80017da:	493a      	ldr	r1, [pc, #232]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 80017dc:	4313      	orrs	r3, r2
 80017de:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017e2:	4b38      	ldr	r3, [pc, #224]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 80017e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017e8:	4a36      	ldr	r2, [pc, #216]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 80017ea:	f043 0301 	orr.w	r3, r3, #1
 80017ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f2:	f7ff fad3 	bl	8000d9c <HAL_GetTick>
 80017f6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80017f8:	e008      	b.n	800180c <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017fa:	f7ff facf 	bl	8000d9c <HAL_GetTick>
 80017fe:	4602      	mov	r2, r0
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	1ad3      	subs	r3, r2, r3
 8001804:	2b11      	cmp	r3, #17
 8001806:	d901      	bls.n	800180c <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 8001808:	2303      	movs	r3, #3
 800180a:	e21b      	b.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800180c:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 800180e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001812:	f003 0302 	and.w	r3, r3, #2
 8001816:	2b00      	cmp	r3, #0
 8001818:	d0ef      	beq.n	80017fa <HAL_RCC_OscConfig+0x476>
 800181a:	e01b      	b.n	8001854 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800181c:	4b29      	ldr	r3, [pc, #164]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 800181e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001822:	4a28      	ldr	r2, [pc, #160]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 8001824:	f023 0301 	bic.w	r3, r3, #1
 8001828:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182c:	f7ff fab6 	bl	8000d9c <HAL_GetTick>
 8001830:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001834:	f7ff fab2 	bl	8000d9c <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	69bb      	ldr	r3, [r7, #24]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b11      	cmp	r3, #17
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e1fe      	b.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001846:	4b1f      	ldr	r3, [pc, #124]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 8001848:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800184c:	f003 0302 	and.w	r3, r3, #2
 8001850:	2b00      	cmp	r3, #0
 8001852:	d1ef      	bne.n	8001834 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 0304 	and.w	r3, r3, #4
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 80c1 	beq.w	80019e4 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001862:	2300      	movs	r3, #0
 8001864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001868:	4b16      	ldr	r3, [pc, #88]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 800186a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800186c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001870:	2b00      	cmp	r3, #0
 8001872:	d10e      	bne.n	8001892 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001874:	4b13      	ldr	r3, [pc, #76]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 8001876:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001878:	4a12      	ldr	r2, [pc, #72]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 800187a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800187e:	6593      	str	r3, [r2, #88]	; 0x58
 8001880:	4b10      	ldr	r3, [pc, #64]	; (80018c4 <HAL_RCC_OscConfig+0x540>)
 8001882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001884:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001888:	60fb      	str	r3, [r7, #12]
 800188a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800188c:	2301      	movs	r3, #1
 800188e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001892:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <HAL_RCC_OscConfig+0x544>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800189a:	2b00      	cmp	r3, #0
 800189c:	d11c      	bne.n	80018d8 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800189e:	4b0a      	ldr	r3, [pc, #40]	; (80018c8 <HAL_RCC_OscConfig+0x544>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a09      	ldr	r2, [pc, #36]	; (80018c8 <HAL_RCC_OscConfig+0x544>)
 80018a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018aa:	f7ff fa77 	bl	8000d9c <HAL_GetTick>
 80018ae:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018b0:	e00c      	b.n	80018cc <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b2:	f7ff fa73 	bl	8000d9c <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b02      	cmp	r3, #2
 80018be:	d905      	bls.n	80018cc <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e1bf      	b.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
 80018c4:	40021000 	.word	0x40021000
 80018c8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80018cc:	4bb1      	ldr	r3, [pc, #708]	; (8001b94 <HAL_RCC_OscConfig+0x810>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d0ec      	beq.n	80018b2 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	689b      	ldr	r3, [r3, #8]
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d02c      	beq.n	800193e <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80018e4:	4bac      	ldr	r3, [pc, #688]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 80018e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018f6:	49a8      	ldr	r1, [pc, #672]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 0304 	and.w	r3, r3, #4
 8001906:	2b00      	cmp	r3, #0
 8001908:	d010      	beq.n	800192c <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800190a:	4ba3      	ldr	r3, [pc, #652]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 800190c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001910:	4aa1      	ldr	r2, [pc, #644]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 8001912:	f043 0304 	orr.w	r3, r3, #4
 8001916:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800191a:	4b9f      	ldr	r3, [pc, #636]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 800191c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001920:	4a9d      	ldr	r2, [pc, #628]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800192a:	e018      	b.n	800195e <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800192c:	4b9a      	ldr	r3, [pc, #616]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 800192e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001932:	4a99      	ldr	r2, [pc, #612]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800193c:	e00f      	b.n	800195e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800193e:	4b96      	ldr	r3, [pc, #600]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 8001940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001944:	4a94      	ldr	r2, [pc, #592]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 8001946:	f023 0301 	bic.w	r3, r3, #1
 800194a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800194e:	4b92      	ldr	r3, [pc, #584]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 8001950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001954:	4a90      	ldr	r2, [pc, #576]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 8001956:	f023 0304 	bic.w	r3, r3, #4
 800195a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	689b      	ldr	r3, [r3, #8]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d016      	beq.n	8001994 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001966:	f7ff fa19 	bl	8000d9c <HAL_GetTick>
 800196a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800196c:	e00a      	b.n	8001984 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800196e:	f7ff fa15 	bl	8000d9c <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	f241 3288 	movw	r2, #5000	; 0x1388
 800197c:	4293      	cmp	r3, r2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e15f      	b.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001984:	4b84      	ldr	r3, [pc, #528]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 8001986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0ed      	beq.n	800196e <HAL_RCC_OscConfig+0x5ea>
 8001992:	e01d      	b.n	80019d0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001994:	f7ff fa02 	bl	8000d9c <HAL_GetTick>
 8001998:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800199a:	e00a      	b.n	80019b2 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199c:	f7ff f9fe 	bl	8000d9c <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e148      	b.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80019b2:	4b79      	ldr	r3, [pc, #484]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 80019b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1ed      	bne.n	800199c <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 80019c0:	4b75      	ldr	r3, [pc, #468]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 80019c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c6:	4a74      	ldr	r2, [pc, #464]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 80019c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d105      	bne.n	80019e4 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d8:	4b6f      	ldr	r3, [pc, #444]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 80019da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019dc:	4a6e      	ldr	r2, [pc, #440]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 80019de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80019e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f003 0320 	and.w	r3, r3, #32
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d03c      	beq.n	8001a6a <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d01c      	beq.n	8001a32 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019f8:	4b67      	ldr	r3, [pc, #412]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 80019fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019fe:	4a66      	ldr	r2, [pc, #408]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 8001a00:	f043 0301 	orr.w	r3, r3, #1
 8001a04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a08:	f7ff f9c8 	bl	8000d9c <HAL_GetTick>
 8001a0c:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a10:	f7ff f9c4 	bl	8000d9c <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e110      	b.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001a22:	4b5d      	ldr	r3, [pc, #372]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 8001a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d0ef      	beq.n	8001a10 <HAL_RCC_OscConfig+0x68c>
 8001a30:	e01b      	b.n	8001a6a <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a32:	4b59      	ldr	r3, [pc, #356]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 8001a34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a38:	4a57      	ldr	r2, [pc, #348]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 8001a3a:	f023 0301 	bic.w	r3, r3, #1
 8001a3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a42:	f7ff f9ab 	bl	8000d9c <HAL_GetTick>
 8001a46:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a48:	e008      	b.n	8001a5c <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a4a:	f7ff f9a7 	bl	8000d9c <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	2b02      	cmp	r3, #2
 8001a56:	d901      	bls.n	8001a5c <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	e0f3      	b.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001a5c:	4b4e      	ldr	r3, [pc, #312]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 8001a5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001a62:	f003 0302 	and.w	r3, r3, #2
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d1ef      	bne.n	8001a4a <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f000 80e7 	beq.w	8001c42 <HAL_RCC_OscConfig+0x8be>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	f040 80b7 	bne.w	8001bec <HAL_RCC_OscConfig+0x868>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a7e:	4b46      	ldr	r3, [pc, #280]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 8001a80:	68db      	ldr	r3, [r3, #12]
 8001a82:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	f003 0203 	and.w	r2, r3, #3
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d124      	bne.n	8001adc <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d11b      	bne.n	8001adc <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aa4:	69fb      	ldr	r3, [r7, #28]
 8001aa6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d113      	bne.n	8001adc <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001abe:	085b      	lsrs	r3, r3, #1
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d109      	bne.n	8001adc <HAL_RCC_OscConfig+0x758>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad2:	085b      	lsrs	r3, r3, #1
 8001ad4:	3b01      	subs	r3, #1
 8001ad6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d061      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x81c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001adc:	6a3b      	ldr	r3, [r7, #32]
 8001ade:	2b0c      	cmp	r3, #12
 8001ae0:	d056      	beq.n	8001b90 <HAL_RCC_OscConfig+0x80c>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ae2:	4b2d      	ldr	r3, [pc, #180]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a2c      	ldr	r2, [pc, #176]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 8001ae8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001aec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001aee:	f7ff f955 	bl	8000d9c <HAL_GetTick>
 8001af2:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001af4:	e008      	b.n	8001b08 <HAL_RCC_OscConfig+0x784>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af6:	f7ff f951 	bl	8000d9c <HAL_GetTick>
 8001afa:	4602      	mov	r2, r0
 8001afc:	69bb      	ldr	r3, [r7, #24]
 8001afe:	1ad3      	subs	r3, r2, r3
 8001b00:	2b02      	cmp	r3, #2
 8001b02:	d901      	bls.n	8001b08 <HAL_RCC_OscConfig+0x784>
              {
                return HAL_TIMEOUT;
 8001b04:	2303      	movs	r3, #3
 8001b06:	e09d      	b.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b08:	4b23      	ldr	r3, [pc, #140]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f0      	bne.n	8001af6 <HAL_RCC_OscConfig+0x772>
                                 RCC_OscInitStruct->PLL.PLLN,
                                 RCC_OscInitStruct->PLL.PLLP,
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#else
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b14:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 8001b16:	68da      	ldr	r2, [r3, #12]
 8001b18:	4b20      	ldr	r3, [pc, #128]	; (8001b9c <HAL_RCC_OscConfig+0x818>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001b20:	687a      	ldr	r2, [r7, #4]
 8001b22:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b24:	3a01      	subs	r2, #1
 8001b26:	0112      	lsls	r2, r2, #4
 8001b28:	4311      	orrs	r1, r2
 8001b2a:	687a      	ldr	r2, [r7, #4]
 8001b2c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b2e:	0212      	lsls	r2, r2, #8
 8001b30:	4311      	orrs	r1, r2
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b36:	0852      	lsrs	r2, r2, #1
 8001b38:	3a01      	subs	r2, #1
 8001b3a:	0552      	lsls	r2, r2, #21
 8001b3c:	4311      	orrs	r1, r2
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b42:	0852      	lsrs	r2, r2, #1
 8001b44:	3a01      	subs	r2, #1
 8001b46:	0652      	lsls	r2, r2, #25
 8001b48:	430a      	orrs	r2, r1
 8001b4a:	4913      	ldr	r1, [pc, #76]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b50:	4b11      	ldr	r3, [pc, #68]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a10      	ldr	r2, [pc, #64]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 8001b56:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b5a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b5c:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	4a0d      	ldr	r2, [pc, #52]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 8001b62:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b66:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b68:	f7ff f918 	bl	8000d9c <HAL_GetTick>
 8001b6c:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b6e:	e008      	b.n	8001b82 <HAL_RCC_OscConfig+0x7fe>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b70:	f7ff f914 	bl	8000d9c <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	2b02      	cmp	r3, #2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_OscConfig+0x7fe>
              {
                return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e060      	b.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b82:	4b05      	ldr	r3, [pc, #20]	; (8001b98 <HAL_RCC_OscConfig+0x814>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d0f0      	beq.n	8001b70 <HAL_RCC_OscConfig+0x7ec>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b8e:	e058      	b.n	8001c42 <HAL_RCC_OscConfig+0x8be>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e057      	b.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
 8001b94:	40007000 	.word	0x40007000
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	f99f808c 	.word	0xf99f808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ba0:	4b2a      	ldr	r3, [pc, #168]	; (8001c4c <HAL_RCC_OscConfig+0x8c8>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d14a      	bne.n	8001c42 <HAL_RCC_OscConfig+0x8be>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001bac:	4b27      	ldr	r3, [pc, #156]	; (8001c4c <HAL_RCC_OscConfig+0x8c8>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a26      	ldr	r2, [pc, #152]	; (8001c4c <HAL_RCC_OscConfig+0x8c8>)
 8001bb2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bb6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bb8:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_RCC_OscConfig+0x8c8>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	4a23      	ldr	r2, [pc, #140]	; (8001c4c <HAL_RCC_OscConfig+0x8c8>)
 8001bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bc2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bc4:	f7ff f8ea 	bl	8000d9c <HAL_GetTick>
 8001bc8:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x85a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bcc:	f7ff f8e6 	bl	8000d9c <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x85a>
            {
              return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e032      	b.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bde:	4b1b      	ldr	r3, [pc, #108]	; (8001c4c <HAL_RCC_OscConfig+0x8c8>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d0f0      	beq.n	8001bcc <HAL_RCC_OscConfig+0x848>
 8001bea:	e02a      	b.n	8001c42 <HAL_RCC_OscConfig+0x8be>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bec:	6a3b      	ldr	r3, [r7, #32]
 8001bee:	2b0c      	cmp	r3, #12
 8001bf0:	d025      	beq.n	8001c3e <HAL_RCC_OscConfig+0x8ba>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bf2:	4b16      	ldr	r3, [pc, #88]	; (8001c4c <HAL_RCC_OscConfig+0x8c8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a15      	ldr	r2, [pc, #84]	; (8001c4c <HAL_RCC_OscConfig+0x8c8>)
 8001bf8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bfc:	6013      	str	r3, [r2, #0]
        if(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
        }
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001bfe:	4b13      	ldr	r3, [pc, #76]	; (8001c4c <HAL_RCC_OscConfig+0x8c8>)
 8001c00:	68db      	ldr	r3, [r3, #12]
 8001c02:	4a12      	ldr	r2, [pc, #72]	; (8001c4c <HAL_RCC_OscConfig+0x8c8>)
 8001c04:	f023 0303 	bic.w	r3, r3, #3
 8001c08:	60d3      	str	r3, [r2, #12]
#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
 8001c0a:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <HAL_RCC_OscConfig+0x8c8>)
 8001c0c:	68db      	ldr	r3, [r3, #12]
 8001c0e:	4a0f      	ldr	r2, [pc, #60]	; (8001c4c <HAL_RCC_OscConfig+0x8c8>)
 8001c10:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c14:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c16:	f7ff f8c1 	bl	8000d9c <HAL_GetTick>
 8001c1a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x8ac>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1e:	f7ff f8bd 	bl	8000d9c <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e009      	b.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c30:	4b06      	ldr	r3, [pc, #24]	; (8001c4c <HAL_RCC_OscConfig+0x8c8>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d1f0      	bne.n	8001c1e <HAL_RCC_OscConfig+0x89a>
 8001c3c:	e001      	b.n	8001c42 <HAL_RCC_OscConfig+0x8be>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <HAL_RCC_OscConfig+0x8c0>
      }
    }
  }
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3728      	adds	r7, #40	; 0x28
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	40021000 	.word	0x40021000

08001c50 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e0c8      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c64:	4b66      	ldr	r3, [pc, #408]	; (8001e00 <HAL_RCC_ClockConfig+0x1b0>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0307 	and.w	r3, r3, #7
 8001c6c:	683a      	ldr	r2, [r7, #0]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d910      	bls.n	8001c94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c72:	4b63      	ldr	r3, [pc, #396]	; (8001e00 <HAL_RCC_ClockConfig+0x1b0>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f023 0207 	bic.w	r2, r3, #7
 8001c7a:	4961      	ldr	r1, [pc, #388]	; (8001e00 <HAL_RCC_ClockConfig+0x1b0>)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c82:	4b5f      	ldr	r3, [pc, #380]	; (8001e00 <HAL_RCC_ClockConfig+0x1b0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f003 0307 	and.w	r3, r3, #7
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d001      	beq.n	8001c94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e0b0      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 0301 	and.w	r3, r3, #1
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d04c      	beq.n	8001d3a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	2b03      	cmp	r3, #3
 8001ca6:	d107      	bne.n	8001cb8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca8:	4b56      	ldr	r3, [pc, #344]	; (8001e04 <HAL_RCC_ClockConfig+0x1b4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d121      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e09e      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d107      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cc0:	4b50      	ldr	r3, [pc, #320]	; (8001e04 <HAL_RCC_ClockConfig+0x1b4>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d115      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e092      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d107      	bne.n	8001ce8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cd8:	4b4a      	ldr	r3, [pc, #296]	; (8001e04 <HAL_RCC_ClockConfig+0x1b4>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d109      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	e086      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ce8:	4b46      	ldr	r3, [pc, #280]	; (8001e04 <HAL_RCC_ClockConfig+0x1b4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e07e      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cf8:	4b42      	ldr	r3, [pc, #264]	; (8001e04 <HAL_RCC_ClockConfig+0x1b4>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f023 0203 	bic.w	r2, r3, #3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	493f      	ldr	r1, [pc, #252]	; (8001e04 <HAL_RCC_ClockConfig+0x1b4>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d0a:	f7ff f847 	bl	8000d9c <HAL_GetTick>
 8001d0e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d10:	e00a      	b.n	8001d28 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d12:	f7ff f843 	bl	8000d9c <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e066      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d28:	4b36      	ldr	r3, [pc, #216]	; (8001e04 <HAL_RCC_ClockConfig+0x1b4>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 020c 	and.w	r2, r3, #12
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d1eb      	bne.n	8001d12 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d008      	beq.n	8001d58 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d46:	4b2f      	ldr	r3, [pc, #188]	; (8001e04 <HAL_RCC_ClockConfig+0x1b4>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	689b      	ldr	r3, [r3, #8]
 8001d52:	492c      	ldr	r1, [pc, #176]	; (8001e04 <HAL_RCC_ClockConfig+0x1b4>)
 8001d54:	4313      	orrs	r3, r2
 8001d56:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d58:	4b29      	ldr	r3, [pc, #164]	; (8001e00 <HAL_RCC_ClockConfig+0x1b0>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0307 	and.w	r3, r3, #7
 8001d60:	683a      	ldr	r2, [r7, #0]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d210      	bcs.n	8001d88 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d66:	4b26      	ldr	r3, [pc, #152]	; (8001e00 <HAL_RCC_ClockConfig+0x1b0>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f023 0207 	bic.w	r2, r3, #7
 8001d6e:	4924      	ldr	r1, [pc, #144]	; (8001e00 <HAL_RCC_ClockConfig+0x1b0>)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d76:	4b22      	ldr	r3, [pc, #136]	; (8001e00 <HAL_RCC_ClockConfig+0x1b0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d001      	beq.n	8001d88 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e036      	b.n	8001df6 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d008      	beq.n	8001da6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d94:	4b1b      	ldr	r3, [pc, #108]	; (8001e04 <HAL_RCC_ClockConfig+0x1b4>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	4918      	ldr	r1, [pc, #96]	; (8001e04 <HAL_RCC_ClockConfig+0x1b4>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d009      	beq.n	8001dc6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001db2:	4b14      	ldr	r3, [pc, #80]	; (8001e04 <HAL_RCC_ClockConfig+0x1b4>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	691b      	ldr	r3, [r3, #16]
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	4910      	ldr	r1, [pc, #64]	; (8001e04 <HAL_RCC_ClockConfig+0x1b4>)
 8001dc2:	4313      	orrs	r3, r2
 8001dc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001dc6:	f000 f825 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	4b0d      	ldr	r3, [pc, #52]	; (8001e04 <HAL_RCC_ClockConfig+0x1b4>)
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	091b      	lsrs	r3, r3, #4
 8001dd2:	f003 030f 	and.w	r3, r3, #15
 8001dd6:	490c      	ldr	r1, [pc, #48]	; (8001e08 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd8:	5ccb      	ldrb	r3, [r1, r3]
 8001dda:	f003 031f 	and.w	r3, r3, #31
 8001dde:	fa22 f303 	lsr.w	r3, r2, r3
 8001de2:	4a0a      	ldr	r2, [pc, #40]	; (8001e0c <HAL_RCC_ClockConfig+0x1bc>)
 8001de4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <HAL_RCC_ClockConfig+0x1c0>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	f7fe fea6 	bl	8000b3c <HAL_InitTick>
 8001df0:	4603      	mov	r3, r0
 8001df2:	72fb      	strb	r3, [r7, #11]

  return status;
 8001df4:	7afb      	ldrb	r3, [r7, #11]
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3710      	adds	r7, #16
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40022000 	.word	0x40022000
 8001e04:	40021000 	.word	0x40021000
 8001e08:	080072ac 	.word	0x080072ac
 8001e0c:	20000040 	.word	0x20000040
 8001e10:	20000044 	.word	0x20000044

08001e14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b089      	sub	sp, #36	; 0x24
 8001e18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	61fb      	str	r3, [r7, #28]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e22:	4b3e      	ldr	r3, [pc, #248]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	f003 030c 	and.w	r3, r3, #12
 8001e2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e2c:	4b3b      	ldr	r3, [pc, #236]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	f003 0303 	and.w	r3, r3, #3
 8001e34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_GetSysClockFreq+0x34>
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	2b0c      	cmp	r3, #12
 8001e40:	d121      	bne.n	8001e86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d11e      	bne.n	8001e86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e48:	4b34      	ldr	r3, [pc, #208]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d107      	bne.n	8001e64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e54:	4b31      	ldr	r3, [pc, #196]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e5a:	0a1b      	lsrs	r3, r3, #8
 8001e5c:	f003 030f 	and.w	r3, r3, #15
 8001e60:	61fb      	str	r3, [r7, #28]
 8001e62:	e005      	b.n	8001e70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e64:	4b2d      	ldr	r3, [pc, #180]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	091b      	lsrs	r3, r3, #4
 8001e6a:	f003 030f 	and.w	r3, r3, #15
 8001e6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e70:	4a2b      	ldr	r2, [pc, #172]	; (8001f20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d10d      	bne.n	8001e9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e84:	e00a      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	2b04      	cmp	r3, #4
 8001e8a:	d102      	bne.n	8001e92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e8c:	4b25      	ldr	r3, [pc, #148]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e8e:	61bb      	str	r3, [r7, #24]
 8001e90:	e004      	b.n	8001e9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	2b08      	cmp	r3, #8
 8001e96:	d101      	bne.n	8001e9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001e98:	4b23      	ldr	r3, [pc, #140]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	2b0c      	cmp	r3, #12
 8001ea0:	d134      	bne.n	8001f0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ea2:	4b1e      	ldr	r3, [pc, #120]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ea4:	68db      	ldr	r3, [r3, #12]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d003      	beq.n	8001eba <HAL_RCC_GetSysClockFreq+0xa6>
 8001eb2:	68bb      	ldr	r3, [r7, #8]
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d003      	beq.n	8001ec0 <HAL_RCC_GetSysClockFreq+0xac>
 8001eb8:	e005      	b.n	8001ec6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001eba:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ebc:	617b      	str	r3, [r7, #20]
      break;
 8001ebe:	e005      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ec0:	4b19      	ldr	r3, [pc, #100]	; (8001f28 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ec2:	617b      	str	r3, [r7, #20]
      break;
 8001ec4:	e002      	b.n	8001ecc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	617b      	str	r3, [r7, #20]
      break;
 8001eca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ecc:	4b13      	ldr	r3, [pc, #76]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	3301      	adds	r3, #1
 8001ed8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001eda:	4b10      	ldr	r3, [pc, #64]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	0a1b      	lsrs	r3, r3, #8
 8001ee0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ee4:	697a      	ldr	r2, [r7, #20]
 8001ee6:	fb02 f203 	mul.w	r2, r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ef0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef4:	68db      	ldr	r3, [r3, #12]
 8001ef6:	0e5b      	lsrs	r3, r3, #25
 8001ef8:	f003 0303 	and.w	r3, r3, #3
 8001efc:	3301      	adds	r3, #1
 8001efe:	005b      	lsls	r3, r3, #1
 8001f00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f0c:	69bb      	ldr	r3, [r7, #24]
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3724      	adds	r7, #36	; 0x24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	080072c4 	.word	0x080072c4
 8001f24:	00f42400 	.word	0x00f42400
 8001f28:	007a1200 	.word	0x007a1200

08001f2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f30:	4b03      	ldr	r3, [pc, #12]	; (8001f40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f32:	681b      	ldr	r3, [r3, #0]
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	20000040 	.word	0x20000040

08001f44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f48:	f7ff fff0 	bl	8001f2c <HAL_RCC_GetHCLKFreq>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	0a1b      	lsrs	r3, r3, #8
 8001f54:	f003 0307 	and.w	r3, r3, #7
 8001f58:	4904      	ldr	r1, [pc, #16]	; (8001f6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001f5a:	5ccb      	ldrb	r3, [r1, r3]
 8001f5c:	f003 031f 	and.w	r3, r3, #31
 8001f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	080072bc 	.word	0x080072bc

08001f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001f74:	f7ff ffda 	bl	8001f2c <HAL_RCC_GetHCLKFreq>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	0adb      	lsrs	r3, r3, #11
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	4904      	ldr	r1, [pc, #16]	; (8001f98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	f003 031f 	and.w	r3, r3, #31
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40021000 	.word	0x40021000
 8001f98:	080072bc 	.word	0x080072bc

08001f9c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001f9c:	b480      	push	{r7}
 8001f9e:	b083      	sub	sp, #12
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	220f      	movs	r2, #15
 8001faa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001fac:	4b12      	ldr	r3, [pc, #72]	; (8001ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 0203 	and.w	r2, r3, #3
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001fb8:	4b0f      	ldr	r3, [pc, #60]	; (8001ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8001fba:	689b      	ldr	r3, [r3, #8]
 8001fbc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <HAL_RCC_GetClockConfig+0x5c>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	08db      	lsrs	r3, r3, #3
 8001fd6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <HAL_RCC_GetClockConfig+0x60>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0207 	and.w	r2, r3, #7
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	601a      	str	r2, [r3, #0]
}
 8001fea:	bf00      	nop
 8001fec:	370c      	adds	r7, #12
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	40021000 	.word	0x40021000
 8001ffc:	40022000 	.word	0x40022000

08002000 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b086      	sub	sp, #24
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002008:	2300      	movs	r3, #0
 800200a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800200c:	4b2a      	ldr	r3, [pc, #168]	; (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800200e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002010:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002014:	2b00      	cmp	r3, #0
 8002016:	d003      	beq.n	8002020 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002018:	f7ff f950 	bl	80012bc <HAL_PWREx_GetVoltageRange>
 800201c:	6178      	str	r0, [r7, #20]
 800201e:	e014      	b.n	800204a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002020:	4b25      	ldr	r3, [pc, #148]	; (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002024:	4a24      	ldr	r2, [pc, #144]	; (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002026:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202a:	6593      	str	r3, [r2, #88]	; 0x58
 800202c:	4b22      	ldr	r3, [pc, #136]	; (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800202e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002034:	60fb      	str	r3, [r7, #12]
 8002036:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002038:	f7ff f940 	bl	80012bc <HAL_PWREx_GetVoltageRange>
 800203c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800203e:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002042:	4a1d      	ldr	r2, [pc, #116]	; (80020b8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002048:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002050:	d10b      	bne.n	800206a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2b80      	cmp	r3, #128	; 0x80
 8002056:	d919      	bls.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2ba0      	cmp	r3, #160	; 0xa0
 800205c:	d902      	bls.n	8002064 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800205e:	2302      	movs	r3, #2
 8002060:	613b      	str	r3, [r7, #16]
 8002062:	e013      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002064:	2301      	movs	r3, #1
 8002066:	613b      	str	r3, [r7, #16]
 8002068:	e010      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b80      	cmp	r3, #128	; 0x80
 800206e:	d902      	bls.n	8002076 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002070:	2303      	movs	r3, #3
 8002072:	613b      	str	r3, [r7, #16]
 8002074:	e00a      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2b80      	cmp	r3, #128	; 0x80
 800207a:	d102      	bne.n	8002082 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800207c:	2302      	movs	r3, #2
 800207e:	613b      	str	r3, [r7, #16]
 8002080:	e004      	b.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b70      	cmp	r3, #112	; 0x70
 8002086:	d101      	bne.n	800208c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002088:	2301      	movs	r3, #1
 800208a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800208c:	4b0b      	ldr	r3, [pc, #44]	; (80020bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f023 0207 	bic.w	r2, r3, #7
 8002094:	4909      	ldr	r1, [pc, #36]	; (80020bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	4313      	orrs	r3, r2
 800209a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800209c:	4b07      	ldr	r3, [pc, #28]	; (80020bc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f003 0307 	and.w	r3, r3, #7
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d001      	beq.n	80020ae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e000      	b.n	80020b0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}
 80020b8:	40021000 	.word	0x40021000
 80020bc:	40022000 	.word	0x40022000

080020c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b086      	sub	sp, #24
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020c8:	2300      	movs	r3, #0
 80020ca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020cc:	2300      	movs	r3, #0
 80020ce:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 809e 	beq.w	800221a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020de:	2300      	movs	r3, #0
 80020e0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020e2:	4b46      	ldr	r3, [pc, #280]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d101      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80020ee:	2301      	movs	r3, #1
 80020f0:	e000      	b.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0x34>
 80020f2:	2300      	movs	r3, #0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d00d      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020f8:	4b40      	ldr	r3, [pc, #256]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fc:	4a3f      	ldr	r2, [pc, #252]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80020fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002102:	6593      	str	r3, [r2, #88]	; 0x58
 8002104:	4b3d      	ldr	r3, [pc, #244]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002110:	2301      	movs	r3, #1
 8002112:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002114:	4b3a      	ldr	r3, [pc, #232]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a39      	ldr	r2, [pc, #228]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800211a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002120:	f7fe fe3c 	bl	8000d9c <HAL_GetTick>
 8002124:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002126:	e009      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002128:	f7fe fe38 	bl	8000d9c <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d902      	bls.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      {
        ret = HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	74fb      	strb	r3, [r7, #19]
        break;
 800213a:	e005      	b.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x88>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800213c:	4b30      	ldr	r3, [pc, #192]	; (8002200 <HAL_RCCEx_PeriphCLKConfig+0x140>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002144:	2b00      	cmp	r3, #0
 8002146:	d0ef      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x68>
      }
    }

    if(ret == HAL_OK)
 8002148:	7cfb      	ldrb	r3, [r7, #19]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d15a      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x144>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800214e:	4b2b      	ldr	r3, [pc, #172]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002158:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d01e      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	429a      	cmp	r2, r3
 8002168:	d019      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0xde>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800216a:	4b24      	ldr	r3, [pc, #144]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800216c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002174:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002176:	4b21      	ldr	r3, [pc, #132]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217c:	4a1f      	ldr	r2, [pc, #124]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800217e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002182:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002186:	4b1d      	ldr	r3, [pc, #116]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800218c:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 800218e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002192:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002196:	4a19      	ldr	r2, [pc, #100]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d016      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7fe fdf8 	bl	8000d9c <HAL_GetTick>
 80021ac:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021ae:	e00b      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021b0:	f7fe fdf4 	bl	8000d9c <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80021be:	4293      	cmp	r3, r2
 80021c0:	d902      	bls.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            ret = HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	74fb      	strb	r3, [r7, #19]
            break;
 80021c6:	e006      	b.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x116>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021c8:	4b0c      	ldr	r3, [pc, #48]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ce:	f003 0302 	and.w	r3, r3, #2
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d0ec      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0xf0>
          }
        }
      }

      if(ret == HAL_OK)
 80021d6:	7cfb      	ldrb	r3, [r7, #19]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10b      	bne.n	80021f4 <HAL_RCCEx_PeriphCLKConfig+0x134>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021dc:	4b07      	ldr	r3, [pc, #28]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	4904      	ldr	r1, [pc, #16]	; (80021fc <HAL_RCCEx_PeriphCLKConfig+0x13c>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021f2:	e009      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x148>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021f4:	7cfb      	ldrb	r3, [r7, #19]
 80021f6:	74bb      	strb	r3, [r7, #18]
 80021f8:	e006      	b.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x148>
 80021fa:	bf00      	nop
 80021fc:	40021000 	.word	0x40021000
 8002200:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002204:	7cfb      	ldrb	r3, [r7, #19]
 8002206:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002208:	7c7b      	ldrb	r3, [r7, #17]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d105      	bne.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x15a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220e:	4b6e      	ldr	r3, [pc, #440]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002212:	4a6d      	ldr	r2, [pc, #436]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002218:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x17c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002226:	4b68      	ldr	r3, [pc, #416]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222c:	f023 0203 	bic.w	r2, r3, #3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	4964      	ldr	r1, [pc, #400]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00a      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x19e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002248:	4b5f      	ldr	r3, [pc, #380]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800224a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800224e:	f023 020c 	bic.w	r2, r3, #12
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	495c      	ldr	r1, [pc, #368]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0304 	and.w	r3, r3, #4
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800226a:	4b57      	ldr	r3, [pc, #348]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800226c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002270:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	4953      	ldr	r1, [pc, #332]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0320 	and.w	r3, r3, #32
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00a      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800228c:	4b4e      	ldr	r3, [pc, #312]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800228e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002292:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	494b      	ldr	r1, [pc, #300]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d00a      	beq.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022ae:	4b46      	ldr	r3, [pc, #280]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	4942      	ldr	r1, [pc, #264]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d00a      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80022d0:	4b3d      	ldr	r3, [pc, #244]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	493a      	ldr	r1, [pc, #232]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d00a      	beq.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80022f2:	4b35      	ldr	r3, [pc, #212]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80022f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	4931      	ldr	r1, [pc, #196]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002302:	4313      	orrs	r3, r2
 8002304:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00a      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002314:	4b2c      	ldr	r3, [pc, #176]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	4929      	ldr	r1, [pc, #164]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002336:	4b24      	ldr	r3, [pc, #144]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	4920      	ldr	r1, [pc, #128]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002354:	2b00      	cmp	r3, #0
 8002356:	d015      	beq.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002358:	4b1b      	ldr	r3, [pc, #108]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800235a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002366:	4918      	ldr	r1, [pc, #96]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002368:	4313      	orrs	r3, r2
 800236a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002372:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002376:	d105      	bne.n	8002384 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002378:	4b13      	ldr	r3, [pc, #76]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	4a12      	ldr	r2, [pc, #72]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 800237e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002382:	60d3      	str	r3, [r2, #12]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d015      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002390:	4b0d      	ldr	r3, [pc, #52]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 8002392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002396:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239e:	490a      	ldr	r1, [pc, #40]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023a0:	4313      	orrs	r3, r2
 80023a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023ae:	d105      	bne.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80023b0:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	4a04      	ldr	r2, [pc, #16]	; (80023c8 <HAL_RCCEx_PeriphCLKConfig+0x308>)
 80023b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80023ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40021000 	.word	0x40021000

080023cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b082      	sub	sp, #8
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e049      	b.n	8002472 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d106      	bne.n	80023f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	f000 f841 	bl	800247a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2202      	movs	r2, #2
 80023fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3304      	adds	r3, #4
 8002408:	4619      	mov	r1, r3
 800240a:	4610      	mov	r0, r2
 800240c:	f000 f9dc 	bl	80027c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2201      	movs	r2, #1
 800241c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	2201      	movs	r2, #1
 8002424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2201      	movs	r2, #1
 8002434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2201      	movs	r2, #1
 8002444:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2201      	movs	r2, #1
 8002454:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3708      	adds	r7, #8
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr
	...

08002490 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002490:	b480      	push	{r7}
 8002492:	b085      	sub	sp, #20
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d001      	beq.n	80024a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e03b      	b.n	8002520 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	68da      	ldr	r2, [r3, #12]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f042 0201 	orr.w	r2, r2, #1
 80024be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a19      	ldr	r2, [pc, #100]	; (800252c <HAL_TIM_Base_Start_IT+0x9c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d009      	beq.n	80024de <HAL_TIM_Base_Start_IT+0x4e>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d2:	d004      	beq.n	80024de <HAL_TIM_Base_Start_IT+0x4e>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a15      	ldr	r2, [pc, #84]	; (8002530 <HAL_TIM_Base_Start_IT+0xa0>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d115      	bne.n	800250a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	689a      	ldr	r2, [r3, #8]
 80024e4:	4b13      	ldr	r3, [pc, #76]	; (8002534 <HAL_TIM_Base_Start_IT+0xa4>)
 80024e6:	4013      	ands	r3, r2
 80024e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b06      	cmp	r3, #6
 80024ee:	d015      	beq.n	800251c <HAL_TIM_Base_Start_IT+0x8c>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024f6:	d011      	beq.n	800251c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002508:	e008      	b.n	800251c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681a      	ldr	r2, [r3, #0]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f042 0201 	orr.w	r2, r2, #1
 8002518:	601a      	str	r2, [r3, #0]
 800251a:	e000      	b.n	800251e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800251c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	40012c00 	.word	0x40012c00
 8002530:	40014000 	.word	0x40014000
 8002534:	00010007 	.word	0x00010007

08002538 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b02      	cmp	r3, #2
 800254c:	d122      	bne.n	8002594 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f003 0302 	and.w	r3, r3, #2
 8002558:	2b02      	cmp	r3, #2
 800255a:	d11b      	bne.n	8002594 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f06f 0202 	mvn.w	r2, #2
 8002564:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	f003 0303 	and.w	r3, r3, #3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d003      	beq.n	8002582 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f905 	bl	800278a <HAL_TIM_IC_CaptureCallback>
 8002580:	e005      	b.n	800258e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f000 f8f7 	bl	8002776 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f908 	bl	800279e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2200      	movs	r2, #0
 8002592:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b04      	cmp	r3, #4
 80025a0:	d122      	bne.n	80025e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b04      	cmp	r3, #4
 80025ae:	d11b      	bne.n	80025e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f06f 0204 	mvn.w	r2, #4
 80025b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2202      	movs	r2, #2
 80025be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 f8db 	bl	800278a <HAL_TIM_IC_CaptureCallback>
 80025d4:	e005      	b.n	80025e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025d6:	6878      	ldr	r0, [r7, #4]
 80025d8:	f000 f8cd 	bl	8002776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f8de 	bl	800279e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2200      	movs	r2, #0
 80025e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	691b      	ldr	r3, [r3, #16]
 80025ee:	f003 0308 	and.w	r3, r3, #8
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d122      	bne.n	800263c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	f003 0308 	and.w	r3, r3, #8
 8002600:	2b08      	cmp	r3, #8
 8002602:	d11b      	bne.n	800263c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f06f 0208 	mvn.w	r2, #8
 800260c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2204      	movs	r2, #4
 8002612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	f003 0303 	and.w	r3, r3, #3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f8b1 	bl	800278a <HAL_TIM_IC_CaptureCallback>
 8002628:	e005      	b.n	8002636 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 f8a3 	bl	8002776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f000 f8b4 	bl	800279e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	691b      	ldr	r3, [r3, #16]
 8002642:	f003 0310 	and.w	r3, r3, #16
 8002646:	2b10      	cmp	r3, #16
 8002648:	d122      	bne.n	8002690 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68db      	ldr	r3, [r3, #12]
 8002650:	f003 0310 	and.w	r3, r3, #16
 8002654:	2b10      	cmp	r3, #16
 8002656:	d11b      	bne.n	8002690 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f06f 0210 	mvn.w	r2, #16
 8002660:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2208      	movs	r2, #8
 8002666:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002672:	2b00      	cmp	r3, #0
 8002674:	d003      	beq.n	800267e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f887 	bl	800278a <HAL_TIM_IC_CaptureCallback>
 800267c:	e005      	b.n	800268a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f879 	bl	8002776 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002684:	6878      	ldr	r0, [r7, #4]
 8002686:	f000 f88a 	bl	800279e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b01      	cmp	r3, #1
 800269c:	d10e      	bne.n	80026bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	f003 0301 	and.w	r3, r3, #1
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d107      	bne.n	80026bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f06f 0201 	mvn.w	r2, #1
 80026b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7fe f9a8 	bl	8000a0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026c6:	2b80      	cmp	r3, #128	; 0x80
 80026c8:	d10e      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026d4:	2b80      	cmp	r3, #128	; 0x80
 80026d6:	d107      	bne.n	80026e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 f8de 	bl	80028a4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026f6:	d10e      	bne.n	8002716 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	68db      	ldr	r3, [r3, #12]
 80026fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002702:	2b80      	cmp	r3, #128	; 0x80
 8002704:	d107      	bne.n	8002716 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800270e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f000 f8d1 	bl	80028b8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002720:	2b40      	cmp	r3, #64	; 0x40
 8002722:	d10e      	bne.n	8002742 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800272e:	2b40      	cmp	r3, #64	; 0x40
 8002730:	d107      	bne.n	8002742 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800273a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f000 f838 	bl	80027b2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	f003 0320 	and.w	r3, r3, #32
 800274c:	2b20      	cmp	r3, #32
 800274e:	d10e      	bne.n	800276e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	f003 0320 	and.w	r3, r3, #32
 800275a:	2b20      	cmp	r3, #32
 800275c:	d107      	bne.n	800276e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f06f 0220 	mvn.w	r2, #32
 8002766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f891 	bl	8002890 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800276e:	bf00      	nop
 8002770:	3708      	adds	r7, #8
 8002772:	46bd      	mov	sp, r7
 8002774:	bd80      	pop	{r7, pc}

08002776 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr

0800278a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800278a:	b480      	push	{r7}
 800278c:	b083      	sub	sp, #12
 800278e:	af00      	add	r7, sp, #0
 8002790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800279e:	b480      	push	{r7}
 80027a0:	b083      	sub	sp, #12
 80027a2:	af00      	add	r7, sp, #0
 80027a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80027ba:	bf00      	nop
 80027bc:	370c      	adds	r7, #12
 80027be:	46bd      	mov	sp, r7
 80027c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c4:	4770      	bx	lr
	...

080027c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	4a2a      	ldr	r2, [pc, #168]	; (8002884 <TIM_Base_SetConfig+0xbc>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d003      	beq.n	80027e8 <TIM_Base_SetConfig+0x20>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027e6:	d108      	bne.n	80027fa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	68fa      	ldr	r2, [r7, #12]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a21      	ldr	r2, [pc, #132]	; (8002884 <TIM_Base_SetConfig+0xbc>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d00b      	beq.n	800281a <TIM_Base_SetConfig+0x52>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002808:	d007      	beq.n	800281a <TIM_Base_SetConfig+0x52>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a1e      	ldr	r2, [pc, #120]	; (8002888 <TIM_Base_SetConfig+0xc0>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d003      	beq.n	800281a <TIM_Base_SetConfig+0x52>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	4a1d      	ldr	r2, [pc, #116]	; (800288c <TIM_Base_SetConfig+0xc4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d108      	bne.n	800282c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	68fa      	ldr	r2, [r7, #12]
 8002828:	4313      	orrs	r3, r2
 800282a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	695b      	ldr	r3, [r3, #20]
 8002836:	4313      	orrs	r3, r2
 8002838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	689a      	ldr	r2, [r3, #8]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4a0c      	ldr	r2, [pc, #48]	; (8002884 <TIM_Base_SetConfig+0xbc>)
 8002854:	4293      	cmp	r3, r2
 8002856:	d007      	beq.n	8002868 <TIM_Base_SetConfig+0xa0>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a0b      	ldr	r2, [pc, #44]	; (8002888 <TIM_Base_SetConfig+0xc0>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d003      	beq.n	8002868 <TIM_Base_SetConfig+0xa0>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	4a0a      	ldr	r2, [pc, #40]	; (800288c <TIM_Base_SetConfig+0xc4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d103      	bne.n	8002870 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2201      	movs	r2, #1
 8002874:	615a      	str	r2, [r3, #20]
}
 8002876:	bf00      	nop
 8002878:	3714      	adds	r7, #20
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
 8002882:	bf00      	nop
 8002884:	40012c00 	.word	0x40012c00
 8002888:	40014000 	.word	0x40014000
 800288c:	40014400 	.word	0x40014400

08002890 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e040      	b.n	8002960 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fe f8cc 	bl	8000a8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2224      	movs	r2, #36	; 0x24
 80028f8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f022 0201 	bic.w	r2, r2, #1
 8002908:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f8c0 	bl	8002a90 <UART_SetConfig>
 8002910:	4603      	mov	r3, r0
 8002912:	2b01      	cmp	r3, #1
 8002914:	d101      	bne.n	800291a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e022      	b.n	8002960 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fae8 	bl	8002ef8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685a      	ldr	r2, [r3, #4]
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002936:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002946:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0201 	orr.w	r2, r2, #1
 8002956:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f000 fb6f 	bl	800303c <UART_CheckIdleState>
 800295e:	4603      	mov	r3, r0
}
 8002960:	4618      	mov	r0, r3
 8002962:	3708      	adds	r7, #8
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b08a      	sub	sp, #40	; 0x28
 800296c:	af02      	add	r7, sp, #8
 800296e:	60f8      	str	r0, [r7, #12]
 8002970:	60b9      	str	r1, [r7, #8]
 8002972:	603b      	str	r3, [r7, #0]
 8002974:	4613      	mov	r3, r2
 8002976:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800297c:	2b20      	cmp	r3, #32
 800297e:	f040 8082 	bne.w	8002a86 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d002      	beq.n	800298e <HAL_UART_Transmit+0x26>
 8002988:	88fb      	ldrh	r3, [r7, #6]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e07a      	b.n	8002a88 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002998:	2b01      	cmp	r3, #1
 800299a:	d101      	bne.n	80029a0 <HAL_UART_Transmit+0x38>
 800299c:	2302      	movs	r3, #2
 800299e:	e073      	b.n	8002a88 <HAL_UART_Transmit+0x120>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2201      	movs	r2, #1
 80029a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	2221      	movs	r2, #33	; 0x21
 80029b4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80029b6:	f7fe f9f1 	bl	8000d9c <HAL_GetTick>
 80029ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	88fa      	ldrh	r2, [r7, #6]
 80029c0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	88fa      	ldrh	r2, [r7, #6]
 80029c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029d4:	d108      	bne.n	80029e8 <HAL_UART_Transmit+0x80>
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	691b      	ldr	r3, [r3, #16]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d104      	bne.n	80029e8 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80029de:	2300      	movs	r3, #0
 80029e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	e003      	b.n	80029f0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80029ec:	2300      	movs	r3, #0
 80029ee:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	2200      	movs	r2, #0
 80029f4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80029f8:	e02d      	b.n	8002a56 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	2200      	movs	r2, #0
 8002a02:	2180      	movs	r1, #128	; 0x80
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f000 fb62 	bl	80030ce <UART_WaitOnFlagUntilTimeout>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d001      	beq.n	8002a14 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e039      	b.n	8002a88 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10b      	bne.n	8002a32 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	881a      	ldrh	r2, [r3, #0]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a26:	b292      	uxth	r2, r2
 8002a28:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	3302      	adds	r3, #2
 8002a2e:	61bb      	str	r3, [r7, #24]
 8002a30:	e008      	b.n	8002a44 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	781a      	ldrb	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	b292      	uxth	r2, r2
 8002a3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	3301      	adds	r3, #1
 8002a42:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002a5c:	b29b      	uxth	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1cb      	bne.n	80029fa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	2140      	movs	r1, #64	; 0x40
 8002a6c:	68f8      	ldr	r0, [r7, #12]
 8002a6e:	f000 fb2e 	bl	80030ce <UART_WaitOnFlagUntilTimeout>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002a78:	2303      	movs	r3, #3
 8002a7a:	e005      	b.n	8002a88 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2220      	movs	r2, #32
 8002a80:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	e000      	b.n	8002a88 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002a86:	2302      	movs	r3, #2
  }
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3720      	adds	r7, #32
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}

08002a90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002a90:	b5b0      	push	{r4, r5, r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	691b      	ldr	r3, [r3, #16]
 8002aa4:	431a      	orrs	r2, r3
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	431a      	orrs	r2, r3
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	681a      	ldr	r2, [r3, #0]
 8002aba:	4baa      	ldr	r3, [pc, #680]	; (8002d64 <UART_SetConfig+0x2d4>)
 8002abc:	4013      	ands	r3, r2
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	6812      	ldr	r2, [r2, #0]
 8002ac2:	69f9      	ldr	r1, [r7, #28]
 8002ac4:	430b      	orrs	r3, r1
 8002ac6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	68da      	ldr	r2, [r3, #12]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	430a      	orrs	r2, r1
 8002adc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	699b      	ldr	r3, [r3, #24]
 8002ae2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a9f      	ldr	r2, [pc, #636]	; (8002d68 <UART_SetConfig+0x2d8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d004      	beq.n	8002af8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	69fa      	ldr	r2, [r7, #28]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	689b      	ldr	r3, [r3, #8]
 8002afe:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	69fa      	ldr	r2, [r7, #28]
 8002b08:	430a      	orrs	r2, r1
 8002b0a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a96      	ldr	r2, [pc, #600]	; (8002d6c <UART_SetConfig+0x2dc>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d121      	bne.n	8002b5a <UART_SetConfig+0xca>
 8002b16:	4b96      	ldr	r3, [pc, #600]	; (8002d70 <UART_SetConfig+0x2e0>)
 8002b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1c:	f003 0303 	and.w	r3, r3, #3
 8002b20:	2b03      	cmp	r3, #3
 8002b22:	d817      	bhi.n	8002b54 <UART_SetConfig+0xc4>
 8002b24:	a201      	add	r2, pc, #4	; (adr r2, 8002b2c <UART_SetConfig+0x9c>)
 8002b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2a:	bf00      	nop
 8002b2c:	08002b3d 	.word	0x08002b3d
 8002b30:	08002b49 	.word	0x08002b49
 8002b34:	08002b43 	.word	0x08002b43
 8002b38:	08002b4f 	.word	0x08002b4f
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	76fb      	strb	r3, [r7, #27]
 8002b40:	e096      	b.n	8002c70 <UART_SetConfig+0x1e0>
 8002b42:	2302      	movs	r3, #2
 8002b44:	76fb      	strb	r3, [r7, #27]
 8002b46:	e093      	b.n	8002c70 <UART_SetConfig+0x1e0>
 8002b48:	2304      	movs	r3, #4
 8002b4a:	76fb      	strb	r3, [r7, #27]
 8002b4c:	e090      	b.n	8002c70 <UART_SetConfig+0x1e0>
 8002b4e:	2308      	movs	r3, #8
 8002b50:	76fb      	strb	r3, [r7, #27]
 8002b52:	e08d      	b.n	8002c70 <UART_SetConfig+0x1e0>
 8002b54:	2310      	movs	r3, #16
 8002b56:	76fb      	strb	r3, [r7, #27]
 8002b58:	e08a      	b.n	8002c70 <UART_SetConfig+0x1e0>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a85      	ldr	r2, [pc, #532]	; (8002d74 <UART_SetConfig+0x2e4>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d132      	bne.n	8002bca <UART_SetConfig+0x13a>
 8002b64:	4b82      	ldr	r3, [pc, #520]	; (8002d70 <UART_SetConfig+0x2e0>)
 8002b66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6a:	f003 030c 	and.w	r3, r3, #12
 8002b6e:	2b0c      	cmp	r3, #12
 8002b70:	d828      	bhi.n	8002bc4 <UART_SetConfig+0x134>
 8002b72:	a201      	add	r2, pc, #4	; (adr r2, 8002b78 <UART_SetConfig+0xe8>)
 8002b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b78:	08002bad 	.word	0x08002bad
 8002b7c:	08002bc5 	.word	0x08002bc5
 8002b80:	08002bc5 	.word	0x08002bc5
 8002b84:	08002bc5 	.word	0x08002bc5
 8002b88:	08002bb9 	.word	0x08002bb9
 8002b8c:	08002bc5 	.word	0x08002bc5
 8002b90:	08002bc5 	.word	0x08002bc5
 8002b94:	08002bc5 	.word	0x08002bc5
 8002b98:	08002bb3 	.word	0x08002bb3
 8002b9c:	08002bc5 	.word	0x08002bc5
 8002ba0:	08002bc5 	.word	0x08002bc5
 8002ba4:	08002bc5 	.word	0x08002bc5
 8002ba8:	08002bbf 	.word	0x08002bbf
 8002bac:	2300      	movs	r3, #0
 8002bae:	76fb      	strb	r3, [r7, #27]
 8002bb0:	e05e      	b.n	8002c70 <UART_SetConfig+0x1e0>
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	76fb      	strb	r3, [r7, #27]
 8002bb6:	e05b      	b.n	8002c70 <UART_SetConfig+0x1e0>
 8002bb8:	2304      	movs	r3, #4
 8002bba:	76fb      	strb	r3, [r7, #27]
 8002bbc:	e058      	b.n	8002c70 <UART_SetConfig+0x1e0>
 8002bbe:	2308      	movs	r3, #8
 8002bc0:	76fb      	strb	r3, [r7, #27]
 8002bc2:	e055      	b.n	8002c70 <UART_SetConfig+0x1e0>
 8002bc4:	2310      	movs	r3, #16
 8002bc6:	76fb      	strb	r3, [r7, #27]
 8002bc8:	e052      	b.n	8002c70 <UART_SetConfig+0x1e0>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a6a      	ldr	r2, [pc, #424]	; (8002d78 <UART_SetConfig+0x2e8>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d120      	bne.n	8002c16 <UART_SetConfig+0x186>
 8002bd4:	4b66      	ldr	r3, [pc, #408]	; (8002d70 <UART_SetConfig+0x2e0>)
 8002bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bda:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002bde:	2b30      	cmp	r3, #48	; 0x30
 8002be0:	d013      	beq.n	8002c0a <UART_SetConfig+0x17a>
 8002be2:	2b30      	cmp	r3, #48	; 0x30
 8002be4:	d814      	bhi.n	8002c10 <UART_SetConfig+0x180>
 8002be6:	2b20      	cmp	r3, #32
 8002be8:	d009      	beq.n	8002bfe <UART_SetConfig+0x16e>
 8002bea:	2b20      	cmp	r3, #32
 8002bec:	d810      	bhi.n	8002c10 <UART_SetConfig+0x180>
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d002      	beq.n	8002bf8 <UART_SetConfig+0x168>
 8002bf2:	2b10      	cmp	r3, #16
 8002bf4:	d006      	beq.n	8002c04 <UART_SetConfig+0x174>
 8002bf6:	e00b      	b.n	8002c10 <UART_SetConfig+0x180>
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	76fb      	strb	r3, [r7, #27]
 8002bfc:	e038      	b.n	8002c70 <UART_SetConfig+0x1e0>
 8002bfe:	2302      	movs	r3, #2
 8002c00:	76fb      	strb	r3, [r7, #27]
 8002c02:	e035      	b.n	8002c70 <UART_SetConfig+0x1e0>
 8002c04:	2304      	movs	r3, #4
 8002c06:	76fb      	strb	r3, [r7, #27]
 8002c08:	e032      	b.n	8002c70 <UART_SetConfig+0x1e0>
 8002c0a:	2308      	movs	r3, #8
 8002c0c:	76fb      	strb	r3, [r7, #27]
 8002c0e:	e02f      	b.n	8002c70 <UART_SetConfig+0x1e0>
 8002c10:	2310      	movs	r3, #16
 8002c12:	76fb      	strb	r3, [r7, #27]
 8002c14:	e02c      	b.n	8002c70 <UART_SetConfig+0x1e0>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a53      	ldr	r2, [pc, #332]	; (8002d68 <UART_SetConfig+0x2d8>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d125      	bne.n	8002c6c <UART_SetConfig+0x1dc>
 8002c20:	4b53      	ldr	r3, [pc, #332]	; (8002d70 <UART_SetConfig+0x2e0>)
 8002c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c26:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c2a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c2e:	d017      	beq.n	8002c60 <UART_SetConfig+0x1d0>
 8002c30:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002c34:	d817      	bhi.n	8002c66 <UART_SetConfig+0x1d6>
 8002c36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c3a:	d00b      	beq.n	8002c54 <UART_SetConfig+0x1c4>
 8002c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c40:	d811      	bhi.n	8002c66 <UART_SetConfig+0x1d6>
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <UART_SetConfig+0x1be>
 8002c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c4a:	d006      	beq.n	8002c5a <UART_SetConfig+0x1ca>
 8002c4c:	e00b      	b.n	8002c66 <UART_SetConfig+0x1d6>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	76fb      	strb	r3, [r7, #27]
 8002c52:	e00d      	b.n	8002c70 <UART_SetConfig+0x1e0>
 8002c54:	2302      	movs	r3, #2
 8002c56:	76fb      	strb	r3, [r7, #27]
 8002c58:	e00a      	b.n	8002c70 <UART_SetConfig+0x1e0>
 8002c5a:	2304      	movs	r3, #4
 8002c5c:	76fb      	strb	r3, [r7, #27]
 8002c5e:	e007      	b.n	8002c70 <UART_SetConfig+0x1e0>
 8002c60:	2308      	movs	r3, #8
 8002c62:	76fb      	strb	r3, [r7, #27]
 8002c64:	e004      	b.n	8002c70 <UART_SetConfig+0x1e0>
 8002c66:	2310      	movs	r3, #16
 8002c68:	76fb      	strb	r3, [r7, #27]
 8002c6a:	e001      	b.n	8002c70 <UART_SetConfig+0x1e0>
 8002c6c:	2310      	movs	r3, #16
 8002c6e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a3c      	ldr	r2, [pc, #240]	; (8002d68 <UART_SetConfig+0x2d8>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	f040 8082 	bne.w	8002d80 <UART_SetConfig+0x2f0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002c7c:	7efb      	ldrb	r3, [r7, #27]
 8002c7e:	2b08      	cmp	r3, #8
 8002c80:	d823      	bhi.n	8002cca <UART_SetConfig+0x23a>
 8002c82:	a201      	add	r2, pc, #4	; (adr r2, 8002c88 <UART_SetConfig+0x1f8>)
 8002c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c88:	08002cad 	.word	0x08002cad
 8002c8c:	08002ccb 	.word	0x08002ccb
 8002c90:	08002cb5 	.word	0x08002cb5
 8002c94:	08002ccb 	.word	0x08002ccb
 8002c98:	08002cbb 	.word	0x08002cbb
 8002c9c:	08002ccb 	.word	0x08002ccb
 8002ca0:	08002ccb 	.word	0x08002ccb
 8002ca4:	08002ccb 	.word	0x08002ccb
 8002ca8:	08002cc3 	.word	0x08002cc3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cac:	f7ff f94a 	bl	8001f44 <HAL_RCC_GetPCLK1Freq>
 8002cb0:	6178      	str	r0, [r7, #20]
        break;
 8002cb2:	e00f      	b.n	8002cd4 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002cb4:	4b31      	ldr	r3, [pc, #196]	; (8002d7c <UART_SetConfig+0x2ec>)
 8002cb6:	617b      	str	r3, [r7, #20]
        break;
 8002cb8:	e00c      	b.n	8002cd4 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002cba:	f7ff f8ab 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8002cbe:	6178      	str	r0, [r7, #20]
        break;
 8002cc0:	e008      	b.n	8002cd4 <UART_SetConfig+0x244>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cc2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cc6:	617b      	str	r3, [r7, #20]
        break;
 8002cc8:	e004      	b.n	8002cd4 <UART_SetConfig+0x244>
      default:
        pclk = 0U;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	76bb      	strb	r3, [r7, #26]
        break;
 8002cd2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	f000 8100 	beq.w	8002edc <UART_SetConfig+0x44c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	005b      	lsls	r3, r3, #1
 8002ce4:	4413      	add	r3, r2
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d305      	bcc.n	8002cf8 <UART_SetConfig+0x268>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002cf2:	697a      	ldr	r2, [r7, #20]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d902      	bls.n	8002cfe <UART_SetConfig+0x26e>
      {
        ret = HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	76bb      	strb	r3, [r7, #26]
 8002cfc:	e0ee      	b.n	8002edc <UART_SetConfig+0x44c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f04f 0100 	mov.w	r1, #0
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	020b      	lsls	r3, r1, #8
 8002d10:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002d14:	0202      	lsls	r2, r0, #8
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	6849      	ldr	r1, [r1, #4]
 8002d1a:	0849      	lsrs	r1, r1, #1
 8002d1c:	4608      	mov	r0, r1
 8002d1e:	f04f 0100 	mov.w	r1, #0
 8002d22:	1814      	adds	r4, r2, r0
 8002d24:	eb43 0501 	adc.w	r5, r3, r1
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	f04f 0300 	mov.w	r3, #0
 8002d32:	4620      	mov	r0, r4
 8002d34:	4629      	mov	r1, r5
 8002d36:	f7fd faa3 	bl	8000280 <__aeabi_uldivmod>
 8002d3a:	4602      	mov	r2, r0
 8002d3c:	460b      	mov	r3, r1
 8002d3e:	4613      	mov	r3, r2
 8002d40:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002d42:	693b      	ldr	r3, [r7, #16]
 8002d44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d48:	d308      	bcc.n	8002d5c <UART_SetConfig+0x2cc>
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d50:	d204      	bcs.n	8002d5c <UART_SetConfig+0x2cc>
        {
          huart->Instance->BRR = usartdiv;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	60da      	str	r2, [r3, #12]
 8002d5a:	e0bf      	b.n	8002edc <UART_SetConfig+0x44c>
        }
        else
        {
          ret = HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	76bb      	strb	r3, [r7, #26]
 8002d60:	e0bc      	b.n	8002edc <UART_SetConfig+0x44c>
 8002d62:	bf00      	nop
 8002d64:	efff69f3 	.word	0xefff69f3
 8002d68:	40008000 	.word	0x40008000
 8002d6c:	40013800 	.word	0x40013800
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40004400 	.word	0x40004400
 8002d78:	40004800 	.word	0x40004800
 8002d7c:	00f42400 	.word	0x00f42400
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d88:	d15b      	bne.n	8002e42 <UART_SetConfig+0x3b2>
  {
    switch (clocksource)
 8002d8a:	7efb      	ldrb	r3, [r7, #27]
 8002d8c:	2b08      	cmp	r3, #8
 8002d8e:	d828      	bhi.n	8002de2 <UART_SetConfig+0x352>
 8002d90:	a201      	add	r2, pc, #4	; (adr r2, 8002d98 <UART_SetConfig+0x308>)
 8002d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d96:	bf00      	nop
 8002d98:	08002dbd 	.word	0x08002dbd
 8002d9c:	08002dc5 	.word	0x08002dc5
 8002da0:	08002dcd 	.word	0x08002dcd
 8002da4:	08002de3 	.word	0x08002de3
 8002da8:	08002dd3 	.word	0x08002dd3
 8002dac:	08002de3 	.word	0x08002de3
 8002db0:	08002de3 	.word	0x08002de3
 8002db4:	08002de3 	.word	0x08002de3
 8002db8:	08002ddb 	.word	0x08002ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002dbc:	f7ff f8c2 	bl	8001f44 <HAL_RCC_GetPCLK1Freq>
 8002dc0:	6178      	str	r0, [r7, #20]
        break;
 8002dc2:	e013      	b.n	8002dec <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002dc4:	f7ff f8d4 	bl	8001f70 <HAL_RCC_GetPCLK2Freq>
 8002dc8:	6178      	str	r0, [r7, #20]
        break;
 8002dca:	e00f      	b.n	8002dec <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002dcc:	4b49      	ldr	r3, [pc, #292]	; (8002ef4 <UART_SetConfig+0x464>)
 8002dce:	617b      	str	r3, [r7, #20]
        break;
 8002dd0:	e00c      	b.n	8002dec <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002dd2:	f7ff f81f 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8002dd6:	6178      	str	r0, [r7, #20]
        break;
 8002dd8:	e008      	b.n	8002dec <UART_SetConfig+0x35c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002dde:	617b      	str	r3, [r7, #20]
        break;
 8002de0:	e004      	b.n	8002dec <UART_SetConfig+0x35c>
      default:
        pclk = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	76bb      	strb	r3, [r7, #26]
        break;
 8002dea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d074      	beq.n	8002edc <UART_SetConfig+0x44c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	005a      	lsls	r2, r3, #1
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	085b      	lsrs	r3, r3, #1
 8002dfc:	441a      	add	r2, r3
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e06:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	2b0f      	cmp	r3, #15
 8002e0c:	d916      	bls.n	8002e3c <UART_SetConfig+0x3ac>
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e14:	d212      	bcs.n	8002e3c <UART_SetConfig+0x3ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	f023 030f 	bic.w	r3, r3, #15
 8002e1e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	085b      	lsrs	r3, r3, #1
 8002e24:	b29b      	uxth	r3, r3
 8002e26:	f003 0307 	and.w	r3, r3, #7
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	89fb      	ldrh	r3, [r7, #14]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	89fa      	ldrh	r2, [r7, #14]
 8002e38:	60da      	str	r2, [r3, #12]
 8002e3a:	e04f      	b.n	8002edc <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	76bb      	strb	r3, [r7, #26]
 8002e40:	e04c      	b.n	8002edc <UART_SetConfig+0x44c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002e42:	7efb      	ldrb	r3, [r7, #27]
 8002e44:	2b08      	cmp	r3, #8
 8002e46:	d828      	bhi.n	8002e9a <UART_SetConfig+0x40a>
 8002e48:	a201      	add	r2, pc, #4	; (adr r2, 8002e50 <UART_SetConfig+0x3c0>)
 8002e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e4e:	bf00      	nop
 8002e50:	08002e75 	.word	0x08002e75
 8002e54:	08002e7d 	.word	0x08002e7d
 8002e58:	08002e85 	.word	0x08002e85
 8002e5c:	08002e9b 	.word	0x08002e9b
 8002e60:	08002e8b 	.word	0x08002e8b
 8002e64:	08002e9b 	.word	0x08002e9b
 8002e68:	08002e9b 	.word	0x08002e9b
 8002e6c:	08002e9b 	.word	0x08002e9b
 8002e70:	08002e93 	.word	0x08002e93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e74:	f7ff f866 	bl	8001f44 <HAL_RCC_GetPCLK1Freq>
 8002e78:	6178      	str	r0, [r7, #20]
        break;
 8002e7a:	e013      	b.n	8002ea4 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e7c:	f7ff f878 	bl	8001f70 <HAL_RCC_GetPCLK2Freq>
 8002e80:	6178      	str	r0, [r7, #20]
        break;
 8002e82:	e00f      	b.n	8002ea4 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <UART_SetConfig+0x464>)
 8002e86:	617b      	str	r3, [r7, #20]
        break;
 8002e88:	e00c      	b.n	8002ea4 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e8a:	f7fe ffc3 	bl	8001e14 <HAL_RCC_GetSysClockFreq>
 8002e8e:	6178      	str	r0, [r7, #20]
        break;
 8002e90:	e008      	b.n	8002ea4 <UART_SetConfig+0x414>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e96:	617b      	str	r3, [r7, #20]
        break;
 8002e98:	e004      	b.n	8002ea4 <UART_SetConfig+0x414>
      default:
        pclk = 0U;
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	76bb      	strb	r3, [r7, #26]
        break;
 8002ea2:	bf00      	nop
    }

    if (pclk != 0U)
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d018      	beq.n	8002edc <UART_SetConfig+0x44c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	085a      	lsrs	r2, r3, #1
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	441a      	add	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	2b0f      	cmp	r3, #15
 8002ec2:	d909      	bls.n	8002ed8 <UART_SetConfig+0x448>
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eca:	d205      	bcs.n	8002ed8 <UART_SetConfig+0x448>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	60da      	str	r2, [r3, #12]
 8002ed6:	e001      	b.n	8002edc <UART_SetConfig+0x44c>
      }
      else
      {
        ret = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002ee8:	7ebb      	ldrb	r3, [r7, #26]
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3720      	adds	r7, #32
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	00f42400 	.word	0x00f42400

08002ef8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b083      	sub	sp, #12
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	f003 0301 	and.w	r3, r3, #1
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00a      	beq.n	8002f22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	430a      	orrs	r2, r1
 8002f20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d00a      	beq.n	8002f44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f48:	f003 0304 	and.w	r3, r3, #4
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00a      	beq.n	8002faa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	f003 0320 	and.w	r3, r3, #32
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00a      	beq.n	8002fcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	430a      	orrs	r2, r1
 8002fca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d01a      	beq.n	800300e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ff6:	d10a      	bne.n	800300e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	430a      	orrs	r2, r1
 800300c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003012:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003016:	2b00      	cmp	r3, #0
 8003018:	d00a      	beq.n	8003030 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	605a      	str	r2, [r3, #4]
  }
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303a:	4770      	bx	lr

0800303c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af02      	add	r7, sp, #8
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800304c:	f7fd fea6 	bl	8000d9c <HAL_GetTick>
 8003050:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0308 	and.w	r3, r3, #8
 800305c:	2b08      	cmp	r3, #8
 800305e:	d10e      	bne.n	800307e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003060:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2200      	movs	r2, #0
 800306a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f82d 	bl	80030ce <UART_WaitOnFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e023      	b.n	80030c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f003 0304 	and.w	r3, r3, #4
 8003088:	2b04      	cmp	r3, #4
 800308a:	d10e      	bne.n	80030aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800308c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003090:	9300      	str	r3, [sp, #0]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 f817 	bl	80030ce <UART_WaitOnFlagUntilTimeout>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030a6:	2303      	movs	r3, #3
 80030a8:	e00d      	b.n	80030c6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2220      	movs	r2, #32
 80030ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2220      	movs	r2, #32
 80030b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	3710      	adds	r7, #16
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}

080030ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80030ce:	b580      	push	{r7, lr}
 80030d0:	b09c      	sub	sp, #112	; 0x70
 80030d2:	af00      	add	r7, sp, #0
 80030d4:	60f8      	str	r0, [r7, #12]
 80030d6:	60b9      	str	r1, [r7, #8]
 80030d8:	603b      	str	r3, [r7, #0]
 80030da:	4613      	mov	r3, r2
 80030dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030de:	e0a5      	b.n	800322c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030e6:	f000 80a1 	beq.w	800322c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ea:	f7fd fe57 	bl	8000d9c <HAL_GetTick>
 80030ee:	4602      	mov	r2, r0
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d302      	bcc.n	8003100 <UART_WaitOnFlagUntilTimeout+0x32>
 80030fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d13e      	bne.n	800317e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003106:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003108:	e853 3f00 	ldrex	r3, [r3]
 800310c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800310e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003110:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003114:	667b      	str	r3, [r7, #100]	; 0x64
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	461a      	mov	r2, r3
 800311c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800311e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003120:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003122:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003124:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003126:	e841 2300 	strex	r3, r2, [r1]
 800312a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800312c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1e6      	bne.n	8003100 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	3308      	adds	r3, #8
 8003138:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800313a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800313c:	e853 3f00 	ldrex	r3, [r3]
 8003140:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003144:	f023 0301 	bic.w	r3, r3, #1
 8003148:	663b      	str	r3, [r7, #96]	; 0x60
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3308      	adds	r3, #8
 8003150:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003152:	64ba      	str	r2, [r7, #72]	; 0x48
 8003154:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003156:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003158:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800315a:	e841 2300 	strex	r3, r2, [r1]
 800315e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1e5      	bne.n	8003132 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	2220      	movs	r2, #32
 8003170:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e067      	b.n	800324e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d04f      	beq.n	800322c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003196:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800319a:	d147      	bne.n	800322c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80031a4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ae:	e853 3f00 	ldrex	r3, [r3]
 80031b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80031b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	461a      	mov	r2, r3
 80031c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80031c4:	637b      	str	r3, [r7, #52]	; 0x34
 80031c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80031ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031cc:	e841 2300 	strex	r3, r2, [r1]
 80031d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80031d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d1e6      	bne.n	80031a6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	3308      	adds	r3, #8
 80031de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	e853 3f00 	ldrex	r3, [r3]
 80031e6:	613b      	str	r3, [r7, #16]
   return(result);
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	f023 0301 	bic.w	r3, r3, #1
 80031ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3308      	adds	r3, #8
 80031f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80031f8:	623a      	str	r2, [r7, #32]
 80031fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031fc:	69f9      	ldr	r1, [r7, #28]
 80031fe:	6a3a      	ldr	r2, [r7, #32]
 8003200:	e841 2300 	strex	r3, r2, [r1]
 8003204:	61bb      	str	r3, [r7, #24]
   return(result);
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1e5      	bne.n	80031d8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2220      	movs	r2, #32
 8003210:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2220      	movs	r2, #32
 8003216:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2220      	movs	r2, #32
 800321c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2200      	movs	r2, #0
 8003224:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003228:	2303      	movs	r3, #3
 800322a:	e010      	b.n	800324e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	69da      	ldr	r2, [r3, #28]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	4013      	ands	r3, r2
 8003236:	68ba      	ldr	r2, [r7, #8]
 8003238:	429a      	cmp	r2, r3
 800323a:	bf0c      	ite	eq
 800323c:	2301      	moveq	r3, #1
 800323e:	2300      	movne	r3, #0
 8003240:	b2db      	uxtb	r3, r3
 8003242:	461a      	mov	r2, r3
 8003244:	79fb      	ldrb	r3, [r7, #7]
 8003246:	429a      	cmp	r2, r3
 8003248:	f43f af4a 	beq.w	80030e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3770      	adds	r7, #112	; 0x70
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <__NVIC_SetPriority>:
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	4603      	mov	r3, r0
 8003260:	6039      	str	r1, [r7, #0]
 8003262:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003268:	2b00      	cmp	r3, #0
 800326a:	db0a      	blt.n	8003282 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	b2da      	uxtb	r2, r3
 8003270:	490c      	ldr	r1, [pc, #48]	; (80032a4 <__NVIC_SetPriority+0x4c>)
 8003272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003276:	0112      	lsls	r2, r2, #4
 8003278:	b2d2      	uxtb	r2, r2
 800327a:	440b      	add	r3, r1
 800327c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003280:	e00a      	b.n	8003298 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	b2da      	uxtb	r2, r3
 8003286:	4908      	ldr	r1, [pc, #32]	; (80032a8 <__NVIC_SetPriority+0x50>)
 8003288:	79fb      	ldrb	r3, [r7, #7]
 800328a:	f003 030f 	and.w	r3, r3, #15
 800328e:	3b04      	subs	r3, #4
 8003290:	0112      	lsls	r2, r2, #4
 8003292:	b2d2      	uxtb	r2, r2
 8003294:	440b      	add	r3, r1
 8003296:	761a      	strb	r2, [r3, #24]
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr
 80032a4:	e000e100 	.word	0xe000e100
 80032a8:	e000ed00 	.word	0xe000ed00

080032ac <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80032b0:	4b05      	ldr	r3, [pc, #20]	; (80032c8 <SysTick_Handler+0x1c>)
 80032b2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80032b4:	f002 f946 	bl	8005544 <xTaskGetSchedulerState>
 80032b8:	4603      	mov	r3, r0
 80032ba:	2b01      	cmp	r3, #1
 80032bc:	d001      	beq.n	80032c2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80032be:	f003 f82b 	bl	8006318 <xPortSysTickHandler>
  }
}
 80032c2:	bf00      	nop
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	e000e010 	.word	0xe000e010

080032cc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80032d0:	2100      	movs	r1, #0
 80032d2:	f06f 0004 	mvn.w	r0, #4
 80032d6:	f7ff ffbf 	bl	8003258 <__NVIC_SetPriority>
#endif
}
 80032da:	bf00      	nop
 80032dc:	bd80      	pop	{r7, pc}
	...

080032e0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032e6:	f3ef 8305 	mrs	r3, IPSR
 80032ea:	603b      	str	r3, [r7, #0]
  return(result);
 80032ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d003      	beq.n	80032fa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80032f2:	f06f 0305 	mvn.w	r3, #5
 80032f6:	607b      	str	r3, [r7, #4]
 80032f8:	e00c      	b.n	8003314 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80032fa:	4b0a      	ldr	r3, [pc, #40]	; (8003324 <osKernelInitialize+0x44>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d105      	bne.n	800330e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003302:	4b08      	ldr	r3, [pc, #32]	; (8003324 <osKernelInitialize+0x44>)
 8003304:	2201      	movs	r2, #1
 8003306:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003308:	2300      	movs	r3, #0
 800330a:	607b      	str	r3, [r7, #4]
 800330c:	e002      	b.n	8003314 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800330e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003312:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003314:	687b      	ldr	r3, [r7, #4]
}
 8003316:	4618      	mov	r0, r3
 8003318:	370c      	adds	r7, #12
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	200000e4 	.word	0x200000e4

08003328 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800332e:	f3ef 8305 	mrs	r3, IPSR
 8003332:	603b      	str	r3, [r7, #0]
  return(result);
 8003334:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003336:	2b00      	cmp	r3, #0
 8003338:	d003      	beq.n	8003342 <osKernelStart+0x1a>
    stat = osErrorISR;
 800333a:	f06f 0305 	mvn.w	r3, #5
 800333e:	607b      	str	r3, [r7, #4]
 8003340:	e010      	b.n	8003364 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003342:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <osKernelStart+0x48>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d109      	bne.n	800335e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800334a:	f7ff ffbf 	bl	80032cc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800334e:	4b08      	ldr	r3, [pc, #32]	; (8003370 <osKernelStart+0x48>)
 8003350:	2202      	movs	r2, #2
 8003352:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003354:	f001 fc9a 	bl	8004c8c <vTaskStartScheduler>
      stat = osOK;
 8003358:	2300      	movs	r3, #0
 800335a:	607b      	str	r3, [r7, #4]
 800335c:	e002      	b.n	8003364 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800335e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003362:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003364:	687b      	ldr	r3, [r7, #4]
}
 8003366:	4618      	mov	r0, r3
 8003368:	3708      	adds	r7, #8
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	200000e4 	.word	0x200000e4

08003374 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003374:	b580      	push	{r7, lr}
 8003376:	b08e      	sub	sp, #56	; 0x38
 8003378:	af04      	add	r7, sp, #16
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003380:	2300      	movs	r3, #0
 8003382:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003384:	f3ef 8305 	mrs	r3, IPSR
 8003388:	617b      	str	r3, [r7, #20]
  return(result);
 800338a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800338c:	2b00      	cmp	r3, #0
 800338e:	d17e      	bne.n	800348e <osThreadNew+0x11a>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d07b      	beq.n	800348e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003396:	2380      	movs	r3, #128	; 0x80
 8003398:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800339a:	2318      	movs	r3, #24
 800339c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800339e:	2300      	movs	r3, #0
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80033a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80033a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d045      	beq.n	800343a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <osThreadNew+0x48>
        name = attr->name;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d002      	beq.n	80033ca <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d008      	beq.n	80033e2 <osThreadNew+0x6e>
 80033d0:	69fb      	ldr	r3, [r7, #28]
 80033d2:	2b38      	cmp	r3, #56	; 0x38
 80033d4:	d805      	bhi.n	80033e2 <osThreadNew+0x6e>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	f003 0301 	and.w	r3, r3, #1
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <osThreadNew+0x72>
        return (NULL);
 80033e2:	2300      	movs	r3, #0
 80033e4:	e054      	b.n	8003490 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	695b      	ldr	r3, [r3, #20]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d003      	beq.n	80033f6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	089b      	lsrs	r3, r3, #2
 80033f4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00e      	beq.n	800341c <osThreadNew+0xa8>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	2bbb      	cmp	r3, #187	; 0xbb
 8003404:	d90a      	bls.n	800341c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800340a:	2b00      	cmp	r3, #0
 800340c:	d006      	beq.n	800341c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	695b      	ldr	r3, [r3, #20]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d002      	beq.n	800341c <osThreadNew+0xa8>
        mem = 1;
 8003416:	2301      	movs	r3, #1
 8003418:	61bb      	str	r3, [r7, #24]
 800341a:	e010      	b.n	800343e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d10c      	bne.n	800343e <osThreadNew+0xca>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	68db      	ldr	r3, [r3, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d108      	bne.n	800343e <osThreadNew+0xca>
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d104      	bne.n	800343e <osThreadNew+0xca>
          mem = 0;
 8003434:	2300      	movs	r3, #0
 8003436:	61bb      	str	r3, [r7, #24]
 8003438:	e001      	b.n	800343e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800343a:	2300      	movs	r3, #0
 800343c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800343e:	69bb      	ldr	r3, [r7, #24]
 8003440:	2b01      	cmp	r3, #1
 8003442:	d110      	bne.n	8003466 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003448:	687a      	ldr	r2, [r7, #4]
 800344a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800344c:	9202      	str	r2, [sp, #8]
 800344e:	9301      	str	r3, [sp, #4]
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	9300      	str	r3, [sp, #0]
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	6a3a      	ldr	r2, [r7, #32]
 8003458:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800345a:	68f8      	ldr	r0, [r7, #12]
 800345c:	f001 fa2a 	bl	80048b4 <xTaskCreateStatic>
 8003460:	4603      	mov	r3, r0
 8003462:	613b      	str	r3, [r7, #16]
 8003464:	e013      	b.n	800348e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d110      	bne.n	800348e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800346c:	6a3b      	ldr	r3, [r7, #32]
 800346e:	b29a      	uxth	r2, r3
 8003470:	f107 0310 	add.w	r3, r7, #16
 8003474:	9301      	str	r3, [sp, #4]
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	68bb      	ldr	r3, [r7, #8]
 800347c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800347e:	68f8      	ldr	r0, [r7, #12]
 8003480:	f001 fa75 	bl	800496e <xTaskCreate>
 8003484:	4603      	mov	r3, r0
 8003486:	2b01      	cmp	r3, #1
 8003488:	d001      	beq.n	800348e <osThreadNew+0x11a>
            hTask = NULL;
 800348a:	2300      	movs	r3, #0
 800348c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800348e:	693b      	ldr	r3, [r7, #16]
}
 8003490:	4618      	mov	r0, r3
 8003492:	3728      	adds	r7, #40	; 0x28
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003498:	b580      	push	{r7, lr}
 800349a:	b084      	sub	sp, #16
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034a0:	f3ef 8305 	mrs	r3, IPSR
 80034a4:	60bb      	str	r3, [r7, #8]
  return(result);
 80034a6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d003      	beq.n	80034b4 <osDelay+0x1c>
    stat = osErrorISR;
 80034ac:	f06f 0305 	mvn.w	r3, #5
 80034b0:	60fb      	str	r3, [r7, #12]
 80034b2:	e007      	b.n	80034c4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80034b4:	2300      	movs	r3, #0
 80034b6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d002      	beq.n	80034c4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f001 fbb0 	bl	8004c24 <vTaskDelay>
    }
  }

  return (stat);
 80034c4:	68fb      	ldr	r3, [r7, #12]
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3710      	adds	r7, #16
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80034ce:	b580      	push	{r7, lr}
 80034d0:	b08a      	sub	sp, #40	; 0x28
 80034d2:	af02      	add	r7, sp, #8
 80034d4:	60f8      	str	r0, [r7, #12]
 80034d6:	60b9      	str	r1, [r7, #8]
 80034d8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80034da:	2300      	movs	r3, #0
 80034dc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034de:	f3ef 8305 	mrs	r3, IPSR
 80034e2:	613b      	str	r3, [r7, #16]
  return(result);
 80034e4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d175      	bne.n	80035d6 <osSemaphoreNew+0x108>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d072      	beq.n	80035d6 <osSemaphoreNew+0x108>
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d86e      	bhi.n	80035d6 <osSemaphoreNew+0x108>
    mem = -1;
 80034f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034fc:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d015      	beq.n	8003530 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d006      	beq.n	800351a <osSemaphoreNew+0x4c>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	2b4f      	cmp	r3, #79	; 0x4f
 8003512:	d902      	bls.n	800351a <osSemaphoreNew+0x4c>
        mem = 1;
 8003514:	2301      	movs	r3, #1
 8003516:	61bb      	str	r3, [r7, #24]
 8003518:	e00c      	b.n	8003534 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d108      	bne.n	8003534 <osSemaphoreNew+0x66>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d104      	bne.n	8003534 <osSemaphoreNew+0x66>
          mem = 0;
 800352a:	2300      	movs	r3, #0
 800352c:	61bb      	str	r3, [r7, #24]
 800352e:	e001      	b.n	8003534 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003530:	2300      	movs	r3, #0
 8003532:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003534:	69bb      	ldr	r3, [r7, #24]
 8003536:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800353a:	d04c      	beq.n	80035d6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2b01      	cmp	r3, #1
 8003540:	d128      	bne.n	8003594 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d10a      	bne.n	800355e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2203      	movs	r2, #3
 800354e:	9200      	str	r2, [sp, #0]
 8003550:	2200      	movs	r2, #0
 8003552:	2100      	movs	r1, #0
 8003554:	2001      	movs	r0, #1
 8003556:	f000 fa07 	bl	8003968 <xQueueGenericCreateStatic>
 800355a:	61f8      	str	r0, [r7, #28]
 800355c:	e005      	b.n	800356a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800355e:	2203      	movs	r2, #3
 8003560:	2100      	movs	r1, #0
 8003562:	2001      	movs	r0, #1
 8003564:	f000 fa78 	bl	8003a58 <xQueueGenericCreate>
 8003568:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d022      	beq.n	80035b6 <osSemaphoreNew+0xe8>
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d01f      	beq.n	80035b6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003576:	2300      	movs	r3, #0
 8003578:	2200      	movs	r2, #0
 800357a:	2100      	movs	r1, #0
 800357c:	69f8      	ldr	r0, [r7, #28]
 800357e:	f000 fb33 	bl	8003be8 <xQueueGenericSend>
 8003582:	4603      	mov	r3, r0
 8003584:	2b01      	cmp	r3, #1
 8003586:	d016      	beq.n	80035b6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003588:	69f8      	ldr	r0, [r7, #28]
 800358a:	f000 ffbf 	bl	800450c <vQueueDelete>
            hSemaphore = NULL;
 800358e:	2300      	movs	r3, #0
 8003590:	61fb      	str	r3, [r7, #28]
 8003592:	e010      	b.n	80035b6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d108      	bne.n	80035ac <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	461a      	mov	r2, r3
 80035a0:	68b9      	ldr	r1, [r7, #8]
 80035a2:	68f8      	ldr	r0, [r7, #12]
 80035a4:	f000 fab5 	bl	8003b12 <xQueueCreateCountingSemaphoreStatic>
 80035a8:	61f8      	str	r0, [r7, #28]
 80035aa:	e004      	b.n	80035b6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	68f8      	ldr	r0, [r7, #12]
 80035b0:	f000 fae6 	bl	8003b80 <xQueueCreateCountingSemaphore>
 80035b4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00c      	beq.n	80035d6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <osSemaphoreNew+0xfc>
          name = attr->name;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	617b      	str	r3, [r7, #20]
 80035c8:	e001      	b.n	80035ce <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80035ca:	2300      	movs	r3, #0
 80035cc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80035ce:	6979      	ldr	r1, [r7, #20]
 80035d0:	69f8      	ldr	r0, [r7, #28]
 80035d2:	f001 f8e7 	bl	80047a4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80035d6:	69fb      	ldr	r3, [r7, #28]
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3720      	adds	r7, #32
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}

080035e0 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b08a      	sub	sp, #40	; 0x28
 80035e4:	af02      	add	r7, sp, #8
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80035ec:	2300      	movs	r3, #0
 80035ee:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035f0:	f3ef 8305 	mrs	r3, IPSR
 80035f4:	613b      	str	r3, [r7, #16]
  return(result);
 80035f6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d15f      	bne.n	80036bc <osMessageQueueNew+0xdc>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d05c      	beq.n	80036bc <osMessageQueueNew+0xdc>
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d059      	beq.n	80036bc <osMessageQueueNew+0xdc>
    mem = -1;
 8003608:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800360c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d029      	beq.n	8003668 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	2b00      	cmp	r3, #0
 800361a:	d012      	beq.n	8003642 <osMessageQueueNew+0x62>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	2b4f      	cmp	r3, #79	; 0x4f
 8003622:	d90e      	bls.n	8003642 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003628:	2b00      	cmp	r3, #0
 800362a:	d00a      	beq.n	8003642 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	695a      	ldr	r2, [r3, #20]
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	68b9      	ldr	r1, [r7, #8]
 8003634:	fb01 f303 	mul.w	r3, r1, r3
 8003638:	429a      	cmp	r2, r3
 800363a:	d302      	bcc.n	8003642 <osMessageQueueNew+0x62>
        mem = 1;
 800363c:	2301      	movs	r3, #1
 800363e:	61bb      	str	r3, [r7, #24]
 8003640:	e014      	b.n	800366c <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d110      	bne.n	800366c <osMessageQueueNew+0x8c>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10c      	bne.n	800366c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003656:	2b00      	cmp	r3, #0
 8003658:	d108      	bne.n	800366c <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	695b      	ldr	r3, [r3, #20]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d104      	bne.n	800366c <osMessageQueueNew+0x8c>
          mem = 0;
 8003662:	2300      	movs	r3, #0
 8003664:	61bb      	str	r3, [r7, #24]
 8003666:	e001      	b.n	800366c <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8003668:	2300      	movs	r3, #0
 800366a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d10b      	bne.n	800368a <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	691a      	ldr	r2, [r3, #16]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2100      	movs	r1, #0
 800367c:	9100      	str	r1, [sp, #0]
 800367e:	68b9      	ldr	r1, [r7, #8]
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f000 f971 	bl	8003968 <xQueueGenericCreateStatic>
 8003686:	61f8      	str	r0, [r7, #28]
 8003688:	e008      	b.n	800369c <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d105      	bne.n	800369c <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8003690:	2200      	movs	r2, #0
 8003692:	68b9      	ldr	r1, [r7, #8]
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 f9df 	bl	8003a58 <xQueueGenericCreate>
 800369a:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800369c:	69fb      	ldr	r3, [r7, #28]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00c      	beq.n	80036bc <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <osMessageQueueNew+0xd0>
        name = attr->name;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	617b      	str	r3, [r7, #20]
 80036ae:	e001      	b.n	80036b4 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80036b4:	6979      	ldr	r1, [r7, #20]
 80036b6:	69f8      	ldr	r0, [r7, #28]
 80036b8:	f001 f874 	bl	80047a4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80036bc:	69fb      	ldr	r3, [r7, #28]
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3720      	adds	r7, #32
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	4a07      	ldr	r2, [pc, #28]	; (80036f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80036d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	4a06      	ldr	r2, [pc, #24]	; (80036f8 <vApplicationGetIdleTaskMemory+0x30>)
 80036de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2280      	movs	r2, #128	; 0x80
 80036e4:	601a      	str	r2, [r3, #0]
}
 80036e6:	bf00      	nop
 80036e8:	3714      	adds	r7, #20
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr
 80036f2:	bf00      	nop
 80036f4:	200000e8 	.word	0x200000e8
 80036f8:	200001a4 	.word	0x200001a4

080036fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80036fc:	b480      	push	{r7}
 80036fe:	b085      	sub	sp, #20
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	4a07      	ldr	r2, [pc, #28]	; (8003728 <vApplicationGetTimerTaskMemory+0x2c>)
 800370c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	4a06      	ldr	r2, [pc, #24]	; (800372c <vApplicationGetTimerTaskMemory+0x30>)
 8003712:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f44f 7280 	mov.w	r2, #256	; 0x100
 800371a:	601a      	str	r2, [r3, #0]
}
 800371c:	bf00      	nop
 800371e:	3714      	adds	r7, #20
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	200003a4 	.word	0x200003a4
 800372c:	20000460 	.word	0x20000460

08003730 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	f103 0208 	add.w	r2, r3, #8
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003748:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f103 0208 	add.w	r2, r3, #8
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f103 0208 	add.w	r2, r3, #8
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr

08003770 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800377e:	bf00      	nop
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800378a:	b480      	push	{r7}
 800378c:	b085      	sub	sp, #20
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	689a      	ldr	r2, [r3, #8]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	683a      	ldr	r2, [r7, #0]
 80037b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	1c5a      	adds	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	601a      	str	r2, [r3, #0]
}
 80037c6:	bf00      	nop
 80037c8:	3714      	adds	r7, #20
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr

080037d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037d2:	b480      	push	{r7}
 80037d4:	b085      	sub	sp, #20
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	6078      	str	r0, [r7, #4]
 80037da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037e8:	d103      	bne.n	80037f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	e00c      	b.n	800380c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3308      	adds	r3, #8
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	e002      	b.n	8003800 <vListInsert+0x2e>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	429a      	cmp	r2, r3
 800380a:	d2f6      	bcs.n	80037fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	685a      	ldr	r2, [r3, #4]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	683a      	ldr	r2, [r7, #0]
 800381a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	68fa      	ldr	r2, [r7, #12]
 8003820:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	687a      	ldr	r2, [r7, #4]
 800382c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	1c5a      	adds	r2, r3, #1
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	601a      	str	r2, [r3, #0]
}
 8003838:	bf00      	nop
 800383a:	3714      	adds	r7, #20
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	691b      	ldr	r3, [r3, #16]
 8003850:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6892      	ldr	r2, [r2, #8]
 800385a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	6852      	ldr	r2, [r2, #4]
 8003864:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	429a      	cmp	r2, r3
 800386e:	d103      	bne.n	8003878 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	689a      	ldr	r2, [r3, #8]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	1e5a      	subs	r2, r3, #1
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3714      	adds	r7, #20
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d10a      	bne.n	80038c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b0:	f383 8811 	msr	BASEPRI, r3
 80038b4:	f3bf 8f6f 	isb	sy
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80038be:	bf00      	nop
 80038c0:	e7fe      	b.n	80038c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80038c2:	f002 fc97 	bl	80061f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038ce:	68f9      	ldr	r1, [r7, #12]
 80038d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038d2:	fb01 f303 	mul.w	r3, r1, r3
 80038d6:	441a      	add	r2, r3
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	2200      	movs	r2, #0
 80038e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f2:	3b01      	subs	r3, #1
 80038f4:	68f9      	ldr	r1, [r7, #12]
 80038f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038f8:	fb01 f303 	mul.w	r3, r1, r3
 80038fc:	441a      	add	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	22ff      	movs	r2, #255	; 0xff
 8003906:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	22ff      	movs	r2, #255	; 0xff
 800390e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d114      	bne.n	8003942 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	691b      	ldr	r3, [r3, #16]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d01a      	beq.n	8003956 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	3310      	adds	r3, #16
 8003924:	4618      	mov	r0, r3
 8003926:	f001 fc4b 	bl	80051c0 <xTaskRemoveFromEventList>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d012      	beq.n	8003956 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003930:	4b0c      	ldr	r3, [pc, #48]	; (8003964 <xQueueGenericReset+0xcc>)
 8003932:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	f3bf 8f4f 	dsb	sy
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	e009      	b.n	8003956 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	3310      	adds	r3, #16
 8003946:	4618      	mov	r0, r3
 8003948:	f7ff fef2 	bl	8003730 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	3324      	adds	r3, #36	; 0x24
 8003950:	4618      	mov	r0, r3
 8003952:	f7ff feed 	bl	8003730 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003956:	f002 fc7d 	bl	8006254 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800395a:	2301      	movs	r3, #1
}
 800395c:	4618      	mov	r0, r3
 800395e:	3710      	adds	r7, #16
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}
 8003964:	e000ed04 	.word	0xe000ed04

08003968 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003968:	b580      	push	{r7, lr}
 800396a:	b08e      	sub	sp, #56	; 0x38
 800396c:	af02      	add	r7, sp, #8
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
 8003974:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d10a      	bne.n	8003992 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800397c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003980:	f383 8811 	msr	BASEPRI, r3
 8003984:	f3bf 8f6f 	isb	sy
 8003988:	f3bf 8f4f 	dsb	sy
 800398c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800398e:	bf00      	nop
 8003990:	e7fe      	b.n	8003990 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d10a      	bne.n	80039ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800399c:	f383 8811 	msr	BASEPRI, r3
 80039a0:	f3bf 8f6f 	isb	sy
 80039a4:	f3bf 8f4f 	dsb	sy
 80039a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039aa:	bf00      	nop
 80039ac:	e7fe      	b.n	80039ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d002      	beq.n	80039ba <xQueueGenericCreateStatic+0x52>
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d001      	beq.n	80039be <xQueueGenericCreateStatic+0x56>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <xQueueGenericCreateStatic+0x58>
 80039be:	2300      	movs	r3, #0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d10a      	bne.n	80039da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80039c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c8:	f383 8811 	msr	BASEPRI, r3
 80039cc:	f3bf 8f6f 	isb	sy
 80039d0:	f3bf 8f4f 	dsb	sy
 80039d4:	623b      	str	r3, [r7, #32]
}
 80039d6:	bf00      	nop
 80039d8:	e7fe      	b.n	80039d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d102      	bne.n	80039e6 <xQueueGenericCreateStatic+0x7e>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <xQueueGenericCreateStatic+0x82>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <xQueueGenericCreateStatic+0x84>
 80039ea:	2300      	movs	r3, #0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d10a      	bne.n	8003a06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80039f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	61fb      	str	r3, [r7, #28]
}
 8003a02:	bf00      	nop
 8003a04:	e7fe      	b.n	8003a04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a06:	2350      	movs	r3, #80	; 0x50
 8003a08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	2b50      	cmp	r3, #80	; 0x50
 8003a0e:	d00a      	beq.n	8003a26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a14:	f383 8811 	msr	BASEPRI, r3
 8003a18:	f3bf 8f6f 	isb	sy
 8003a1c:	f3bf 8f4f 	dsb	sy
 8003a20:	61bb      	str	r3, [r7, #24]
}
 8003a22:	bf00      	nop
 8003a24:	e7fe      	b.n	8003a24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003a26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00d      	beq.n	8003a4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a34:	2201      	movs	r2, #1
 8003a36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a40:	9300      	str	r3, [sp, #0]
 8003a42:	4613      	mov	r3, r2
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	68b9      	ldr	r1, [r7, #8]
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 f83f 	bl	8003acc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3730      	adds	r7, #48	; 0x30
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b08a      	sub	sp, #40	; 0x28
 8003a5c:	af02      	add	r7, sp, #8
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	4613      	mov	r3, r2
 8003a64:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d10a      	bne.n	8003a82 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003a6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a70:	f383 8811 	msr	BASEPRI, r3
 8003a74:	f3bf 8f6f 	isb	sy
 8003a78:	f3bf 8f4f 	dsb	sy
 8003a7c:	613b      	str	r3, [r7, #16]
}
 8003a7e:	bf00      	nop
 8003a80:	e7fe      	b.n	8003a80 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	68ba      	ldr	r2, [r7, #8]
 8003a86:	fb02 f303 	mul.w	r3, r2, r3
 8003a8a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	3350      	adds	r3, #80	; 0x50
 8003a90:	4618      	mov	r0, r3
 8003a92:	f002 fcd1 	bl	8006438 <pvPortMalloc>
 8003a96:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d011      	beq.n	8003ac2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	3350      	adds	r3, #80	; 0x50
 8003aa6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003aa8:	69bb      	ldr	r3, [r7, #24]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ab0:	79fa      	ldrb	r2, [r7, #7]
 8003ab2:	69bb      	ldr	r3, [r7, #24]
 8003ab4:	9300      	str	r3, [sp, #0]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	68b9      	ldr	r1, [r7, #8]
 8003abc:	68f8      	ldr	r0, [r7, #12]
 8003abe:	f000 f805 	bl	8003acc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ac2:	69bb      	ldr	r3, [r7, #24]
	}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3720      	adds	r7, #32
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b084      	sub	sp, #16
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	607a      	str	r2, [r7, #4]
 8003ad8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d103      	bne.n	8003ae8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	601a      	str	r2, [r3, #0]
 8003ae6:	e002      	b.n	8003aee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003afa:	2101      	movs	r1, #1
 8003afc:	69b8      	ldr	r0, [r7, #24]
 8003afe:	f7ff fecb 	bl	8003898 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003b02:	69bb      	ldr	r3, [r7, #24]
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b0a:	bf00      	nop
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b08a      	sub	sp, #40	; 0x28
 8003b16:	af02      	add	r7, sp, #8
 8003b18:	60f8      	str	r0, [r7, #12]
 8003b1a:	60b9      	str	r1, [r7, #8]
 8003b1c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d10a      	bne.n	8003b3a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8003b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b28:	f383 8811 	msr	BASEPRI, r3
 8003b2c:	f3bf 8f6f 	isb	sy
 8003b30:	f3bf 8f4f 	dsb	sy
 8003b34:	61bb      	str	r3, [r7, #24]
}
 8003b36:	bf00      	nop
 8003b38:	e7fe      	b.n	8003b38 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d90a      	bls.n	8003b58 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8003b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	617b      	str	r3, [r7, #20]
}
 8003b54:	bf00      	nop
 8003b56:	e7fe      	b.n	8003b56 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003b58:	2302      	movs	r3, #2
 8003b5a:	9300      	str	r3, [sp, #0]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	2100      	movs	r1, #0
 8003b62:	68f8      	ldr	r0, [r7, #12]
 8003b64:	f7ff ff00 	bl	8003968 <xQueueGenericCreateStatic>
 8003b68:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003b6a:	69fb      	ldr	r3, [r7, #28]
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	68ba      	ldr	r2, [r7, #8]
 8003b74:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003b76:	69fb      	ldr	r3, [r7, #28]
	}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	3720      	adds	r7, #32
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b086      	sub	sp, #24
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
 8003b88:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d10a      	bne.n	8003ba6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	613b      	str	r3, [r7, #16]
}
 8003ba2:	bf00      	nop
 8003ba4:	e7fe      	b.n	8003ba4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003ba6:	683a      	ldr	r2, [r7, #0]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d90a      	bls.n	8003bc4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8003bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb2:	f383 8811 	msr	BASEPRI, r3
 8003bb6:	f3bf 8f6f 	isb	sy
 8003bba:	f3bf 8f4f 	dsb	sy
 8003bbe:	60fb      	str	r3, [r7, #12]
}
 8003bc0:	bf00      	nop
 8003bc2:	e7fe      	b.n	8003bc2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	2100      	movs	r1, #0
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f7ff ff45 	bl	8003a58 <xQueueGenericCreate>
 8003bce:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d002      	beq.n	8003bdc <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003bdc:	697b      	ldr	r3, [r7, #20]
	}
 8003bde:	4618      	mov	r0, r3
 8003be0:	3718      	adds	r7, #24
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bd80      	pop	{r7, pc}
	...

08003be8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08e      	sub	sp, #56	; 0x38
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
 8003bf4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003bf6:	2300      	movs	r3, #0
 8003bf8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10a      	bne.n	8003c1a <xQueueGenericSend+0x32>
	__asm volatile
 8003c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c08:	f383 8811 	msr	BASEPRI, r3
 8003c0c:	f3bf 8f6f 	isb	sy
 8003c10:	f3bf 8f4f 	dsb	sy
 8003c14:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003c16:	bf00      	nop
 8003c18:	e7fe      	b.n	8003c18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d103      	bne.n	8003c28 <xQueueGenericSend+0x40>
 8003c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d101      	bne.n	8003c2c <xQueueGenericSend+0x44>
 8003c28:	2301      	movs	r3, #1
 8003c2a:	e000      	b.n	8003c2e <xQueueGenericSend+0x46>
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d10a      	bne.n	8003c48 <xQueueGenericSend+0x60>
	__asm volatile
 8003c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c36:	f383 8811 	msr	BASEPRI, r3
 8003c3a:	f3bf 8f6f 	isb	sy
 8003c3e:	f3bf 8f4f 	dsb	sy
 8003c42:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c44:	bf00      	nop
 8003c46:	e7fe      	b.n	8003c46 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d103      	bne.n	8003c56 <xQueueGenericSend+0x6e>
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d101      	bne.n	8003c5a <xQueueGenericSend+0x72>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <xQueueGenericSend+0x74>
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10a      	bne.n	8003c76 <xQueueGenericSend+0x8e>
	__asm volatile
 8003c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	623b      	str	r3, [r7, #32]
}
 8003c72:	bf00      	nop
 8003c74:	e7fe      	b.n	8003c74 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003c76:	f001 fc65 	bl	8005544 <xTaskGetSchedulerState>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d102      	bne.n	8003c86 <xQueueGenericSend+0x9e>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d101      	bne.n	8003c8a <xQueueGenericSend+0xa2>
 8003c86:	2301      	movs	r3, #1
 8003c88:	e000      	b.n	8003c8c <xQueueGenericSend+0xa4>
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d10a      	bne.n	8003ca6 <xQueueGenericSend+0xbe>
	__asm volatile
 8003c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c94:	f383 8811 	msr	BASEPRI, r3
 8003c98:	f3bf 8f6f 	isb	sy
 8003c9c:	f3bf 8f4f 	dsb	sy
 8003ca0:	61fb      	str	r3, [r7, #28]
}
 8003ca2:	bf00      	nop
 8003ca4:	e7fe      	b.n	8003ca4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ca6:	f002 faa5 	bl	80061f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d302      	bcc.n	8003cbc <xQueueGenericSend+0xd4>
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	2b02      	cmp	r3, #2
 8003cba:	d129      	bne.n	8003d10 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cc2:	f000 fc5e 	bl	8004582 <prvCopyDataToQueue>
 8003cc6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d010      	beq.n	8003cf2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd2:	3324      	adds	r3, #36	; 0x24
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f001 fa73 	bl	80051c0 <xTaskRemoveFromEventList>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d013      	beq.n	8003d08 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ce0:	4b3f      	ldr	r3, [pc, #252]	; (8003de0 <xQueueGenericSend+0x1f8>)
 8003ce2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ce6:	601a      	str	r2, [r3, #0]
 8003ce8:	f3bf 8f4f 	dsb	sy
 8003cec:	f3bf 8f6f 	isb	sy
 8003cf0:	e00a      	b.n	8003d08 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d007      	beq.n	8003d08 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003cf8:	4b39      	ldr	r3, [pc, #228]	; (8003de0 <xQueueGenericSend+0x1f8>)
 8003cfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003cfe:	601a      	str	r2, [r3, #0]
 8003d00:	f3bf 8f4f 	dsb	sy
 8003d04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d08:	f002 faa4 	bl	8006254 <vPortExitCritical>
				return pdPASS;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e063      	b.n	8003dd8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d103      	bne.n	8003d1e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d16:	f002 fa9d 	bl	8006254 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	e05c      	b.n	8003dd8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d106      	bne.n	8003d32 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d24:	f107 0314 	add.w	r3, r7, #20
 8003d28:	4618      	mov	r0, r3
 8003d2a:	f001 faad 	bl	8005288 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d32:	f002 fa8f 	bl	8006254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d36:	f001 f819 	bl	8004d6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d3a:	f002 fa5b 	bl	80061f4 <vPortEnterCritical>
 8003d3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d40:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003d44:	b25b      	sxtb	r3, r3
 8003d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d4a:	d103      	bne.n	8003d54 <xQueueGenericSend+0x16c>
 8003d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d4e:	2200      	movs	r2, #0
 8003d50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d56:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d5a:	b25b      	sxtb	r3, r3
 8003d5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d60:	d103      	bne.n	8003d6a <xQueueGenericSend+0x182>
 8003d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d64:	2200      	movs	r2, #0
 8003d66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003d6a:	f002 fa73 	bl	8006254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d6e:	1d3a      	adds	r2, r7, #4
 8003d70:	f107 0314 	add.w	r3, r7, #20
 8003d74:	4611      	mov	r1, r2
 8003d76:	4618      	mov	r0, r3
 8003d78:	f001 fa9c 	bl	80052b4 <xTaskCheckForTimeOut>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d124      	bne.n	8003dcc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003d82:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d84:	f000 fcf5 	bl	8004772 <prvIsQueueFull>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d018      	beq.n	8003dc0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d90:	3310      	adds	r3, #16
 8003d92:	687a      	ldr	r2, [r7, #4]
 8003d94:	4611      	mov	r1, r2
 8003d96:	4618      	mov	r0, r3
 8003d98:	f001 f9c2 	bl	8005120 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d9c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d9e:	f000 fc80 	bl	80046a2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003da2:	f000 fff1 	bl	8004d88 <xTaskResumeAll>
 8003da6:	4603      	mov	r3, r0
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	f47f af7c 	bne.w	8003ca6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003dae:	4b0c      	ldr	r3, [pc, #48]	; (8003de0 <xQueueGenericSend+0x1f8>)
 8003db0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003db4:	601a      	str	r2, [r3, #0]
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	f3bf 8f6f 	isb	sy
 8003dbe:	e772      	b.n	8003ca6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003dc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dc2:	f000 fc6e 	bl	80046a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003dc6:	f000 ffdf 	bl	8004d88 <xTaskResumeAll>
 8003dca:	e76c      	b.n	8003ca6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003dcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dce:	f000 fc68 	bl	80046a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003dd2:	f000 ffd9 	bl	8004d88 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003dd6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3738      	adds	r7, #56	; 0x38
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	e000ed04 	.word	0xe000ed04

08003de4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b090      	sub	sp, #64	; 0x40
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
 8003df0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d10a      	bne.n	8003e12 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003dfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e00:	f383 8811 	msr	BASEPRI, r3
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e0e:	bf00      	nop
 8003e10:	e7fe      	b.n	8003e10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d103      	bne.n	8003e20 <xQueueGenericSendFromISR+0x3c>
 8003e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d101      	bne.n	8003e24 <xQueueGenericSendFromISR+0x40>
 8003e20:	2301      	movs	r3, #1
 8003e22:	e000      	b.n	8003e26 <xQueueGenericSendFromISR+0x42>
 8003e24:	2300      	movs	r3, #0
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d10a      	bne.n	8003e40 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e2e:	f383 8811 	msr	BASEPRI, r3
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	f3bf 8f4f 	dsb	sy
 8003e3a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e3c:	bf00      	nop
 8003e3e:	e7fe      	b.n	8003e3e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d103      	bne.n	8003e4e <xQueueGenericSendFromISR+0x6a>
 8003e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d101      	bne.n	8003e52 <xQueueGenericSendFromISR+0x6e>
 8003e4e:	2301      	movs	r3, #1
 8003e50:	e000      	b.n	8003e54 <xQueueGenericSendFromISR+0x70>
 8003e52:	2300      	movs	r3, #0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d10a      	bne.n	8003e6e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003e58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5c:	f383 8811 	msr	BASEPRI, r3
 8003e60:	f3bf 8f6f 	isb	sy
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	623b      	str	r3, [r7, #32]
}
 8003e6a:	bf00      	nop
 8003e6c:	e7fe      	b.n	8003e6c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003e6e:	f002 faa3 	bl	80063b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003e72:	f3ef 8211 	mrs	r2, BASEPRI
 8003e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7a:	f383 8811 	msr	BASEPRI, r3
 8003e7e:	f3bf 8f6f 	isb	sy
 8003e82:	f3bf 8f4f 	dsb	sy
 8003e86:	61fa      	str	r2, [r7, #28]
 8003e88:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003e8a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003e8c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d302      	bcc.n	8003ea0 <xQueueGenericSendFromISR+0xbc>
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	2b02      	cmp	r3, #2
 8003e9e:	d12f      	bne.n	8003f00 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003ea6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eae:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003eb0:	683a      	ldr	r2, [r7, #0]
 8003eb2:	68b9      	ldr	r1, [r7, #8]
 8003eb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003eb6:	f000 fb64 	bl	8004582 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003eba:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ec2:	d112      	bne.n	8003eea <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d016      	beq.n	8003efa <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ece:	3324      	adds	r3, #36	; 0x24
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f001 f975 	bl	80051c0 <xTaskRemoveFromEventList>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d00e      	beq.n	8003efa <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00b      	beq.n	8003efa <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	e007      	b.n	8003efa <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003eea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003eee:	3301      	adds	r3, #1
 8003ef0:	b2db      	uxtb	r3, r3
 8003ef2:	b25a      	sxtb	r2, r3
 8003ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003efa:	2301      	movs	r3, #1
 8003efc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003efe:	e001      	b.n	8003f04 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003f00:	2300      	movs	r3, #0
 8003f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f06:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003f0e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003f10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3740      	adds	r7, #64	; 0x40
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b08e      	sub	sp, #56	; 0x38
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10a      	bne.n	8003f44 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8003f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f32:	f383 8811 	msr	BASEPRI, r3
 8003f36:	f3bf 8f6f 	isb	sy
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	623b      	str	r3, [r7, #32]
}
 8003f40:	bf00      	nop
 8003f42:	e7fe      	b.n	8003f42 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00a      	beq.n	8003f62 <xQueueGiveFromISR+0x48>
	__asm volatile
 8003f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f50:	f383 8811 	msr	BASEPRI, r3
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	61fb      	str	r3, [r7, #28]
}
 8003f5e:	bf00      	nop
 8003f60:	e7fe      	b.n	8003f60 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d103      	bne.n	8003f72 <xQueueGiveFromISR+0x58>
 8003f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d101      	bne.n	8003f76 <xQueueGiveFromISR+0x5c>
 8003f72:	2301      	movs	r3, #1
 8003f74:	e000      	b.n	8003f78 <xQueueGiveFromISR+0x5e>
 8003f76:	2300      	movs	r3, #0
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10a      	bne.n	8003f92 <xQueueGiveFromISR+0x78>
	__asm volatile
 8003f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	61bb      	str	r3, [r7, #24]
}
 8003f8e:	bf00      	nop
 8003f90:	e7fe      	b.n	8003f90 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f92:	f002 fa11 	bl	80063b8 <vPortValidateInterruptPriority>
	__asm volatile
 8003f96:	f3ef 8211 	mrs	r2, BASEPRI
 8003f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f9e:	f383 8811 	msr	BASEPRI, r3
 8003fa2:	f3bf 8f6f 	isb	sy
 8003fa6:	f3bf 8f4f 	dsb	sy
 8003faa:	617a      	str	r2, [r7, #20]
 8003fac:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8003fae:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d22b      	bcs.n	800401a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fc4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fc8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003fcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003fd4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fdc:	d112      	bne.n	8004004 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d016      	beq.n	8004014 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe8:	3324      	adds	r3, #36	; 0x24
 8003fea:	4618      	mov	r0, r3
 8003fec:	f001 f8e8 	bl	80051c0 <xTaskRemoveFromEventList>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d00e      	beq.n	8004014 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d00b      	beq.n	8004014 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	2201      	movs	r2, #1
 8004000:	601a      	str	r2, [r3, #0]
 8004002:	e007      	b.n	8004014 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004004:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004008:	3301      	adds	r3, #1
 800400a:	b2db      	uxtb	r3, r3
 800400c:	b25a      	sxtb	r2, r3
 800400e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004010:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004014:	2301      	movs	r3, #1
 8004016:	637b      	str	r3, [r7, #52]	; 0x34
 8004018:	e001      	b.n	800401e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800401a:	2300      	movs	r3, #0
 800401c:	637b      	str	r3, [r7, #52]	; 0x34
 800401e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004020:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f383 8811 	msr	BASEPRI, r3
}
 8004028:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800402a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800402c:	4618      	mov	r0, r3
 800402e:	3738      	adds	r7, #56	; 0x38
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08c      	sub	sp, #48	; 0x30
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004040:	2300      	movs	r3, #0
 8004042:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <xQueueReceive+0x30>
	__asm volatile
 800404e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	623b      	str	r3, [r7, #32]
}
 8004060:	bf00      	nop
 8004062:	e7fe      	b.n	8004062 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d103      	bne.n	8004072 <xQueueReceive+0x3e>
 800406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <xQueueReceive+0x42>
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <xQueueReceive+0x44>
 8004076:	2300      	movs	r3, #0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10a      	bne.n	8004092 <xQueueReceive+0x5e>
	__asm volatile
 800407c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004080:	f383 8811 	msr	BASEPRI, r3
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	61fb      	str	r3, [r7, #28]
}
 800408e:	bf00      	nop
 8004090:	e7fe      	b.n	8004090 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004092:	f001 fa57 	bl	8005544 <xTaskGetSchedulerState>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d102      	bne.n	80040a2 <xQueueReceive+0x6e>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <xQueueReceive+0x72>
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <xQueueReceive+0x74>
 80040a6:	2300      	movs	r3, #0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10a      	bne.n	80040c2 <xQueueReceive+0x8e>
	__asm volatile
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	61bb      	str	r3, [r7, #24]
}
 80040be:	bf00      	nop
 80040c0:	e7fe      	b.n	80040c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040c2:	f002 f897 	bl	80061f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d01f      	beq.n	8004112 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040d2:	68b9      	ldr	r1, [r7, #8]
 80040d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040d6:	f000 fabe 	bl	8004656 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	1e5a      	subs	r2, r3, #1
 80040de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00f      	beq.n	800410a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ec:	3310      	adds	r3, #16
 80040ee:	4618      	mov	r0, r3
 80040f0:	f001 f866 	bl	80051c0 <xTaskRemoveFromEventList>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d007      	beq.n	800410a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80040fa:	4b3d      	ldr	r3, [pc, #244]	; (80041f0 <xQueueReceive+0x1bc>)
 80040fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	f3bf 8f4f 	dsb	sy
 8004106:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800410a:	f002 f8a3 	bl	8006254 <vPortExitCritical>
				return pdPASS;
 800410e:	2301      	movs	r3, #1
 8004110:	e069      	b.n	80041e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d103      	bne.n	8004120 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004118:	f002 f89c 	bl	8006254 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800411c:	2300      	movs	r3, #0
 800411e:	e062      	b.n	80041e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004122:	2b00      	cmp	r3, #0
 8004124:	d106      	bne.n	8004134 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004126:	f107 0310 	add.w	r3, r7, #16
 800412a:	4618      	mov	r0, r3
 800412c:	f001 f8ac 	bl	8005288 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004130:	2301      	movs	r3, #1
 8004132:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004134:	f002 f88e 	bl	8006254 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004138:	f000 fe18 	bl	8004d6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800413c:	f002 f85a 	bl	80061f4 <vPortEnterCritical>
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004146:	b25b      	sxtb	r3, r3
 8004148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800414c:	d103      	bne.n	8004156 <xQueueReceive+0x122>
 800414e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004158:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800415c:	b25b      	sxtb	r3, r3
 800415e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004162:	d103      	bne.n	800416c <xQueueReceive+0x138>
 8004164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800416c:	f002 f872 	bl	8006254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004170:	1d3a      	adds	r2, r7, #4
 8004172:	f107 0310 	add.w	r3, r7, #16
 8004176:	4611      	mov	r1, r2
 8004178:	4618      	mov	r0, r3
 800417a:	f001 f89b 	bl	80052b4 <xTaskCheckForTimeOut>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d123      	bne.n	80041cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004186:	f000 fade 	bl	8004746 <prvIsQueueEmpty>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d017      	beq.n	80041c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004192:	3324      	adds	r3, #36	; 0x24
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	4611      	mov	r1, r2
 8004198:	4618      	mov	r0, r3
 800419a:	f000 ffc1 	bl	8005120 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800419e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041a0:	f000 fa7f 	bl	80046a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80041a4:	f000 fdf0 	bl	8004d88 <xTaskResumeAll>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d189      	bne.n	80040c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80041ae:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <xQueueReceive+0x1bc>)
 80041b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	e780      	b.n	80040c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80041c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041c2:	f000 fa6e 	bl	80046a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041c6:	f000 fddf 	bl	8004d88 <xTaskResumeAll>
 80041ca:	e77a      	b.n	80040c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80041cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041ce:	f000 fa68 	bl	80046a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041d2:	f000 fdd9 	bl	8004d88 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041d8:	f000 fab5 	bl	8004746 <prvIsQueueEmpty>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f43f af6f 	beq.w	80040c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80041e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3730      	adds	r7, #48	; 0x30
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	e000ed04 	.word	0xe000ed04

080041f4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b08e      	sub	sp, #56	; 0x38
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80041fe:	2300      	movs	r3, #0
 8004200:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004206:	2300      	movs	r3, #0
 8004208:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800420a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10a      	bne.n	8004226 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004210:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	623b      	str	r3, [r7, #32]
}
 8004222:	bf00      	nop
 8004224:	e7fe      	b.n	8004224 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800422e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	61fb      	str	r3, [r7, #28]
}
 8004240:	bf00      	nop
 8004242:	e7fe      	b.n	8004242 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004244:	f001 f97e 	bl	8005544 <xTaskGetSchedulerState>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d102      	bne.n	8004254 <xQueueSemaphoreTake+0x60>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <xQueueSemaphoreTake+0x64>
 8004254:	2301      	movs	r3, #1
 8004256:	e000      	b.n	800425a <xQueueSemaphoreTake+0x66>
 8004258:	2300      	movs	r3, #0
 800425a:	2b00      	cmp	r3, #0
 800425c:	d10a      	bne.n	8004274 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	61bb      	str	r3, [r7, #24]
}
 8004270:	bf00      	nop
 8004272:	e7fe      	b.n	8004272 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004274:	f001 ffbe 	bl	80061f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800427a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800427c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800427e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004280:	2b00      	cmp	r3, #0
 8004282:	d024      	beq.n	80042ce <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004286:	1e5a      	subs	r2, r3, #1
 8004288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800428c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d104      	bne.n	800429e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004294:	f001 facc 	bl	8005830 <pvTaskIncrementMutexHeldCount>
 8004298:	4602      	mov	r2, r0
 800429a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800429e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00f      	beq.n	80042c6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a8:	3310      	adds	r3, #16
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 ff88 	bl	80051c0 <xTaskRemoveFromEventList>
 80042b0:	4603      	mov	r3, r0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d007      	beq.n	80042c6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80042b6:	4b54      	ldr	r3, [pc, #336]	; (8004408 <xQueueSemaphoreTake+0x214>)
 80042b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	f3bf 8f4f 	dsb	sy
 80042c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80042c6:	f001 ffc5 	bl	8006254 <vPortExitCritical>
				return pdPASS;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e097      	b.n	80043fe <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d111      	bne.n	80042f8 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80042d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00a      	beq.n	80042f0 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80042da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042de:	f383 8811 	msr	BASEPRI, r3
 80042e2:	f3bf 8f6f 	isb	sy
 80042e6:	f3bf 8f4f 	dsb	sy
 80042ea:	617b      	str	r3, [r7, #20]
}
 80042ec:	bf00      	nop
 80042ee:	e7fe      	b.n	80042ee <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80042f0:	f001 ffb0 	bl	8006254 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80042f4:	2300      	movs	r3, #0
 80042f6:	e082      	b.n	80043fe <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d106      	bne.n	800430c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042fe:	f107 030c 	add.w	r3, r7, #12
 8004302:	4618      	mov	r0, r3
 8004304:	f000 ffc0 	bl	8005288 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004308:	2301      	movs	r3, #1
 800430a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800430c:	f001 ffa2 	bl	8006254 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004310:	f000 fd2c 	bl	8004d6c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004314:	f001 ff6e 	bl	80061f4 <vPortEnterCritical>
 8004318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800431a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800431e:	b25b      	sxtb	r3, r3
 8004320:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004324:	d103      	bne.n	800432e <xQueueSemaphoreTake+0x13a>
 8004326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004328:	2200      	movs	r2, #0
 800432a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004330:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004334:	b25b      	sxtb	r3, r3
 8004336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800433a:	d103      	bne.n	8004344 <xQueueSemaphoreTake+0x150>
 800433c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800433e:	2200      	movs	r2, #0
 8004340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004344:	f001 ff86 	bl	8006254 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004348:	463a      	mov	r2, r7
 800434a:	f107 030c 	add.w	r3, r7, #12
 800434e:	4611      	mov	r1, r2
 8004350:	4618      	mov	r0, r3
 8004352:	f000 ffaf 	bl	80052b4 <xTaskCheckForTimeOut>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d132      	bne.n	80043c2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800435c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800435e:	f000 f9f2 	bl	8004746 <prvIsQueueEmpty>
 8004362:	4603      	mov	r3, r0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d026      	beq.n	80043b6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d109      	bne.n	8004384 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004370:	f001 ff40 	bl	80061f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	4618      	mov	r0, r3
 800437a:	f001 f901 	bl	8005580 <xTaskPriorityInherit>
 800437e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004380:	f001 ff68 	bl	8006254 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004386:	3324      	adds	r3, #36	; 0x24
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	4611      	mov	r1, r2
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fec7 	bl	8005120 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004392:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004394:	f000 f985 	bl	80046a2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004398:	f000 fcf6 	bl	8004d88 <xTaskResumeAll>
 800439c:	4603      	mov	r3, r0
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f47f af68 	bne.w	8004274 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80043a4:	4b18      	ldr	r3, [pc, #96]	; (8004408 <xQueueSemaphoreTake+0x214>)
 80043a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043aa:	601a      	str	r2, [r3, #0]
 80043ac:	f3bf 8f4f 	dsb	sy
 80043b0:	f3bf 8f6f 	isb	sy
 80043b4:	e75e      	b.n	8004274 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80043b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043b8:	f000 f973 	bl	80046a2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043bc:	f000 fce4 	bl	8004d88 <xTaskResumeAll>
 80043c0:	e758      	b.n	8004274 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80043c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043c4:	f000 f96d 	bl	80046a2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043c8:	f000 fcde 	bl	8004d88 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043cc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043ce:	f000 f9ba 	bl	8004746 <prvIsQueueEmpty>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	f43f af4d 	beq.w	8004274 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80043da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00d      	beq.n	80043fc <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80043e0:	f001 ff08 	bl	80061f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80043e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043e6:	f000 f8b4 	bl	8004552 <prvGetDisinheritPriorityAfterTimeout>
 80043ea:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80043ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043f2:	4618      	mov	r0, r3
 80043f4:	f001 f99a 	bl	800572c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80043f8:	f001 ff2c 	bl	8006254 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80043fc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3738      	adds	r7, #56	; 0x38
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	e000ed04 	.word	0xe000ed04

0800440c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08e      	sub	sp, #56	; 0x38
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800441c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10a      	bne.n	8004438 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004426:	f383 8811 	msr	BASEPRI, r3
 800442a:	f3bf 8f6f 	isb	sy
 800442e:	f3bf 8f4f 	dsb	sy
 8004432:	623b      	str	r3, [r7, #32]
}
 8004434:	bf00      	nop
 8004436:	e7fe      	b.n	8004436 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d103      	bne.n	8004446 <xQueueReceiveFromISR+0x3a>
 800443e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	2b00      	cmp	r3, #0
 8004444:	d101      	bne.n	800444a <xQueueReceiveFromISR+0x3e>
 8004446:	2301      	movs	r3, #1
 8004448:	e000      	b.n	800444c <xQueueReceiveFromISR+0x40>
 800444a:	2300      	movs	r3, #0
 800444c:	2b00      	cmp	r3, #0
 800444e:	d10a      	bne.n	8004466 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004454:	f383 8811 	msr	BASEPRI, r3
 8004458:	f3bf 8f6f 	isb	sy
 800445c:	f3bf 8f4f 	dsb	sy
 8004460:	61fb      	str	r3, [r7, #28]
}
 8004462:	bf00      	nop
 8004464:	e7fe      	b.n	8004464 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004466:	f001 ffa7 	bl	80063b8 <vPortValidateInterruptPriority>
	__asm volatile
 800446a:	f3ef 8211 	mrs	r2, BASEPRI
 800446e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004472:	f383 8811 	msr	BASEPRI, r3
 8004476:	f3bf 8f6f 	isb	sy
 800447a:	f3bf 8f4f 	dsb	sy
 800447e:	61ba      	str	r2, [r7, #24]
 8004480:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004482:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004484:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800448c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448e:	2b00      	cmp	r3, #0
 8004490:	d02f      	beq.n	80044f2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004494:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004498:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800449c:	68b9      	ldr	r1, [r7, #8]
 800449e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044a0:	f000 f8d9 	bl	8004656 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80044a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a6:	1e5a      	subs	r2, r3, #1
 80044a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044aa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80044ac:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044b4:	d112      	bne.n	80044dc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80044b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d016      	beq.n	80044ec <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80044be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c0:	3310      	adds	r3, #16
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 fe7c 	bl	80051c0 <xTaskRemoveFromEventList>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00e      	beq.n	80044ec <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00b      	beq.n	80044ec <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	e007      	b.n	80044ec <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80044dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044e0:	3301      	adds	r3, #1
 80044e2:	b2db      	uxtb	r3, r3
 80044e4:	b25a      	sxtb	r2, r3
 80044e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80044ec:	2301      	movs	r3, #1
 80044ee:	637b      	str	r3, [r7, #52]	; 0x34
 80044f0:	e001      	b.n	80044f6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	637b      	str	r3, [r7, #52]	; 0x34
 80044f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	f383 8811 	msr	BASEPRI, r3
}
 8004500:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004504:	4618      	mov	r0, r3
 8004506:	3738      	adds	r7, #56	; 0x38
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b084      	sub	sp, #16
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d10a      	bne.n	8004534 <vQueueDelete+0x28>
	__asm volatile
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	60bb      	str	r3, [r7, #8]
}
 8004530:	bf00      	nop
 8004532:	e7fe      	b.n	8004532 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004534:	68f8      	ldr	r0, [r7, #12]
 8004536:	f000 f95f 	bl	80047f8 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004540:	2b00      	cmp	r3, #0
 8004542:	d102      	bne.n	800454a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f002 f843 	bl	80065d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800454a:	bf00      	nop
 800454c:	3710      	adds	r7, #16
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}

08004552 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004552:	b480      	push	{r7}
 8004554:	b085      	sub	sp, #20
 8004556:	af00      	add	r7, sp, #0
 8004558:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	2b00      	cmp	r3, #0
 8004560:	d006      	beq.n	8004570 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800456c:	60fb      	str	r3, [r7, #12]
 800456e:	e001      	b.n	8004574 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004574:	68fb      	ldr	r3, [r7, #12]
	}
 8004576:	4618      	mov	r0, r3
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr

08004582 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004582:	b580      	push	{r7, lr}
 8004584:	b086      	sub	sp, #24
 8004586:	af00      	add	r7, sp, #0
 8004588:	60f8      	str	r0, [r7, #12]
 800458a:	60b9      	str	r1, [r7, #8]
 800458c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004596:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459c:	2b00      	cmp	r3, #0
 800459e:	d10d      	bne.n	80045bc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d14d      	bne.n	8004644 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	4618      	mov	r0, r3
 80045ae:	f001 f84f 	bl	8005650 <xTaskPriorityDisinherit>
 80045b2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2200      	movs	r2, #0
 80045b8:	609a      	str	r2, [r3, #8]
 80045ba:	e043      	b.n	8004644 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d119      	bne.n	80045f6 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	6858      	ldr	r0, [r3, #4]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ca:	461a      	mov	r2, r3
 80045cc:	68b9      	ldr	r1, [r7, #8]
 80045ce:	f002 f949 	bl	8006864 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	685a      	ldr	r2, [r3, #4]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045da:	441a      	add	r2, r3
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	685a      	ldr	r2, [r3, #4]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d32b      	bcc.n	8004644 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681a      	ldr	r2, [r3, #0]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	605a      	str	r2, [r3, #4]
 80045f4:	e026      	b.n	8004644 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	68d8      	ldr	r0, [r3, #12]
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045fe:	461a      	mov	r2, r3
 8004600:	68b9      	ldr	r1, [r7, #8]
 8004602:	f002 f92f 	bl	8006864 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	68da      	ldr	r2, [r3, #12]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	425b      	negs	r3, r3
 8004610:	441a      	add	r2, r3
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	429a      	cmp	r2, r3
 8004620:	d207      	bcs.n	8004632 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	425b      	negs	r3, r3
 800462c:	441a      	add	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d105      	bne.n	8004644 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	3b01      	subs	r3, #1
 8004642:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1c5a      	adds	r2, r3, #1
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800464c:	697b      	ldr	r3, [r7, #20]
}
 800464e:	4618      	mov	r0, r3
 8004650:	3718      	adds	r7, #24
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b082      	sub	sp, #8
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
 800465e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004664:	2b00      	cmp	r3, #0
 8004666:	d018      	beq.n	800469a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004670:	441a      	add	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	429a      	cmp	r2, r3
 8004680:	d303      	bcc.n	800468a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68d9      	ldr	r1, [r3, #12]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004692:	461a      	mov	r2, r3
 8004694:	6838      	ldr	r0, [r7, #0]
 8004696:	f002 f8e5 	bl	8006864 <memcpy>
	}
}
 800469a:	bf00      	nop
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b084      	sub	sp, #16
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80046aa:	f001 fda3 	bl	80061f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046b4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046b6:	e011      	b.n	80046dc <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d012      	beq.n	80046e6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	3324      	adds	r3, #36	; 0x24
 80046c4:	4618      	mov	r0, r3
 80046c6:	f000 fd7b 	bl	80051c0 <xTaskRemoveFromEventList>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d001      	beq.n	80046d4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80046d0:	f000 fe52 	bl	8005378 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80046d4:	7bfb      	ldrb	r3, [r7, #15]
 80046d6:	3b01      	subs	r3, #1
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80046dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	dce9      	bgt.n	80046b8 <prvUnlockQueue+0x16>
 80046e4:	e000      	b.n	80046e8 <prvUnlockQueue+0x46>
					break;
 80046e6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	22ff      	movs	r2, #255	; 0xff
 80046ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80046f0:	f001 fdb0 	bl	8006254 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80046f4:	f001 fd7e 	bl	80061f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046fe:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004700:	e011      	b.n	8004726 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	d012      	beq.n	8004730 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	3310      	adds	r3, #16
 800470e:	4618      	mov	r0, r3
 8004710:	f000 fd56 	bl	80051c0 <xTaskRemoveFromEventList>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800471a:	f000 fe2d 	bl	8005378 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800471e:	7bbb      	ldrb	r3, [r7, #14]
 8004720:	3b01      	subs	r3, #1
 8004722:	b2db      	uxtb	r3, r3
 8004724:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004726:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800472a:	2b00      	cmp	r3, #0
 800472c:	dce9      	bgt.n	8004702 <prvUnlockQueue+0x60>
 800472e:	e000      	b.n	8004732 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004730:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	22ff      	movs	r2, #255	; 0xff
 8004736:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800473a:	f001 fd8b 	bl	8006254 <vPortExitCritical>
}
 800473e:	bf00      	nop
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b084      	sub	sp, #16
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800474e:	f001 fd51 	bl	80061f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004756:	2b00      	cmp	r3, #0
 8004758:	d102      	bne.n	8004760 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800475a:	2301      	movs	r3, #1
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	e001      	b.n	8004764 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004760:	2300      	movs	r3, #0
 8004762:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004764:	f001 fd76 	bl	8006254 <vPortExitCritical>

	return xReturn;
 8004768:	68fb      	ldr	r3, [r7, #12]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}

08004772 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004772:	b580      	push	{r7, lr}
 8004774:	b084      	sub	sp, #16
 8004776:	af00      	add	r7, sp, #0
 8004778:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800477a:	f001 fd3b 	bl	80061f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004786:	429a      	cmp	r2, r3
 8004788:	d102      	bne.n	8004790 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800478a:	2301      	movs	r3, #1
 800478c:	60fb      	str	r3, [r7, #12]
 800478e:	e001      	b.n	8004794 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004790:	2300      	movs	r3, #0
 8004792:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004794:	f001 fd5e 	bl	8006254 <vPortExitCritical>

	return xReturn;
 8004798:	68fb      	ldr	r3, [r7, #12]
}
 800479a:	4618      	mov	r0, r3
 800479c:	3710      	adds	r7, #16
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}
	...

080047a4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80047a4:	b480      	push	{r7}
 80047a6:	b085      	sub	sp, #20
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047ae:	2300      	movs	r3, #0
 80047b0:	60fb      	str	r3, [r7, #12]
 80047b2:	e014      	b.n	80047de <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80047b4:	4a0f      	ldr	r2, [pc, #60]	; (80047f4 <vQueueAddToRegistry+0x50>)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10b      	bne.n	80047d8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80047c0:	490c      	ldr	r1, [pc, #48]	; (80047f4 <vQueueAddToRegistry+0x50>)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	683a      	ldr	r2, [r7, #0]
 80047c6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80047ca:	4a0a      	ldr	r2, [pc, #40]	; (80047f4 <vQueueAddToRegistry+0x50>)
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	00db      	lsls	r3, r3, #3
 80047d0:	4413      	add	r3, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80047d6:	e006      	b.n	80047e6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	3301      	adds	r3, #1
 80047dc:	60fb      	str	r3, [r7, #12]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2b07      	cmp	r3, #7
 80047e2:	d9e7      	bls.n	80047b4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80047e4:	bf00      	nop
 80047e6:	bf00      	nop
 80047e8:	3714      	adds	r7, #20
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	20001b64 	.word	0x20001b64

080047f8 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	e016      	b.n	8004834 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004806:	4a10      	ldr	r2, [pc, #64]	; (8004848 <vQueueUnregisterQueue+0x50>)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	00db      	lsls	r3, r3, #3
 800480c:	4413      	add	r3, r2
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	429a      	cmp	r2, r3
 8004814:	d10b      	bne.n	800482e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004816:	4a0c      	ldr	r2, [pc, #48]	; (8004848 <vQueueUnregisterQueue+0x50>)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2100      	movs	r1, #0
 800481c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004820:	4a09      	ldr	r2, [pc, #36]	; (8004848 <vQueueUnregisterQueue+0x50>)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	00db      	lsls	r3, r3, #3
 8004826:	4413      	add	r3, r2
 8004828:	2200      	movs	r2, #0
 800482a:	605a      	str	r2, [r3, #4]
				break;
 800482c:	e006      	b.n	800483c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	3301      	adds	r3, #1
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	2b07      	cmp	r3, #7
 8004838:	d9e5      	bls.n	8004806 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800483a:	bf00      	nop
 800483c:	bf00      	nop
 800483e:	3714      	adds	r7, #20
 8004840:	46bd      	mov	sp, r7
 8004842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004846:	4770      	bx	lr
 8004848:	20001b64 	.word	0x20001b64

0800484c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800485c:	f001 fcca 	bl	80061f4 <vPortEnterCritical>
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004866:	b25b      	sxtb	r3, r3
 8004868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800486c:	d103      	bne.n	8004876 <vQueueWaitForMessageRestricted+0x2a>
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	2200      	movs	r2, #0
 8004872:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800487c:	b25b      	sxtb	r3, r3
 800487e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004882:	d103      	bne.n	800488c <vQueueWaitForMessageRestricted+0x40>
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	2200      	movs	r2, #0
 8004888:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800488c:	f001 fce2 	bl	8006254 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	2b00      	cmp	r3, #0
 8004896:	d106      	bne.n	80048a6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	3324      	adds	r3, #36	; 0x24
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	68b9      	ldr	r1, [r7, #8]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f000 fc61 	bl	8005168 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80048a6:	6978      	ldr	r0, [r7, #20]
 80048a8:	f7ff fefb 	bl	80046a2 <prvUnlockQueue>
	}
 80048ac:	bf00      	nop
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08e      	sub	sp, #56	; 0x38
 80048b8:	af04      	add	r7, sp, #16
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	607a      	str	r2, [r7, #4]
 80048c0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80048c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d10a      	bne.n	80048de <xTaskCreateStatic+0x2a>
	__asm volatile
 80048c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048cc:	f383 8811 	msr	BASEPRI, r3
 80048d0:	f3bf 8f6f 	isb	sy
 80048d4:	f3bf 8f4f 	dsb	sy
 80048d8:	623b      	str	r3, [r7, #32]
}
 80048da:	bf00      	nop
 80048dc:	e7fe      	b.n	80048dc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80048de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d10a      	bne.n	80048fa <xTaskCreateStatic+0x46>
	__asm volatile
 80048e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048e8:	f383 8811 	msr	BASEPRI, r3
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f3bf 8f4f 	dsb	sy
 80048f4:	61fb      	str	r3, [r7, #28]
}
 80048f6:	bf00      	nop
 80048f8:	e7fe      	b.n	80048f8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80048fa:	23bc      	movs	r3, #188	; 0xbc
 80048fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	2bbc      	cmp	r3, #188	; 0xbc
 8004902:	d00a      	beq.n	800491a <xTaskCreateStatic+0x66>
	__asm volatile
 8004904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004908:	f383 8811 	msr	BASEPRI, r3
 800490c:	f3bf 8f6f 	isb	sy
 8004910:	f3bf 8f4f 	dsb	sy
 8004914:	61bb      	str	r3, [r7, #24]
}
 8004916:	bf00      	nop
 8004918:	e7fe      	b.n	8004918 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800491a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800491c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800491e:	2b00      	cmp	r3, #0
 8004920:	d01e      	beq.n	8004960 <xTaskCreateStatic+0xac>
 8004922:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004924:	2b00      	cmp	r3, #0
 8004926:	d01b      	beq.n	8004960 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004928:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004930:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004934:	2202      	movs	r2, #2
 8004936:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800493a:	2300      	movs	r3, #0
 800493c:	9303      	str	r3, [sp, #12]
 800493e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004940:	9302      	str	r3, [sp, #8]
 8004942:	f107 0314 	add.w	r3, r7, #20
 8004946:	9301      	str	r3, [sp, #4]
 8004948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	68b9      	ldr	r1, [r7, #8]
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 f850 	bl	80049f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004958:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800495a:	f000 f8f3 	bl	8004b44 <prvAddNewTaskToReadyList>
 800495e:	e001      	b.n	8004964 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004960:	2300      	movs	r3, #0
 8004962:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004964:	697b      	ldr	r3, [r7, #20]
	}
 8004966:	4618      	mov	r0, r3
 8004968:	3728      	adds	r7, #40	; 0x28
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}

0800496e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800496e:	b580      	push	{r7, lr}
 8004970:	b08c      	sub	sp, #48	; 0x30
 8004972:	af04      	add	r7, sp, #16
 8004974:	60f8      	str	r0, [r7, #12]
 8004976:	60b9      	str	r1, [r7, #8]
 8004978:	603b      	str	r3, [r7, #0]
 800497a:	4613      	mov	r3, r2
 800497c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800497e:	88fb      	ldrh	r3, [r7, #6]
 8004980:	009b      	lsls	r3, r3, #2
 8004982:	4618      	mov	r0, r3
 8004984:	f001 fd58 	bl	8006438 <pvPortMalloc>
 8004988:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800498a:	697b      	ldr	r3, [r7, #20]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00e      	beq.n	80049ae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004990:	20bc      	movs	r0, #188	; 0xbc
 8004992:	f001 fd51 	bl	8006438 <pvPortMalloc>
 8004996:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d003      	beq.n	80049a6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	697a      	ldr	r2, [r7, #20]
 80049a2:	631a      	str	r2, [r3, #48]	; 0x30
 80049a4:	e005      	b.n	80049b2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80049a6:	6978      	ldr	r0, [r7, #20]
 80049a8:	f001 fe12 	bl	80065d0 <vPortFree>
 80049ac:	e001      	b.n	80049b2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80049ae:	2300      	movs	r3, #0
 80049b0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d017      	beq.n	80049e8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	2200      	movs	r2, #0
 80049bc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80049c0:	88fa      	ldrh	r2, [r7, #6]
 80049c2:	2300      	movs	r3, #0
 80049c4:	9303      	str	r3, [sp, #12]
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	9302      	str	r3, [sp, #8]
 80049ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049cc:	9301      	str	r3, [sp, #4]
 80049ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d0:	9300      	str	r3, [sp, #0]
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	68b9      	ldr	r1, [r7, #8]
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 f80e 	bl	80049f8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80049dc:	69f8      	ldr	r0, [r7, #28]
 80049de:	f000 f8b1 	bl	8004b44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80049e2:	2301      	movs	r3, #1
 80049e4:	61bb      	str	r3, [r7, #24]
 80049e6:	e002      	b.n	80049ee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80049e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049ec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80049ee:	69bb      	ldr	r3, [r7, #24]
	}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3720      	adds	r7, #32
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b088      	sub	sp, #32
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	60f8      	str	r0, [r7, #12]
 8004a00:	60b9      	str	r1, [r7, #8]
 8004a02:	607a      	str	r2, [r7, #4]
 8004a04:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a08:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	461a      	mov	r2, r3
 8004a10:	21a5      	movs	r1, #165	; 0xa5
 8004a12:	f001 ff35 	bl	8006880 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004a20:	3b01      	subs	r3, #1
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	f023 0307 	bic.w	r3, r3, #7
 8004a2e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	f003 0307 	and.w	r3, r3, #7
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00a      	beq.n	8004a50 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004a3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a3e:	f383 8811 	msr	BASEPRI, r3
 8004a42:	f3bf 8f6f 	isb	sy
 8004a46:	f3bf 8f4f 	dsb	sy
 8004a4a:	617b      	str	r3, [r7, #20]
}
 8004a4c:	bf00      	nop
 8004a4e:	e7fe      	b.n	8004a4e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d01f      	beq.n	8004a96 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a56:	2300      	movs	r3, #0
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	e012      	b.n	8004a82 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004a5c:	68ba      	ldr	r2, [r7, #8]
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	4413      	add	r3, r2
 8004a62:	7819      	ldrb	r1, [r3, #0]
 8004a64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	4413      	add	r3, r2
 8004a6a:	3334      	adds	r3, #52	; 0x34
 8004a6c:	460a      	mov	r2, r1
 8004a6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004a70:	68ba      	ldr	r2, [r7, #8]
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	4413      	add	r3, r2
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d006      	beq.n	8004a8a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	3301      	adds	r3, #1
 8004a80:	61fb      	str	r3, [r7, #28]
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	2b0f      	cmp	r3, #15
 8004a86:	d9e9      	bls.n	8004a5c <prvInitialiseNewTask+0x64>
 8004a88:	e000      	b.n	8004a8c <prvInitialiseNewTask+0x94>
			{
				break;
 8004a8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a94:	e003      	b.n	8004a9e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aa0:	2b37      	cmp	r3, #55	; 0x37
 8004aa2:	d901      	bls.n	8004aa8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004aa4:	2337      	movs	r3, #55	; 0x37
 8004aa6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aaa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004aac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004aae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ab2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004ab4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004abc:	3304      	adds	r3, #4
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f7fe fe56 	bl	8003770 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac6:	3318      	adds	r3, #24
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f7fe fe51 	bl	8003770 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ad6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004adc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ae2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aee:	2200      	movs	r2, #0
 8004af0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004af4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af6:	3354      	adds	r3, #84	; 0x54
 8004af8:	2260      	movs	r2, #96	; 0x60
 8004afa:	2100      	movs	r1, #0
 8004afc:	4618      	mov	r0, r3
 8004afe:	f001 febf 	bl	8006880 <memset>
 8004b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b04:	4a0c      	ldr	r2, [pc, #48]	; (8004b38 <prvInitialiseNewTask+0x140>)
 8004b06:	659a      	str	r2, [r3, #88]	; 0x58
 8004b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0a:	4a0c      	ldr	r2, [pc, #48]	; (8004b3c <prvInitialiseNewTask+0x144>)
 8004b0c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b10:	4a0b      	ldr	r2, [pc, #44]	; (8004b40 <prvInitialiseNewTask+0x148>)
 8004b12:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004b14:	683a      	ldr	r2, [r7, #0]
 8004b16:	68f9      	ldr	r1, [r7, #12]
 8004b18:	69b8      	ldr	r0, [r7, #24]
 8004b1a:	f001 fa3f 	bl	8005f9c <pxPortInitialiseStack>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b22:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d002      	beq.n	8004b30 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004b2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b2e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004b30:	bf00      	nop
 8004b32:	3720      	adds	r7, #32
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bd80      	pop	{r7, pc}
 8004b38:	08007314 	.word	0x08007314
 8004b3c:	08007334 	.word	0x08007334
 8004b40:	080072f4 	.word	0x080072f4

08004b44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004b4c:	f001 fb52 	bl	80061f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004b50:	4b2d      	ldr	r3, [pc, #180]	; (8004c08 <prvAddNewTaskToReadyList+0xc4>)
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	3301      	adds	r3, #1
 8004b56:	4a2c      	ldr	r2, [pc, #176]	; (8004c08 <prvAddNewTaskToReadyList+0xc4>)
 8004b58:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004b5a:	4b2c      	ldr	r3, [pc, #176]	; (8004c0c <prvAddNewTaskToReadyList+0xc8>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d109      	bne.n	8004b76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004b62:	4a2a      	ldr	r2, [pc, #168]	; (8004c0c <prvAddNewTaskToReadyList+0xc8>)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004b68:	4b27      	ldr	r3, [pc, #156]	; (8004c08 <prvAddNewTaskToReadyList+0xc4>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	2b01      	cmp	r3, #1
 8004b6e:	d110      	bne.n	8004b92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004b70:	f000 fc26 	bl	80053c0 <prvInitialiseTaskLists>
 8004b74:	e00d      	b.n	8004b92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004b76:	4b26      	ldr	r3, [pc, #152]	; (8004c10 <prvAddNewTaskToReadyList+0xcc>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d109      	bne.n	8004b92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004b7e:	4b23      	ldr	r3, [pc, #140]	; (8004c0c <prvAddNewTaskToReadyList+0xc8>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d802      	bhi.n	8004b92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004b8c:	4a1f      	ldr	r2, [pc, #124]	; (8004c0c <prvAddNewTaskToReadyList+0xc8>)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004b92:	4b20      	ldr	r3, [pc, #128]	; (8004c14 <prvAddNewTaskToReadyList+0xd0>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	3301      	adds	r3, #1
 8004b98:	4a1e      	ldr	r2, [pc, #120]	; (8004c14 <prvAddNewTaskToReadyList+0xd0>)
 8004b9a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004b9c:	4b1d      	ldr	r3, [pc, #116]	; (8004c14 <prvAddNewTaskToReadyList+0xd0>)
 8004b9e:	681a      	ldr	r2, [r3, #0]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba8:	4b1b      	ldr	r3, [pc, #108]	; (8004c18 <prvAddNewTaskToReadyList+0xd4>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d903      	bls.n	8004bb8 <prvAddNewTaskToReadyList+0x74>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb4:	4a18      	ldr	r2, [pc, #96]	; (8004c18 <prvAddNewTaskToReadyList+0xd4>)
 8004bb6:	6013      	str	r3, [r2, #0]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004bbc:	4613      	mov	r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	009b      	lsls	r3, r3, #2
 8004bc4:	4a15      	ldr	r2, [pc, #84]	; (8004c1c <prvAddNewTaskToReadyList+0xd8>)
 8004bc6:	441a      	add	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	3304      	adds	r3, #4
 8004bcc:	4619      	mov	r1, r3
 8004bce:	4610      	mov	r0, r2
 8004bd0:	f7fe fddb 	bl	800378a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004bd4:	f001 fb3e 	bl	8006254 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004bd8:	4b0d      	ldr	r3, [pc, #52]	; (8004c10 <prvAddNewTaskToReadyList+0xcc>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d00e      	beq.n	8004bfe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004be0:	4b0a      	ldr	r3, [pc, #40]	; (8004c0c <prvAddNewTaskToReadyList+0xc8>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bea:	429a      	cmp	r2, r3
 8004bec:	d207      	bcs.n	8004bfe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004bee:	4b0c      	ldr	r3, [pc, #48]	; (8004c20 <prvAddNewTaskToReadyList+0xdc>)
 8004bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf4:	601a      	str	r2, [r3, #0]
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004bfe:	bf00      	nop
 8004c00:	3708      	adds	r7, #8
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
 8004c06:	bf00      	nop
 8004c08:	20000d34 	.word	0x20000d34
 8004c0c:	20000860 	.word	0x20000860
 8004c10:	20000d40 	.word	0x20000d40
 8004c14:	20000d50 	.word	0x20000d50
 8004c18:	20000d3c 	.word	0x20000d3c
 8004c1c:	20000864 	.word	0x20000864
 8004c20:	e000ed04 	.word	0xe000ed04

08004c24 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b084      	sub	sp, #16
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d017      	beq.n	8004c66 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004c36:	4b13      	ldr	r3, [pc, #76]	; (8004c84 <vTaskDelay+0x60>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d00a      	beq.n	8004c54 <vTaskDelay+0x30>
	__asm volatile
 8004c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c42:	f383 8811 	msr	BASEPRI, r3
 8004c46:	f3bf 8f6f 	isb	sy
 8004c4a:	f3bf 8f4f 	dsb	sy
 8004c4e:	60bb      	str	r3, [r7, #8]
}
 8004c50:	bf00      	nop
 8004c52:	e7fe      	b.n	8004c52 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004c54:	f000 f88a 	bl	8004d6c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004c58:	2100      	movs	r1, #0
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f000 fdfc 	bl	8005858 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004c60:	f000 f892 	bl	8004d88 <xTaskResumeAll>
 8004c64:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d107      	bne.n	8004c7c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004c6c:	4b06      	ldr	r3, [pc, #24]	; (8004c88 <vTaskDelay+0x64>)
 8004c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c72:	601a      	str	r2, [r3, #0]
 8004c74:	f3bf 8f4f 	dsb	sy
 8004c78:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004c7c:	bf00      	nop
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	20000d5c 	.word	0x20000d5c
 8004c88:	e000ed04 	.word	0xe000ed04

08004c8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08a      	sub	sp, #40	; 0x28
 8004c90:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004c92:	2300      	movs	r3, #0
 8004c94:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004c96:	2300      	movs	r3, #0
 8004c98:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004c9a:	463a      	mov	r2, r7
 8004c9c:	1d39      	adds	r1, r7, #4
 8004c9e:	f107 0308 	add.w	r3, r7, #8
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	f7fe fd10 	bl	80036c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ca8:	6839      	ldr	r1, [r7, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	68ba      	ldr	r2, [r7, #8]
 8004cae:	9202      	str	r2, [sp, #8]
 8004cb0:	9301      	str	r3, [sp, #4]
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	9300      	str	r3, [sp, #0]
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	460a      	mov	r2, r1
 8004cba:	4924      	ldr	r1, [pc, #144]	; (8004d4c <vTaskStartScheduler+0xc0>)
 8004cbc:	4824      	ldr	r0, [pc, #144]	; (8004d50 <vTaskStartScheduler+0xc4>)
 8004cbe:	f7ff fdf9 	bl	80048b4 <xTaskCreateStatic>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	4a23      	ldr	r2, [pc, #140]	; (8004d54 <vTaskStartScheduler+0xc8>)
 8004cc6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004cc8:	4b22      	ldr	r3, [pc, #136]	; (8004d54 <vTaskStartScheduler+0xc8>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	e001      	b.n	8004cda <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d102      	bne.n	8004ce6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004ce0:	f000 fe0e 	bl	8005900 <xTimerCreateTimerTask>
 8004ce4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d11b      	bne.n	8004d24 <vTaskStartScheduler+0x98>
	__asm volatile
 8004cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf0:	f383 8811 	msr	BASEPRI, r3
 8004cf4:	f3bf 8f6f 	isb	sy
 8004cf8:	f3bf 8f4f 	dsb	sy
 8004cfc:	613b      	str	r3, [r7, #16]
}
 8004cfe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d00:	4b15      	ldr	r3, [pc, #84]	; (8004d58 <vTaskStartScheduler+0xcc>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	3354      	adds	r3, #84	; 0x54
 8004d06:	4a15      	ldr	r2, [pc, #84]	; (8004d5c <vTaskStartScheduler+0xd0>)
 8004d08:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004d0a:	4b15      	ldr	r3, [pc, #84]	; (8004d60 <vTaskStartScheduler+0xd4>)
 8004d0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004d12:	4b14      	ldr	r3, [pc, #80]	; (8004d64 <vTaskStartScheduler+0xd8>)
 8004d14:	2201      	movs	r2, #1
 8004d16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004d18:	4b13      	ldr	r3, [pc, #76]	; (8004d68 <vTaskStartScheduler+0xdc>)
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004d1e:	f001 f9c7 	bl	80060b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004d22:	e00e      	b.n	8004d42 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004d24:	697b      	ldr	r3, [r7, #20]
 8004d26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d2a:	d10a      	bne.n	8004d42 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d30:	f383 8811 	msr	BASEPRI, r3
 8004d34:	f3bf 8f6f 	isb	sy
 8004d38:	f3bf 8f4f 	dsb	sy
 8004d3c:	60fb      	str	r3, [r7, #12]
}
 8004d3e:	bf00      	nop
 8004d40:	e7fe      	b.n	8004d40 <vTaskStartScheduler+0xb4>
}
 8004d42:	bf00      	nop
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	08007214 	.word	0x08007214
 8004d50:	08005391 	.word	0x08005391
 8004d54:	20000d58 	.word	0x20000d58
 8004d58:	20000860 	.word	0x20000860
 8004d5c:	20000050 	.word	0x20000050
 8004d60:	20000d54 	.word	0x20000d54
 8004d64:	20000d40 	.word	0x20000d40
 8004d68:	20000d38 	.word	0x20000d38

08004d6c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004d70:	4b04      	ldr	r3, [pc, #16]	; (8004d84 <vTaskSuspendAll+0x18>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3301      	adds	r3, #1
 8004d76:	4a03      	ldr	r2, [pc, #12]	; (8004d84 <vTaskSuspendAll+0x18>)
 8004d78:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004d7a:	bf00      	nop
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d82:	4770      	bx	lr
 8004d84:	20000d5c 	.word	0x20000d5c

08004d88 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	b084      	sub	sp, #16
 8004d8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004d92:	2300      	movs	r3, #0
 8004d94:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004d96:	4b42      	ldr	r3, [pc, #264]	; (8004ea0 <xTaskResumeAll+0x118>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d10a      	bne.n	8004db4 <xTaskResumeAll+0x2c>
	__asm volatile
 8004d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da2:	f383 8811 	msr	BASEPRI, r3
 8004da6:	f3bf 8f6f 	isb	sy
 8004daa:	f3bf 8f4f 	dsb	sy
 8004dae:	603b      	str	r3, [r7, #0]
}
 8004db0:	bf00      	nop
 8004db2:	e7fe      	b.n	8004db2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004db4:	f001 fa1e 	bl	80061f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004db8:	4b39      	ldr	r3, [pc, #228]	; (8004ea0 <xTaskResumeAll+0x118>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3b01      	subs	r3, #1
 8004dbe:	4a38      	ldr	r2, [pc, #224]	; (8004ea0 <xTaskResumeAll+0x118>)
 8004dc0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004dc2:	4b37      	ldr	r3, [pc, #220]	; (8004ea0 <xTaskResumeAll+0x118>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d162      	bne.n	8004e90 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004dca:	4b36      	ldr	r3, [pc, #216]	; (8004ea4 <xTaskResumeAll+0x11c>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d05e      	beq.n	8004e90 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004dd2:	e02f      	b.n	8004e34 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004dd4:	4b34      	ldr	r3, [pc, #208]	; (8004ea8 <xTaskResumeAll+0x120>)
 8004dd6:	68db      	ldr	r3, [r3, #12]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3318      	adds	r3, #24
 8004de0:	4618      	mov	r0, r3
 8004de2:	f7fe fd2f 	bl	8003844 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	3304      	adds	r3, #4
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fe fd2a 	bl	8003844 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df4:	4b2d      	ldr	r3, [pc, #180]	; (8004eac <xTaskResumeAll+0x124>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	429a      	cmp	r2, r3
 8004dfa:	d903      	bls.n	8004e04 <xTaskResumeAll+0x7c>
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e00:	4a2a      	ldr	r2, [pc, #168]	; (8004eac <xTaskResumeAll+0x124>)
 8004e02:	6013      	str	r3, [r2, #0]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e08:	4613      	mov	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4a27      	ldr	r2, [pc, #156]	; (8004eb0 <xTaskResumeAll+0x128>)
 8004e12:	441a      	add	r2, r3
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	3304      	adds	r3, #4
 8004e18:	4619      	mov	r1, r3
 8004e1a:	4610      	mov	r0, r2
 8004e1c:	f7fe fcb5 	bl	800378a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e24:	4b23      	ldr	r3, [pc, #140]	; (8004eb4 <xTaskResumeAll+0x12c>)
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d302      	bcc.n	8004e34 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004e2e:	4b22      	ldr	r3, [pc, #136]	; (8004eb8 <xTaskResumeAll+0x130>)
 8004e30:	2201      	movs	r2, #1
 8004e32:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004e34:	4b1c      	ldr	r3, [pc, #112]	; (8004ea8 <xTaskResumeAll+0x120>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d1cb      	bne.n	8004dd4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d001      	beq.n	8004e46 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004e42:	f000 fb5f 	bl	8005504 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004e46:	4b1d      	ldr	r3, [pc, #116]	; (8004ebc <xTaskResumeAll+0x134>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d010      	beq.n	8004e74 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004e52:	f000 f847 	bl	8004ee4 <xTaskIncrementTick>
 8004e56:	4603      	mov	r3, r0
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d002      	beq.n	8004e62 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004e5c:	4b16      	ldr	r3, [pc, #88]	; (8004eb8 <xTaskResumeAll+0x130>)
 8004e5e:	2201      	movs	r2, #1
 8004e60:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1f1      	bne.n	8004e52 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004e6e:	4b13      	ldr	r3, [pc, #76]	; (8004ebc <xTaskResumeAll+0x134>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004e74:	4b10      	ldr	r3, [pc, #64]	; (8004eb8 <xTaskResumeAll+0x130>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d009      	beq.n	8004e90 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004e80:	4b0f      	ldr	r3, [pc, #60]	; (8004ec0 <xTaskResumeAll+0x138>)
 8004e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e86:	601a      	str	r2, [r3, #0]
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004e90:	f001 f9e0 	bl	8006254 <vPortExitCritical>

	return xAlreadyYielded;
 8004e94:	68bb      	ldr	r3, [r7, #8]
}
 8004e96:	4618      	mov	r0, r3
 8004e98:	3710      	adds	r7, #16
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	bd80      	pop	{r7, pc}
 8004e9e:	bf00      	nop
 8004ea0:	20000d5c 	.word	0x20000d5c
 8004ea4:	20000d34 	.word	0x20000d34
 8004ea8:	20000cf4 	.word	0x20000cf4
 8004eac:	20000d3c 	.word	0x20000d3c
 8004eb0:	20000864 	.word	0x20000864
 8004eb4:	20000860 	.word	0x20000860
 8004eb8:	20000d48 	.word	0x20000d48
 8004ebc:	20000d44 	.word	0x20000d44
 8004ec0:	e000ed04 	.word	0xe000ed04

08004ec4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b083      	sub	sp, #12
 8004ec8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004eca:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <xTaskGetTickCount+0x1c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004ed0:	687b      	ldr	r3, [r7, #4]
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	370c      	adds	r7, #12
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr
 8004ede:	bf00      	nop
 8004ee0:	20000d38 	.word	0x20000d38

08004ee4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b086      	sub	sp, #24
 8004ee8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004eea:	2300      	movs	r3, #0
 8004eec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004eee:	4b4f      	ldr	r3, [pc, #316]	; (800502c <xTaskIncrementTick+0x148>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f040 808f 	bne.w	8005016 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004ef8:	4b4d      	ldr	r3, [pc, #308]	; (8005030 <xTaskIncrementTick+0x14c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	3301      	adds	r3, #1
 8004efe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004f00:	4a4b      	ldr	r2, [pc, #300]	; (8005030 <xTaskIncrementTick+0x14c>)
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004f06:	693b      	ldr	r3, [r7, #16]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d120      	bne.n	8004f4e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004f0c:	4b49      	ldr	r3, [pc, #292]	; (8005034 <xTaskIncrementTick+0x150>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00a      	beq.n	8004f2c <xTaskIncrementTick+0x48>
	__asm volatile
 8004f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f1a:	f383 8811 	msr	BASEPRI, r3
 8004f1e:	f3bf 8f6f 	isb	sy
 8004f22:	f3bf 8f4f 	dsb	sy
 8004f26:	603b      	str	r3, [r7, #0]
}
 8004f28:	bf00      	nop
 8004f2a:	e7fe      	b.n	8004f2a <xTaskIncrementTick+0x46>
 8004f2c:	4b41      	ldr	r3, [pc, #260]	; (8005034 <xTaskIncrementTick+0x150>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	4b41      	ldr	r3, [pc, #260]	; (8005038 <xTaskIncrementTick+0x154>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a3f      	ldr	r2, [pc, #252]	; (8005034 <xTaskIncrementTick+0x150>)
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	4a3f      	ldr	r2, [pc, #252]	; (8005038 <xTaskIncrementTick+0x154>)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	6013      	str	r3, [r2, #0]
 8004f40:	4b3e      	ldr	r3, [pc, #248]	; (800503c <xTaskIncrementTick+0x158>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	3301      	adds	r3, #1
 8004f46:	4a3d      	ldr	r2, [pc, #244]	; (800503c <xTaskIncrementTick+0x158>)
 8004f48:	6013      	str	r3, [r2, #0]
 8004f4a:	f000 fadb 	bl	8005504 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004f4e:	4b3c      	ldr	r3, [pc, #240]	; (8005040 <xTaskIncrementTick+0x15c>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d349      	bcc.n	8004fec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f58:	4b36      	ldr	r3, [pc, #216]	; (8005034 <xTaskIncrementTick+0x150>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d104      	bne.n	8004f6c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f62:	4b37      	ldr	r3, [pc, #220]	; (8005040 <xTaskIncrementTick+0x15c>)
 8004f64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f68:	601a      	str	r2, [r3, #0]
					break;
 8004f6a:	e03f      	b.n	8004fec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f6c:	4b31      	ldr	r3, [pc, #196]	; (8005034 <xTaskIncrementTick+0x150>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	68db      	ldr	r3, [r3, #12]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004f7c:	693a      	ldr	r2, [r7, #16]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d203      	bcs.n	8004f8c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004f84:	4a2e      	ldr	r2, [pc, #184]	; (8005040 <xTaskIncrementTick+0x15c>)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004f8a:	e02f      	b.n	8004fec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	3304      	adds	r3, #4
 8004f90:	4618      	mov	r0, r3
 8004f92:	f7fe fc57 	bl	8003844 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d004      	beq.n	8004fa8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f9e:	68bb      	ldr	r3, [r7, #8]
 8004fa0:	3318      	adds	r3, #24
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f7fe fc4e 	bl	8003844 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fac:	4b25      	ldr	r3, [pc, #148]	; (8005044 <xTaskIncrementTick+0x160>)
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d903      	bls.n	8004fbc <xTaskIncrementTick+0xd8>
 8004fb4:	68bb      	ldr	r3, [r7, #8]
 8004fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb8:	4a22      	ldr	r2, [pc, #136]	; (8005044 <xTaskIncrementTick+0x160>)
 8004fba:	6013      	str	r3, [r2, #0]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4a1f      	ldr	r2, [pc, #124]	; (8005048 <xTaskIncrementTick+0x164>)
 8004fca:	441a      	add	r2, r3
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	3304      	adds	r3, #4
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	f7fe fbd9 	bl	800378a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fdc:	4b1b      	ldr	r3, [pc, #108]	; (800504c <xTaskIncrementTick+0x168>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d3b8      	bcc.n	8004f58 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004fe6:	2301      	movs	r3, #1
 8004fe8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004fea:	e7b5      	b.n	8004f58 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004fec:	4b17      	ldr	r3, [pc, #92]	; (800504c <xTaskIncrementTick+0x168>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ff2:	4915      	ldr	r1, [pc, #84]	; (8005048 <xTaskIncrementTick+0x164>)
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	4413      	add	r3, r2
 8004ffa:	009b      	lsls	r3, r3, #2
 8004ffc:	440b      	add	r3, r1
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d901      	bls.n	8005008 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005004:	2301      	movs	r3, #1
 8005006:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005008:	4b11      	ldr	r3, [pc, #68]	; (8005050 <xTaskIncrementTick+0x16c>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d007      	beq.n	8005020 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005010:	2301      	movs	r3, #1
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	e004      	b.n	8005020 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005016:	4b0f      	ldr	r3, [pc, #60]	; (8005054 <xTaskIncrementTick+0x170>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	3301      	adds	r3, #1
 800501c:	4a0d      	ldr	r2, [pc, #52]	; (8005054 <xTaskIncrementTick+0x170>)
 800501e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005020:	697b      	ldr	r3, [r7, #20]
}
 8005022:	4618      	mov	r0, r3
 8005024:	3718      	adds	r7, #24
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	20000d5c 	.word	0x20000d5c
 8005030:	20000d38 	.word	0x20000d38
 8005034:	20000cec 	.word	0x20000cec
 8005038:	20000cf0 	.word	0x20000cf0
 800503c:	20000d4c 	.word	0x20000d4c
 8005040:	20000d54 	.word	0x20000d54
 8005044:	20000d3c 	.word	0x20000d3c
 8005048:	20000864 	.word	0x20000864
 800504c:	20000860 	.word	0x20000860
 8005050:	20000d48 	.word	0x20000d48
 8005054:	20000d44 	.word	0x20000d44

08005058 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005058:	b480      	push	{r7}
 800505a:	b085      	sub	sp, #20
 800505c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800505e:	4b2a      	ldr	r3, [pc, #168]	; (8005108 <vTaskSwitchContext+0xb0>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005066:	4b29      	ldr	r3, [pc, #164]	; (800510c <vTaskSwitchContext+0xb4>)
 8005068:	2201      	movs	r2, #1
 800506a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800506c:	e046      	b.n	80050fc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800506e:	4b27      	ldr	r3, [pc, #156]	; (800510c <vTaskSwitchContext+0xb4>)
 8005070:	2200      	movs	r2, #0
 8005072:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005074:	4b26      	ldr	r3, [pc, #152]	; (8005110 <vTaskSwitchContext+0xb8>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	e010      	b.n	800509e <vTaskSwitchContext+0x46>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10a      	bne.n	8005098 <vTaskSwitchContext+0x40>
	__asm volatile
 8005082:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005086:	f383 8811 	msr	BASEPRI, r3
 800508a:	f3bf 8f6f 	isb	sy
 800508e:	f3bf 8f4f 	dsb	sy
 8005092:	607b      	str	r3, [r7, #4]
}
 8005094:	bf00      	nop
 8005096:	e7fe      	b.n	8005096 <vTaskSwitchContext+0x3e>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	3b01      	subs	r3, #1
 800509c:	60fb      	str	r3, [r7, #12]
 800509e:	491d      	ldr	r1, [pc, #116]	; (8005114 <vTaskSwitchContext+0xbc>)
 80050a0:	68fa      	ldr	r2, [r7, #12]
 80050a2:	4613      	mov	r3, r2
 80050a4:	009b      	lsls	r3, r3, #2
 80050a6:	4413      	add	r3, r2
 80050a8:	009b      	lsls	r3, r3, #2
 80050aa:	440b      	add	r3, r1
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d0e4      	beq.n	800507c <vTaskSwitchContext+0x24>
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4613      	mov	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4413      	add	r3, r2
 80050ba:	009b      	lsls	r3, r3, #2
 80050bc:	4a15      	ldr	r2, [pc, #84]	; (8005114 <vTaskSwitchContext+0xbc>)
 80050be:	4413      	add	r3, r2
 80050c0:	60bb      	str	r3, [r7, #8]
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	685a      	ldr	r2, [r3, #4]
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	605a      	str	r2, [r3, #4]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	3308      	adds	r3, #8
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d104      	bne.n	80050e2 <vTaskSwitchContext+0x8a>
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	605a      	str	r2, [r3, #4]
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	4a0b      	ldr	r2, [pc, #44]	; (8005118 <vTaskSwitchContext+0xc0>)
 80050ea:	6013      	str	r3, [r2, #0]
 80050ec:	4a08      	ldr	r2, [pc, #32]	; (8005110 <vTaskSwitchContext+0xb8>)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80050f2:	4b09      	ldr	r3, [pc, #36]	; (8005118 <vTaskSwitchContext+0xc0>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3354      	adds	r3, #84	; 0x54
 80050f8:	4a08      	ldr	r2, [pc, #32]	; (800511c <vTaskSwitchContext+0xc4>)
 80050fa:	6013      	str	r3, [r2, #0]
}
 80050fc:	bf00      	nop
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	20000d5c 	.word	0x20000d5c
 800510c:	20000d48 	.word	0x20000d48
 8005110:	20000d3c 	.word	0x20000d3c
 8005114:	20000864 	.word	0x20000864
 8005118:	20000860 	.word	0x20000860
 800511c:	20000050 	.word	0x20000050

08005120 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d10a      	bne.n	8005146 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005134:	f383 8811 	msr	BASEPRI, r3
 8005138:	f3bf 8f6f 	isb	sy
 800513c:	f3bf 8f4f 	dsb	sy
 8005140:	60fb      	str	r3, [r7, #12]
}
 8005142:	bf00      	nop
 8005144:	e7fe      	b.n	8005144 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005146:	4b07      	ldr	r3, [pc, #28]	; (8005164 <vTaskPlaceOnEventList+0x44>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	3318      	adds	r3, #24
 800514c:	4619      	mov	r1, r3
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7fe fb3f 	bl	80037d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005154:	2101      	movs	r1, #1
 8005156:	6838      	ldr	r0, [r7, #0]
 8005158:	f000 fb7e 	bl	8005858 <prvAddCurrentTaskToDelayedList>
}
 800515c:	bf00      	nop
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}
 8005164:	20000860 	.word	0x20000860

08005168 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005168:	b580      	push	{r7, lr}
 800516a:	b086      	sub	sp, #24
 800516c:	af00      	add	r7, sp, #0
 800516e:	60f8      	str	r0, [r7, #12]
 8005170:	60b9      	str	r1, [r7, #8]
 8005172:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d10a      	bne.n	8005190 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800517a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517e:	f383 8811 	msr	BASEPRI, r3
 8005182:	f3bf 8f6f 	isb	sy
 8005186:	f3bf 8f4f 	dsb	sy
 800518a:	617b      	str	r3, [r7, #20]
}
 800518c:	bf00      	nop
 800518e:	e7fe      	b.n	800518e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005190:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <vTaskPlaceOnEventListRestricted+0x54>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3318      	adds	r3, #24
 8005196:	4619      	mov	r1, r3
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f7fe faf6 	bl	800378a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d002      	beq.n	80051aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80051a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	68b8      	ldr	r0, [r7, #8]
 80051ae:	f000 fb53 	bl	8005858 <prvAddCurrentTaskToDelayedList>
	}
 80051b2:	bf00      	nop
 80051b4:	3718      	adds	r7, #24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	20000860 	.word	0x20000860

080051c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b086      	sub	sp, #24
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	68db      	ldr	r3, [r3, #12]
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10a      	bne.n	80051ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80051d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051da:	f383 8811 	msr	BASEPRI, r3
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	f3bf 8f4f 	dsb	sy
 80051e6:	60fb      	str	r3, [r7, #12]
}
 80051e8:	bf00      	nop
 80051ea:	e7fe      	b.n	80051ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	3318      	adds	r3, #24
 80051f0:	4618      	mov	r0, r3
 80051f2:	f7fe fb27 	bl	8003844 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051f6:	4b1e      	ldr	r3, [pc, #120]	; (8005270 <xTaskRemoveFromEventList+0xb0>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d11d      	bne.n	800523a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	3304      	adds	r3, #4
 8005202:	4618      	mov	r0, r3
 8005204:	f7fe fb1e 	bl	8003844 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005208:	693b      	ldr	r3, [r7, #16]
 800520a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800520c:	4b19      	ldr	r3, [pc, #100]	; (8005274 <xTaskRemoveFromEventList+0xb4>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	429a      	cmp	r2, r3
 8005212:	d903      	bls.n	800521c <xTaskRemoveFromEventList+0x5c>
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005218:	4a16      	ldr	r2, [pc, #88]	; (8005274 <xTaskRemoveFromEventList+0xb4>)
 800521a:	6013      	str	r3, [r2, #0]
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005220:	4613      	mov	r3, r2
 8005222:	009b      	lsls	r3, r3, #2
 8005224:	4413      	add	r3, r2
 8005226:	009b      	lsls	r3, r3, #2
 8005228:	4a13      	ldr	r2, [pc, #76]	; (8005278 <xTaskRemoveFromEventList+0xb8>)
 800522a:	441a      	add	r2, r3
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	3304      	adds	r3, #4
 8005230:	4619      	mov	r1, r3
 8005232:	4610      	mov	r0, r2
 8005234:	f7fe faa9 	bl	800378a <vListInsertEnd>
 8005238:	e005      	b.n	8005246 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	3318      	adds	r3, #24
 800523e:	4619      	mov	r1, r3
 8005240:	480e      	ldr	r0, [pc, #56]	; (800527c <xTaskRemoveFromEventList+0xbc>)
 8005242:	f7fe faa2 	bl	800378a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800524a:	4b0d      	ldr	r3, [pc, #52]	; (8005280 <xTaskRemoveFromEventList+0xc0>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005250:	429a      	cmp	r2, r3
 8005252:	d905      	bls.n	8005260 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005254:	2301      	movs	r3, #1
 8005256:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005258:	4b0a      	ldr	r3, [pc, #40]	; (8005284 <xTaskRemoveFromEventList+0xc4>)
 800525a:	2201      	movs	r2, #1
 800525c:	601a      	str	r2, [r3, #0]
 800525e:	e001      	b.n	8005264 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005264:	697b      	ldr	r3, [r7, #20]
}
 8005266:	4618      	mov	r0, r3
 8005268:	3718      	adds	r7, #24
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	bf00      	nop
 8005270:	20000d5c 	.word	0x20000d5c
 8005274:	20000d3c 	.word	0x20000d3c
 8005278:	20000864 	.word	0x20000864
 800527c:	20000cf4 	.word	0x20000cf4
 8005280:	20000860 	.word	0x20000860
 8005284:	20000d48 	.word	0x20000d48

08005288 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005290:	4b06      	ldr	r3, [pc, #24]	; (80052ac <vTaskInternalSetTimeOutState+0x24>)
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005298:	4b05      	ldr	r3, [pc, #20]	; (80052b0 <vTaskInternalSetTimeOutState+0x28>)
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	605a      	str	r2, [r3, #4]
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr
 80052ac:	20000d4c 	.word	0x20000d4c
 80052b0:	20000d38 	.word	0x20000d38

080052b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10a      	bne.n	80052da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80052c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c8:	f383 8811 	msr	BASEPRI, r3
 80052cc:	f3bf 8f6f 	isb	sy
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	613b      	str	r3, [r7, #16]
}
 80052d6:	bf00      	nop
 80052d8:	e7fe      	b.n	80052d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10a      	bne.n	80052f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	60fb      	str	r3, [r7, #12]
}
 80052f2:	bf00      	nop
 80052f4:	e7fe      	b.n	80052f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80052f6:	f000 ff7d 	bl	80061f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80052fa:	4b1d      	ldr	r3, [pc, #116]	; (8005370 <xTaskCheckForTimeOut+0xbc>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	69ba      	ldr	r2, [r7, #24]
 8005306:	1ad3      	subs	r3, r2, r3
 8005308:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005312:	d102      	bne.n	800531a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005314:	2300      	movs	r3, #0
 8005316:	61fb      	str	r3, [r7, #28]
 8005318:	e023      	b.n	8005362 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	4b15      	ldr	r3, [pc, #84]	; (8005374 <xTaskCheckForTimeOut+0xc0>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	429a      	cmp	r2, r3
 8005324:	d007      	beq.n	8005336 <xTaskCheckForTimeOut+0x82>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	429a      	cmp	r2, r3
 800532e:	d302      	bcc.n	8005336 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005330:	2301      	movs	r3, #1
 8005332:	61fb      	str	r3, [r7, #28]
 8005334:	e015      	b.n	8005362 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	429a      	cmp	r2, r3
 800533e:	d20b      	bcs.n	8005358 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681a      	ldr	r2, [r3, #0]
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	1ad2      	subs	r2, r2, r3
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f7ff ff9b 	bl	8005288 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005352:	2300      	movs	r3, #0
 8005354:	61fb      	str	r3, [r7, #28]
 8005356:	e004      	b.n	8005362 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800535e:	2301      	movs	r3, #1
 8005360:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005362:	f000 ff77 	bl	8006254 <vPortExitCritical>

	return xReturn;
 8005366:	69fb      	ldr	r3, [r7, #28]
}
 8005368:	4618      	mov	r0, r3
 800536a:	3720      	adds	r7, #32
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	20000d38 	.word	0x20000d38
 8005374:	20000d4c 	.word	0x20000d4c

08005378 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005378:	b480      	push	{r7}
 800537a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800537c:	4b03      	ldr	r3, [pc, #12]	; (800538c <vTaskMissedYield+0x14>)
 800537e:	2201      	movs	r2, #1
 8005380:	601a      	str	r2, [r3, #0]
}
 8005382:	bf00      	nop
 8005384:	46bd      	mov	sp, r7
 8005386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538a:	4770      	bx	lr
 800538c:	20000d48 	.word	0x20000d48

08005390 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b082      	sub	sp, #8
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005398:	f000 f852 	bl	8005440 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800539c:	4b06      	ldr	r3, [pc, #24]	; (80053b8 <prvIdleTask+0x28>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d9f9      	bls.n	8005398 <prvIdleTask+0x8>
			{
				taskYIELD();
 80053a4:	4b05      	ldr	r3, [pc, #20]	; (80053bc <prvIdleTask+0x2c>)
 80053a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80053b4:	e7f0      	b.n	8005398 <prvIdleTask+0x8>
 80053b6:	bf00      	nop
 80053b8:	20000864 	.word	0x20000864
 80053bc:	e000ed04 	.word	0xe000ed04

080053c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053c6:	2300      	movs	r3, #0
 80053c8:	607b      	str	r3, [r7, #4]
 80053ca:	e00c      	b.n	80053e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	4613      	mov	r3, r2
 80053d0:	009b      	lsls	r3, r3, #2
 80053d2:	4413      	add	r3, r2
 80053d4:	009b      	lsls	r3, r3, #2
 80053d6:	4a12      	ldr	r2, [pc, #72]	; (8005420 <prvInitialiseTaskLists+0x60>)
 80053d8:	4413      	add	r3, r2
 80053da:	4618      	mov	r0, r3
 80053dc:	f7fe f9a8 	bl	8003730 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	3301      	adds	r3, #1
 80053e4:	607b      	str	r3, [r7, #4]
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2b37      	cmp	r3, #55	; 0x37
 80053ea:	d9ef      	bls.n	80053cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80053ec:	480d      	ldr	r0, [pc, #52]	; (8005424 <prvInitialiseTaskLists+0x64>)
 80053ee:	f7fe f99f 	bl	8003730 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80053f2:	480d      	ldr	r0, [pc, #52]	; (8005428 <prvInitialiseTaskLists+0x68>)
 80053f4:	f7fe f99c 	bl	8003730 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80053f8:	480c      	ldr	r0, [pc, #48]	; (800542c <prvInitialiseTaskLists+0x6c>)
 80053fa:	f7fe f999 	bl	8003730 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80053fe:	480c      	ldr	r0, [pc, #48]	; (8005430 <prvInitialiseTaskLists+0x70>)
 8005400:	f7fe f996 	bl	8003730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005404:	480b      	ldr	r0, [pc, #44]	; (8005434 <prvInitialiseTaskLists+0x74>)
 8005406:	f7fe f993 	bl	8003730 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800540a:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <prvInitialiseTaskLists+0x78>)
 800540c:	4a05      	ldr	r2, [pc, #20]	; (8005424 <prvInitialiseTaskLists+0x64>)
 800540e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005410:	4b0a      	ldr	r3, [pc, #40]	; (800543c <prvInitialiseTaskLists+0x7c>)
 8005412:	4a05      	ldr	r2, [pc, #20]	; (8005428 <prvInitialiseTaskLists+0x68>)
 8005414:	601a      	str	r2, [r3, #0]
}
 8005416:	bf00      	nop
 8005418:	3708      	adds	r7, #8
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	20000864 	.word	0x20000864
 8005424:	20000cc4 	.word	0x20000cc4
 8005428:	20000cd8 	.word	0x20000cd8
 800542c:	20000cf4 	.word	0x20000cf4
 8005430:	20000d08 	.word	0x20000d08
 8005434:	20000d20 	.word	0x20000d20
 8005438:	20000cec 	.word	0x20000cec
 800543c:	20000cf0 	.word	0x20000cf0

08005440 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005446:	e019      	b.n	800547c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005448:	f000 fed4 	bl	80061f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800544c:	4b10      	ldr	r3, [pc, #64]	; (8005490 <prvCheckTasksWaitingTermination+0x50>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	3304      	adds	r3, #4
 8005458:	4618      	mov	r0, r3
 800545a:	f7fe f9f3 	bl	8003844 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800545e:	4b0d      	ldr	r3, [pc, #52]	; (8005494 <prvCheckTasksWaitingTermination+0x54>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	3b01      	subs	r3, #1
 8005464:	4a0b      	ldr	r2, [pc, #44]	; (8005494 <prvCheckTasksWaitingTermination+0x54>)
 8005466:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005468:	4b0b      	ldr	r3, [pc, #44]	; (8005498 <prvCheckTasksWaitingTermination+0x58>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	3b01      	subs	r3, #1
 800546e:	4a0a      	ldr	r2, [pc, #40]	; (8005498 <prvCheckTasksWaitingTermination+0x58>)
 8005470:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005472:	f000 feef 	bl	8006254 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f810 	bl	800549c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800547c:	4b06      	ldr	r3, [pc, #24]	; (8005498 <prvCheckTasksWaitingTermination+0x58>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d1e1      	bne.n	8005448 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005484:	bf00      	nop
 8005486:	bf00      	nop
 8005488:	3708      	adds	r7, #8
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	20000d08 	.word	0x20000d08
 8005494:	20000d34 	.word	0x20000d34
 8005498:	20000d1c 	.word	0x20000d1c

0800549c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3354      	adds	r3, #84	; 0x54
 80054a8:	4618      	mov	r0, r3
 80054aa:	f001 fa59 	bl	8006960 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d108      	bne.n	80054ca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054bc:	4618      	mov	r0, r3
 80054be:	f001 f887 	bl	80065d0 <vPortFree>
				vPortFree( pxTCB );
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f001 f884 	bl	80065d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80054c8:	e018      	b.n	80054fc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d103      	bne.n	80054dc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f001 f87b 	bl	80065d0 <vPortFree>
	}
 80054da:	e00f      	b.n	80054fc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80054e2:	2b02      	cmp	r3, #2
 80054e4:	d00a      	beq.n	80054fc <prvDeleteTCB+0x60>
	__asm volatile
 80054e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ea:	f383 8811 	msr	BASEPRI, r3
 80054ee:	f3bf 8f6f 	isb	sy
 80054f2:	f3bf 8f4f 	dsb	sy
 80054f6:	60fb      	str	r3, [r7, #12]
}
 80054f8:	bf00      	nop
 80054fa:	e7fe      	b.n	80054fa <prvDeleteTCB+0x5e>
	}
 80054fc:	bf00      	nop
 80054fe:	3710      	adds	r7, #16
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005504:	b480      	push	{r7}
 8005506:	b083      	sub	sp, #12
 8005508:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800550a:	4b0c      	ldr	r3, [pc, #48]	; (800553c <prvResetNextTaskUnblockTime+0x38>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d104      	bne.n	800551e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005514:	4b0a      	ldr	r3, [pc, #40]	; (8005540 <prvResetNextTaskUnblockTime+0x3c>)
 8005516:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800551a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800551c:	e008      	b.n	8005530 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800551e:	4b07      	ldr	r3, [pc, #28]	; (800553c <prvResetNextTaskUnblockTime+0x38>)
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	4a04      	ldr	r2, [pc, #16]	; (8005540 <prvResetNextTaskUnblockTime+0x3c>)
 800552e:	6013      	str	r3, [r2, #0]
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr
 800553c:	20000cec 	.word	0x20000cec
 8005540:	20000d54 	.word	0x20000d54

08005544 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005544:	b480      	push	{r7}
 8005546:	b083      	sub	sp, #12
 8005548:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800554a:	4b0b      	ldr	r3, [pc, #44]	; (8005578 <xTaskGetSchedulerState+0x34>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d102      	bne.n	8005558 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005552:	2301      	movs	r3, #1
 8005554:	607b      	str	r3, [r7, #4]
 8005556:	e008      	b.n	800556a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005558:	4b08      	ldr	r3, [pc, #32]	; (800557c <xTaskGetSchedulerState+0x38>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d102      	bne.n	8005566 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005560:	2302      	movs	r3, #2
 8005562:	607b      	str	r3, [r7, #4]
 8005564:	e001      	b.n	800556a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005566:	2300      	movs	r3, #0
 8005568:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800556a:	687b      	ldr	r3, [r7, #4]
	}
 800556c:	4618      	mov	r0, r3
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	20000d40 	.word	0x20000d40
 800557c:	20000d5c 	.word	0x20000d5c

08005580 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d051      	beq.n	800563a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800559a:	4b2a      	ldr	r3, [pc, #168]	; (8005644 <xTaskPriorityInherit+0xc4>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d241      	bcs.n	8005628 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	699b      	ldr	r3, [r3, #24]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	db06      	blt.n	80055ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80055ac:	4b25      	ldr	r3, [pc, #148]	; (8005644 <xTaskPriorityInherit+0xc4>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80055ba:	68bb      	ldr	r3, [r7, #8]
 80055bc:	6959      	ldr	r1, [r3, #20]
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c2:	4613      	mov	r3, r2
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	009b      	lsls	r3, r3, #2
 80055ca:	4a1f      	ldr	r2, [pc, #124]	; (8005648 <xTaskPriorityInherit+0xc8>)
 80055cc:	4413      	add	r3, r2
 80055ce:	4299      	cmp	r1, r3
 80055d0:	d122      	bne.n	8005618 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	3304      	adds	r3, #4
 80055d6:	4618      	mov	r0, r3
 80055d8:	f7fe f934 	bl	8003844 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80055dc:	4b19      	ldr	r3, [pc, #100]	; (8005644 <xTaskPriorityInherit+0xc4>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ea:	4b18      	ldr	r3, [pc, #96]	; (800564c <xTaskPriorityInherit+0xcc>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d903      	bls.n	80055fa <xTaskPriorityInherit+0x7a>
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f6:	4a15      	ldr	r2, [pc, #84]	; (800564c <xTaskPriorityInherit+0xcc>)
 80055f8:	6013      	str	r3, [r2, #0]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055fe:	4613      	mov	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4a10      	ldr	r2, [pc, #64]	; (8005648 <xTaskPriorityInherit+0xc8>)
 8005608:	441a      	add	r2, r3
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	3304      	adds	r3, #4
 800560e:	4619      	mov	r1, r3
 8005610:	4610      	mov	r0, r2
 8005612:	f7fe f8ba 	bl	800378a <vListInsertEnd>
 8005616:	e004      	b.n	8005622 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005618:	4b0a      	ldr	r3, [pc, #40]	; (8005644 <xTaskPriorityInherit+0xc4>)
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005622:	2301      	movs	r3, #1
 8005624:	60fb      	str	r3, [r7, #12]
 8005626:	e008      	b.n	800563a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800562c:	4b05      	ldr	r3, [pc, #20]	; (8005644 <xTaskPriorityInherit+0xc4>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005632:	429a      	cmp	r2, r3
 8005634:	d201      	bcs.n	800563a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005636:	2301      	movs	r3, #1
 8005638:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800563a:	68fb      	ldr	r3, [r7, #12]
	}
 800563c:	4618      	mov	r0, r3
 800563e:	3710      	adds	r7, #16
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}
 8005644:	20000860 	.word	0x20000860
 8005648:	20000864 	.word	0x20000864
 800564c:	20000d3c 	.word	0x20000d3c

08005650 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005650:	b580      	push	{r7, lr}
 8005652:	b086      	sub	sp, #24
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800565c:	2300      	movs	r3, #0
 800565e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d056      	beq.n	8005714 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005666:	4b2e      	ldr	r3, [pc, #184]	; (8005720 <xTaskPriorityDisinherit+0xd0>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	429a      	cmp	r2, r3
 800566e:	d00a      	beq.n	8005686 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	60fb      	str	r3, [r7, #12]
}
 8005682:	bf00      	nop
 8005684:	e7fe      	b.n	8005684 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800568a:	2b00      	cmp	r3, #0
 800568c:	d10a      	bne.n	80056a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800568e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005692:	f383 8811 	msr	BASEPRI, r3
 8005696:	f3bf 8f6f 	isb	sy
 800569a:	f3bf 8f4f 	dsb	sy
 800569e:	60bb      	str	r3, [r7, #8]
}
 80056a0:	bf00      	nop
 80056a2:	e7fe      	b.n	80056a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a8:	1e5a      	subs	r2, r3, #1
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b6:	429a      	cmp	r2, r3
 80056b8:	d02c      	beq.n	8005714 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d128      	bne.n	8005714 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	3304      	adds	r3, #4
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7fe f8bc 	bl	8003844 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056d0:	693b      	ldr	r3, [r7, #16]
 80056d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056e4:	4b0f      	ldr	r3, [pc, #60]	; (8005724 <xTaskPriorityDisinherit+0xd4>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d903      	bls.n	80056f4 <xTaskPriorityDisinherit+0xa4>
 80056ec:	693b      	ldr	r3, [r7, #16]
 80056ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f0:	4a0c      	ldr	r2, [pc, #48]	; (8005724 <xTaskPriorityDisinherit+0xd4>)
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f8:	4613      	mov	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	4413      	add	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	4a09      	ldr	r2, [pc, #36]	; (8005728 <xTaskPriorityDisinherit+0xd8>)
 8005702:	441a      	add	r2, r3
 8005704:	693b      	ldr	r3, [r7, #16]
 8005706:	3304      	adds	r3, #4
 8005708:	4619      	mov	r1, r3
 800570a:	4610      	mov	r0, r2
 800570c:	f7fe f83d 	bl	800378a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005710:	2301      	movs	r3, #1
 8005712:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005714:	697b      	ldr	r3, [r7, #20]
	}
 8005716:	4618      	mov	r0, r3
 8005718:	3718      	adds	r7, #24
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	20000860 	.word	0x20000860
 8005724:	20000d3c 	.word	0x20000d3c
 8005728:	20000864 	.word	0x20000864

0800572c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800572c:	b580      	push	{r7, lr}
 800572e:	b088      	sub	sp, #32
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800573a:	2301      	movs	r3, #1
 800573c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d06a      	beq.n	800581a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005744:	69bb      	ldr	r3, [r7, #24]
 8005746:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10a      	bne.n	8005762 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800574c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	60fb      	str	r3, [r7, #12]
}
 800575e:	bf00      	nop
 8005760:	e7fe      	b.n	8005760 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005762:	69bb      	ldr	r3, [r7, #24]
 8005764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005766:	683a      	ldr	r2, [r7, #0]
 8005768:	429a      	cmp	r2, r3
 800576a:	d902      	bls.n	8005772 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	61fb      	str	r3, [r7, #28]
 8005770:	e002      	b.n	8005778 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005776:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577c:	69fa      	ldr	r2, [r7, #28]
 800577e:	429a      	cmp	r2, r3
 8005780:	d04b      	beq.n	800581a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005786:	697a      	ldr	r2, [r7, #20]
 8005788:	429a      	cmp	r2, r3
 800578a:	d146      	bne.n	800581a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800578c:	4b25      	ldr	r3, [pc, #148]	; (8005824 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	429a      	cmp	r2, r3
 8005794:	d10a      	bne.n	80057ac <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800579a:	f383 8811 	msr	BASEPRI, r3
 800579e:	f3bf 8f6f 	isb	sy
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	60bb      	str	r3, [r7, #8]
}
 80057a8:	bf00      	nop
 80057aa:	e7fe      	b.n	80057aa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	69fa      	ldr	r2, [r7, #28]
 80057b6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	699b      	ldr	r3, [r3, #24]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	db04      	blt.n	80057ca <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057c0:	69fb      	ldr	r3, [r7, #28]
 80057c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80057c6:	69bb      	ldr	r3, [r7, #24]
 80057c8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	6959      	ldr	r1, [r3, #20]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	4613      	mov	r3, r2
 80057d2:	009b      	lsls	r3, r3, #2
 80057d4:	4413      	add	r3, r2
 80057d6:	009b      	lsls	r3, r3, #2
 80057d8:	4a13      	ldr	r2, [pc, #76]	; (8005828 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80057da:	4413      	add	r3, r2
 80057dc:	4299      	cmp	r1, r3
 80057de:	d11c      	bne.n	800581a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	3304      	adds	r3, #4
 80057e4:	4618      	mov	r0, r3
 80057e6:	f7fe f82d 	bl	8003844 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80057ea:	69bb      	ldr	r3, [r7, #24]
 80057ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057ee:	4b0f      	ldr	r3, [pc, #60]	; (800582c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d903      	bls.n	80057fe <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80057f6:	69bb      	ldr	r3, [r7, #24]
 80057f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057fa:	4a0c      	ldr	r2, [pc, #48]	; (800582c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80057fc:	6013      	str	r3, [r2, #0]
 80057fe:	69bb      	ldr	r3, [r7, #24]
 8005800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005802:	4613      	mov	r3, r2
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	009b      	lsls	r3, r3, #2
 800580a:	4a07      	ldr	r2, [pc, #28]	; (8005828 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800580c:	441a      	add	r2, r3
 800580e:	69bb      	ldr	r3, [r7, #24]
 8005810:	3304      	adds	r3, #4
 8005812:	4619      	mov	r1, r3
 8005814:	4610      	mov	r0, r2
 8005816:	f7fd ffb8 	bl	800378a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800581a:	bf00      	nop
 800581c:	3720      	adds	r7, #32
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	20000860 	.word	0x20000860
 8005828:	20000864 	.word	0x20000864
 800582c:	20000d3c 	.word	0x20000d3c

08005830 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005830:	b480      	push	{r7}
 8005832:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005834:	4b07      	ldr	r3, [pc, #28]	; (8005854 <pvTaskIncrementMutexHeldCount+0x24>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d004      	beq.n	8005846 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800583c:	4b05      	ldr	r3, [pc, #20]	; (8005854 <pvTaskIncrementMutexHeldCount+0x24>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005842:	3201      	adds	r2, #1
 8005844:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005846:	4b03      	ldr	r3, [pc, #12]	; (8005854 <pvTaskIncrementMutexHeldCount+0x24>)
 8005848:	681b      	ldr	r3, [r3, #0]
	}
 800584a:	4618      	mov	r0, r3
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	20000860 	.word	0x20000860

08005858 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b084      	sub	sp, #16
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005862:	4b21      	ldr	r3, [pc, #132]	; (80058e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005868:	4b20      	ldr	r3, [pc, #128]	; (80058ec <prvAddCurrentTaskToDelayedList+0x94>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	3304      	adds	r3, #4
 800586e:	4618      	mov	r0, r3
 8005870:	f7fd ffe8 	bl	8003844 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800587a:	d10a      	bne.n	8005892 <prvAddCurrentTaskToDelayedList+0x3a>
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d007      	beq.n	8005892 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005882:	4b1a      	ldr	r3, [pc, #104]	; (80058ec <prvAddCurrentTaskToDelayedList+0x94>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	3304      	adds	r3, #4
 8005888:	4619      	mov	r1, r3
 800588a:	4819      	ldr	r0, [pc, #100]	; (80058f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800588c:	f7fd ff7d 	bl	800378a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005890:	e026      	b.n	80058e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005892:	68fa      	ldr	r2, [r7, #12]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	4413      	add	r3, r2
 8005898:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800589a:	4b14      	ldr	r3, [pc, #80]	; (80058ec <prvAddCurrentTaskToDelayedList+0x94>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68ba      	ldr	r2, [r7, #8]
 80058a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d209      	bcs.n	80058be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058aa:	4b12      	ldr	r3, [pc, #72]	; (80058f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	4b0f      	ldr	r3, [pc, #60]	; (80058ec <prvAddCurrentTaskToDelayedList+0x94>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	3304      	adds	r3, #4
 80058b4:	4619      	mov	r1, r3
 80058b6:	4610      	mov	r0, r2
 80058b8:	f7fd ff8b 	bl	80037d2 <vListInsert>
}
 80058bc:	e010      	b.n	80058e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80058be:	4b0e      	ldr	r3, [pc, #56]	; (80058f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80058c0:	681a      	ldr	r2, [r3, #0]
 80058c2:	4b0a      	ldr	r3, [pc, #40]	; (80058ec <prvAddCurrentTaskToDelayedList+0x94>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	3304      	adds	r3, #4
 80058c8:	4619      	mov	r1, r3
 80058ca:	4610      	mov	r0, r2
 80058cc:	f7fd ff81 	bl	80037d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80058d0:	4b0a      	ldr	r3, [pc, #40]	; (80058fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68ba      	ldr	r2, [r7, #8]
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d202      	bcs.n	80058e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80058da:	4a08      	ldr	r2, [pc, #32]	; (80058fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	6013      	str	r3, [r2, #0]
}
 80058e0:	bf00      	nop
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	20000d38 	.word	0x20000d38
 80058ec:	20000860 	.word	0x20000860
 80058f0:	20000d20 	.word	0x20000d20
 80058f4:	20000cf0 	.word	0x20000cf0
 80058f8:	20000cec 	.word	0x20000cec
 80058fc:	20000d54 	.word	0x20000d54

08005900 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b08a      	sub	sp, #40	; 0x28
 8005904:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005906:	2300      	movs	r3, #0
 8005908:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800590a:	f000 fb07 	bl	8005f1c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800590e:	4b1c      	ldr	r3, [pc, #112]	; (8005980 <xTimerCreateTimerTask+0x80>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d021      	beq.n	800595a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005916:	2300      	movs	r3, #0
 8005918:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800591a:	2300      	movs	r3, #0
 800591c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800591e:	1d3a      	adds	r2, r7, #4
 8005920:	f107 0108 	add.w	r1, r7, #8
 8005924:	f107 030c 	add.w	r3, r7, #12
 8005928:	4618      	mov	r0, r3
 800592a:	f7fd fee7 	bl	80036fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800592e:	6879      	ldr	r1, [r7, #4]
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	9202      	str	r2, [sp, #8]
 8005936:	9301      	str	r3, [sp, #4]
 8005938:	2302      	movs	r3, #2
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	2300      	movs	r3, #0
 800593e:	460a      	mov	r2, r1
 8005940:	4910      	ldr	r1, [pc, #64]	; (8005984 <xTimerCreateTimerTask+0x84>)
 8005942:	4811      	ldr	r0, [pc, #68]	; (8005988 <xTimerCreateTimerTask+0x88>)
 8005944:	f7fe ffb6 	bl	80048b4 <xTaskCreateStatic>
 8005948:	4603      	mov	r3, r0
 800594a:	4a10      	ldr	r2, [pc, #64]	; (800598c <xTimerCreateTimerTask+0x8c>)
 800594c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800594e:	4b0f      	ldr	r3, [pc, #60]	; (800598c <xTimerCreateTimerTask+0x8c>)
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d001      	beq.n	800595a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005956:	2301      	movs	r3, #1
 8005958:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	2b00      	cmp	r3, #0
 800595e:	d10a      	bne.n	8005976 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005964:	f383 8811 	msr	BASEPRI, r3
 8005968:	f3bf 8f6f 	isb	sy
 800596c:	f3bf 8f4f 	dsb	sy
 8005970:	613b      	str	r3, [r7, #16]
}
 8005972:	bf00      	nop
 8005974:	e7fe      	b.n	8005974 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005976:	697b      	ldr	r3, [r7, #20]
}
 8005978:	4618      	mov	r0, r3
 800597a:	3718      	adds	r7, #24
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	20000d90 	.word	0x20000d90
 8005984:	0800721c 	.word	0x0800721c
 8005988:	08005ac5 	.word	0x08005ac5
 800598c:	20000d94 	.word	0x20000d94

08005990 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b08a      	sub	sp, #40	; 0x28
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	60b9      	str	r1, [r7, #8]
 800599a:	607a      	str	r2, [r7, #4]
 800599c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800599e:	2300      	movs	r3, #0
 80059a0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10a      	bne.n	80059be <xTimerGenericCommand+0x2e>
	__asm volatile
 80059a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	623b      	str	r3, [r7, #32]
}
 80059ba:	bf00      	nop
 80059bc:	e7fe      	b.n	80059bc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80059be:	4b1a      	ldr	r3, [pc, #104]	; (8005a28 <xTimerGenericCommand+0x98>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d02a      	beq.n	8005a1c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	2b05      	cmp	r3, #5
 80059d6:	dc18      	bgt.n	8005a0a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80059d8:	f7ff fdb4 	bl	8005544 <xTaskGetSchedulerState>
 80059dc:	4603      	mov	r3, r0
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d109      	bne.n	80059f6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80059e2:	4b11      	ldr	r3, [pc, #68]	; (8005a28 <xTimerGenericCommand+0x98>)
 80059e4:	6818      	ldr	r0, [r3, #0]
 80059e6:	f107 0110 	add.w	r1, r7, #16
 80059ea:	2300      	movs	r3, #0
 80059ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059ee:	f7fe f8fb 	bl	8003be8 <xQueueGenericSend>
 80059f2:	6278      	str	r0, [r7, #36]	; 0x24
 80059f4:	e012      	b.n	8005a1c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80059f6:	4b0c      	ldr	r3, [pc, #48]	; (8005a28 <xTimerGenericCommand+0x98>)
 80059f8:	6818      	ldr	r0, [r3, #0]
 80059fa:	f107 0110 	add.w	r1, r7, #16
 80059fe:	2300      	movs	r3, #0
 8005a00:	2200      	movs	r2, #0
 8005a02:	f7fe f8f1 	bl	8003be8 <xQueueGenericSend>
 8005a06:	6278      	str	r0, [r7, #36]	; 0x24
 8005a08:	e008      	b.n	8005a1c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005a0a:	4b07      	ldr	r3, [pc, #28]	; (8005a28 <xTimerGenericCommand+0x98>)
 8005a0c:	6818      	ldr	r0, [r3, #0]
 8005a0e:	f107 0110 	add.w	r1, r7, #16
 8005a12:	2300      	movs	r3, #0
 8005a14:	683a      	ldr	r2, [r7, #0]
 8005a16:	f7fe f9e5 	bl	8003de4 <xQueueGenericSendFromISR>
 8005a1a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3728      	adds	r7, #40	; 0x28
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	20000d90 	.word	0x20000d90

08005a2c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	6078      	str	r0, [r7, #4]
 8005a34:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a36:	4b22      	ldr	r3, [pc, #136]	; (8005ac0 <prvProcessExpiredTimer+0x94>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	3304      	adds	r3, #4
 8005a44:	4618      	mov	r0, r3
 8005a46:	f7fd fefd 	bl	8003844 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d022      	beq.n	8005a9e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	699a      	ldr	r2, [r3, #24]
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	18d1      	adds	r1, r2, r3
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	6978      	ldr	r0, [r7, #20]
 8005a66:	f000 f8d1 	bl	8005c0c <prvInsertTimerInActiveList>
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d01f      	beq.n	8005ab0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005a70:	2300      	movs	r3, #0
 8005a72:	9300      	str	r3, [sp, #0]
 8005a74:	2300      	movs	r3, #0
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	2100      	movs	r1, #0
 8005a7a:	6978      	ldr	r0, [r7, #20]
 8005a7c:	f7ff ff88 	bl	8005990 <xTimerGenericCommand>
 8005a80:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005a82:	693b      	ldr	r3, [r7, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d113      	bne.n	8005ab0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a8c:	f383 8811 	msr	BASEPRI, r3
 8005a90:	f3bf 8f6f 	isb	sy
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	60fb      	str	r3, [r7, #12]
}
 8005a9a:	bf00      	nop
 8005a9c:	e7fe      	b.n	8005a9c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005aa4:	f023 0301 	bic.w	r3, r3, #1
 8005aa8:	b2da      	uxtb	r2, r3
 8005aaa:	697b      	ldr	r3, [r7, #20]
 8005aac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ab0:	697b      	ldr	r3, [r7, #20]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	6978      	ldr	r0, [r7, #20]
 8005ab6:	4798      	blx	r3
}
 8005ab8:	bf00      	nop
 8005aba:	3718      	adds	r7, #24
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	20000d88 	.word	0x20000d88

08005ac4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005acc:	f107 0308 	add.w	r3, r7, #8
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f000 f857 	bl	8005b84 <prvGetNextExpireTime>
 8005ad6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	4619      	mov	r1, r3
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f000 f803 	bl	8005ae8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ae2:	f000 f8d5 	bl	8005c90 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ae6:	e7f1      	b.n	8005acc <prvTimerTask+0x8>

08005ae8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b084      	sub	sp, #16
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005af2:	f7ff f93b 	bl	8004d6c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005af6:	f107 0308 	add.w	r3, r7, #8
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 f866 	bl	8005bcc <prvSampleTimeNow>
 8005b00:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d130      	bne.n	8005b6a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d10a      	bne.n	8005b24 <prvProcessTimerOrBlockTask+0x3c>
 8005b0e:	687a      	ldr	r2, [r7, #4]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	429a      	cmp	r2, r3
 8005b14:	d806      	bhi.n	8005b24 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005b16:	f7ff f937 	bl	8004d88 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005b1a:	68f9      	ldr	r1, [r7, #12]
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7ff ff85 	bl	8005a2c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005b22:	e024      	b.n	8005b6e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d008      	beq.n	8005b3c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005b2a:	4b13      	ldr	r3, [pc, #76]	; (8005b78 <prvProcessTimerOrBlockTask+0x90>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d101      	bne.n	8005b38 <prvProcessTimerOrBlockTask+0x50>
 8005b34:	2301      	movs	r3, #1
 8005b36:	e000      	b.n	8005b3a <prvProcessTimerOrBlockTask+0x52>
 8005b38:	2300      	movs	r3, #0
 8005b3a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005b3c:	4b0f      	ldr	r3, [pc, #60]	; (8005b7c <prvProcessTimerOrBlockTask+0x94>)
 8005b3e:	6818      	ldr	r0, [r3, #0]
 8005b40:	687a      	ldr	r2, [r7, #4]
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	1ad3      	subs	r3, r2, r3
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	4619      	mov	r1, r3
 8005b4a:	f7fe fe7f 	bl	800484c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005b4e:	f7ff f91b 	bl	8004d88 <xTaskResumeAll>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d10a      	bne.n	8005b6e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005b58:	4b09      	ldr	r3, [pc, #36]	; (8005b80 <prvProcessTimerOrBlockTask+0x98>)
 8005b5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	f3bf 8f4f 	dsb	sy
 8005b64:	f3bf 8f6f 	isb	sy
}
 8005b68:	e001      	b.n	8005b6e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005b6a:	f7ff f90d 	bl	8004d88 <xTaskResumeAll>
}
 8005b6e:	bf00      	nop
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
 8005b76:	bf00      	nop
 8005b78:	20000d8c 	.word	0x20000d8c
 8005b7c:	20000d90 	.word	0x20000d90
 8005b80:	e000ed04 	.word	0xe000ed04

08005b84 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005b8c:	4b0e      	ldr	r3, [pc, #56]	; (8005bc8 <prvGetNextExpireTime+0x44>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <prvGetNextExpireTime+0x16>
 8005b96:	2201      	movs	r2, #1
 8005b98:	e000      	b.n	8005b9c <prvGetNextExpireTime+0x18>
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d105      	bne.n	8005bb4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005ba8:	4b07      	ldr	r3, [pc, #28]	; (8005bc8 <prvGetNextExpireTime+0x44>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	68db      	ldr	r3, [r3, #12]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	e001      	b.n	8005bb8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr
 8005bc6:	bf00      	nop
 8005bc8:	20000d88 	.word	0x20000d88

08005bcc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005bd4:	f7ff f976 	bl	8004ec4 <xTaskGetTickCount>
 8005bd8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005bda:	4b0b      	ldr	r3, [pc, #44]	; (8005c08 <prvSampleTimeNow+0x3c>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d205      	bcs.n	8005bf0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005be4:	f000 f936 	bl	8005e54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2201      	movs	r2, #1
 8005bec:	601a      	str	r2, [r3, #0]
 8005bee:	e002      	b.n	8005bf6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005bf6:	4a04      	ldr	r2, [pc, #16]	; (8005c08 <prvSampleTimeNow+0x3c>)
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}
 8005c06:	bf00      	nop
 8005c08:	20000d98 	.word	0x20000d98

08005c0c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	60f8      	str	r0, [r7, #12]
 8005c14:	60b9      	str	r1, [r7, #8]
 8005c16:	607a      	str	r2, [r7, #4]
 8005c18:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d812      	bhi.n	8005c58 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c32:	687a      	ldr	r2, [r7, #4]
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	1ad2      	subs	r2, r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	699b      	ldr	r3, [r3, #24]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d302      	bcc.n	8005c46 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005c40:	2301      	movs	r3, #1
 8005c42:	617b      	str	r3, [r7, #20]
 8005c44:	e01b      	b.n	8005c7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005c46:	4b10      	ldr	r3, [pc, #64]	; (8005c88 <prvInsertTimerInActiveList+0x7c>)
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4610      	mov	r0, r2
 8005c52:	f7fd fdbe 	bl	80037d2 <vListInsert>
 8005c56:	e012      	b.n	8005c7e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005c58:	687a      	ldr	r2, [r7, #4]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d206      	bcs.n	8005c6e <prvInsertTimerInActiveList+0x62>
 8005c60:	68ba      	ldr	r2, [r7, #8]
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d302      	bcc.n	8005c6e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005c68:	2301      	movs	r3, #1
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	e007      	b.n	8005c7e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005c6e:	4b07      	ldr	r3, [pc, #28]	; (8005c8c <prvInsertTimerInActiveList+0x80>)
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	3304      	adds	r3, #4
 8005c76:	4619      	mov	r1, r3
 8005c78:	4610      	mov	r0, r2
 8005c7a:	f7fd fdaa 	bl	80037d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005c7e:	697b      	ldr	r3, [r7, #20]
}
 8005c80:	4618      	mov	r0, r3
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	20000d8c 	.word	0x20000d8c
 8005c8c:	20000d88 	.word	0x20000d88

08005c90 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08e      	sub	sp, #56	; 0x38
 8005c94:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c96:	e0ca      	b.n	8005e2e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	da18      	bge.n	8005cd0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005c9e:	1d3b      	adds	r3, r7, #4
 8005ca0:	3304      	adds	r3, #4
 8005ca2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d10a      	bne.n	8005cc0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	61fb      	str	r3, [r7, #28]
}
 8005cbc:	bf00      	nop
 8005cbe:	e7fe      	b.n	8005cbe <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cc6:	6850      	ldr	r0, [r2, #4]
 8005cc8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cca:	6892      	ldr	r2, [r2, #8]
 8005ccc:	4611      	mov	r1, r2
 8005cce:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f2c0 80aa 	blt.w	8005e2c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d004      	beq.n	8005cee <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	4618      	mov	r0, r3
 8005cea:	f7fd fdab 	bl	8003844 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cee:	463b      	mov	r3, r7
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f7ff ff6b 	bl	8005bcc <prvSampleTimeNow>
 8005cf6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2b09      	cmp	r3, #9
 8005cfc:	f200 8097 	bhi.w	8005e2e <prvProcessReceivedCommands+0x19e>
 8005d00:	a201      	add	r2, pc, #4	; (adr r2, 8005d08 <prvProcessReceivedCommands+0x78>)
 8005d02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d06:	bf00      	nop
 8005d08:	08005d31 	.word	0x08005d31
 8005d0c:	08005d31 	.word	0x08005d31
 8005d10:	08005d31 	.word	0x08005d31
 8005d14:	08005da5 	.word	0x08005da5
 8005d18:	08005db9 	.word	0x08005db9
 8005d1c:	08005e03 	.word	0x08005e03
 8005d20:	08005d31 	.word	0x08005d31
 8005d24:	08005d31 	.word	0x08005d31
 8005d28:	08005da5 	.word	0x08005da5
 8005d2c:	08005db9 	.word	0x08005db9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d36:	f043 0301 	orr.w	r3, r3, #1
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005d42:	68ba      	ldr	r2, [r7, #8]
 8005d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	18d1      	adds	r1, r2, r3
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d50:	f7ff ff5c 	bl	8005c0c <prvInsertTimerInActiveList>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d069      	beq.n	8005e2e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005d5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d60:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005d68:	f003 0304 	and.w	r3, r3, #4
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d05e      	beq.n	8005e2e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005d70:	68ba      	ldr	r2, [r7, #8]
 8005d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d74:	699b      	ldr	r3, [r3, #24]
 8005d76:	441a      	add	r2, r3
 8005d78:	2300      	movs	r3, #0
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	2100      	movs	r1, #0
 8005d80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005d82:	f7ff fe05 	bl	8005990 <xTimerGenericCommand>
 8005d86:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005d88:	6a3b      	ldr	r3, [r7, #32]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d14f      	bne.n	8005e2e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	61bb      	str	r3, [r7, #24]
}
 8005da0:	bf00      	nop
 8005da2:	e7fe      	b.n	8005da2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005daa:	f023 0301 	bic.w	r3, r3, #1
 8005dae:	b2da      	uxtb	r2, r3
 8005db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005db6:	e03a      	b.n	8005e2e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005dbe:	f043 0301 	orr.w	r3, r3, #1
 8005dc2:	b2da      	uxtb	r2, r3
 8005dc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dc6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10a      	bne.n	8005dee <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ddc:	f383 8811 	msr	BASEPRI, r3
 8005de0:	f3bf 8f6f 	isb	sy
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	617b      	str	r3, [r7, #20]
}
 8005dea:	bf00      	nop
 8005dec:	e7fe      	b.n	8005dec <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df0:	699a      	ldr	r2, [r3, #24]
 8005df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df4:	18d1      	adds	r1, r2, r3
 8005df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dfa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005dfc:	f7ff ff06 	bl	8005c0c <prvInsertTimerInActiveList>
					break;
 8005e00:	e015      	b.n	8005e2e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e08:	f003 0302 	and.w	r3, r3, #2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d103      	bne.n	8005e18 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005e10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e12:	f000 fbdd 	bl	80065d0 <vPortFree>
 8005e16:	e00a      	b.n	8005e2e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e1a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e1e:	f023 0301 	bic.w	r3, r3, #1
 8005e22:	b2da      	uxtb	r2, r3
 8005e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e26:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005e2a:	e000      	b.n	8005e2e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005e2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e2e:	4b08      	ldr	r3, [pc, #32]	; (8005e50 <prvProcessReceivedCommands+0x1c0>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	1d39      	adds	r1, r7, #4
 8005e34:	2200      	movs	r2, #0
 8005e36:	4618      	mov	r0, r3
 8005e38:	f7fe f8fc 	bl	8004034 <xQueueReceive>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	f47f af2a 	bne.w	8005c98 <prvProcessReceivedCommands+0x8>
	}
}
 8005e44:	bf00      	nop
 8005e46:	bf00      	nop
 8005e48:	3730      	adds	r7, #48	; 0x30
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	bf00      	nop
 8005e50:	20000d90 	.word	0x20000d90

08005e54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005e5a:	e048      	b.n	8005eee <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005e5c:	4b2d      	ldr	r3, [pc, #180]	; (8005f14 <prvSwitchTimerLists+0xc0>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	68db      	ldr	r3, [r3, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e66:	4b2b      	ldr	r3, [pc, #172]	; (8005f14 <prvSwitchTimerLists+0xc0>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	3304      	adds	r3, #4
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7fd fce5 	bl	8003844 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e88:	f003 0304 	and.w	r3, r3, #4
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d02e      	beq.n	8005eee <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	693a      	ldr	r2, [r7, #16]
 8005e96:	4413      	add	r3, r2
 8005e98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005e9a:	68ba      	ldr	r2, [r7, #8]
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d90e      	bls.n	8005ec0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	68ba      	ldr	r2, [r7, #8]
 8005ea6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005eae:	4b19      	ldr	r3, [pc, #100]	; (8005f14 <prvSwitchTimerLists+0xc0>)
 8005eb0:	681a      	ldr	r2, [r3, #0]
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	4619      	mov	r1, r3
 8005eb8:	4610      	mov	r0, r2
 8005eba:	f7fd fc8a 	bl	80037d2 <vListInsert>
 8005ebe:	e016      	b.n	8005eee <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	693a      	ldr	r2, [r7, #16]
 8005ec8:	2100      	movs	r1, #0
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f7ff fd60 	bl	8005990 <xTimerGenericCommand>
 8005ed0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10a      	bne.n	8005eee <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	603b      	str	r3, [r7, #0]
}
 8005eea:	bf00      	nop
 8005eec:	e7fe      	b.n	8005eec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005eee:	4b09      	ldr	r3, [pc, #36]	; (8005f14 <prvSwitchTimerLists+0xc0>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d1b1      	bne.n	8005e5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005ef8:	4b06      	ldr	r3, [pc, #24]	; (8005f14 <prvSwitchTimerLists+0xc0>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005efe:	4b06      	ldr	r3, [pc, #24]	; (8005f18 <prvSwitchTimerLists+0xc4>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a04      	ldr	r2, [pc, #16]	; (8005f14 <prvSwitchTimerLists+0xc0>)
 8005f04:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005f06:	4a04      	ldr	r2, [pc, #16]	; (8005f18 <prvSwitchTimerLists+0xc4>)
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	6013      	str	r3, [r2, #0]
}
 8005f0c:	bf00      	nop
 8005f0e:	3718      	adds	r7, #24
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	20000d88 	.word	0x20000d88
 8005f18:	20000d8c 	.word	0x20000d8c

08005f1c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b082      	sub	sp, #8
 8005f20:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005f22:	f000 f967 	bl	80061f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005f26:	4b15      	ldr	r3, [pc, #84]	; (8005f7c <prvCheckForValidListAndQueue+0x60>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d120      	bne.n	8005f70 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005f2e:	4814      	ldr	r0, [pc, #80]	; (8005f80 <prvCheckForValidListAndQueue+0x64>)
 8005f30:	f7fd fbfe 	bl	8003730 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005f34:	4813      	ldr	r0, [pc, #76]	; (8005f84 <prvCheckForValidListAndQueue+0x68>)
 8005f36:	f7fd fbfb 	bl	8003730 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005f3a:	4b13      	ldr	r3, [pc, #76]	; (8005f88 <prvCheckForValidListAndQueue+0x6c>)
 8005f3c:	4a10      	ldr	r2, [pc, #64]	; (8005f80 <prvCheckForValidListAndQueue+0x64>)
 8005f3e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005f40:	4b12      	ldr	r3, [pc, #72]	; (8005f8c <prvCheckForValidListAndQueue+0x70>)
 8005f42:	4a10      	ldr	r2, [pc, #64]	; (8005f84 <prvCheckForValidListAndQueue+0x68>)
 8005f44:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005f46:	2300      	movs	r3, #0
 8005f48:	9300      	str	r3, [sp, #0]
 8005f4a:	4b11      	ldr	r3, [pc, #68]	; (8005f90 <prvCheckForValidListAndQueue+0x74>)
 8005f4c:	4a11      	ldr	r2, [pc, #68]	; (8005f94 <prvCheckForValidListAndQueue+0x78>)
 8005f4e:	2110      	movs	r1, #16
 8005f50:	200a      	movs	r0, #10
 8005f52:	f7fd fd09 	bl	8003968 <xQueueGenericCreateStatic>
 8005f56:	4603      	mov	r3, r0
 8005f58:	4a08      	ldr	r2, [pc, #32]	; (8005f7c <prvCheckForValidListAndQueue+0x60>)
 8005f5a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005f5c:	4b07      	ldr	r3, [pc, #28]	; (8005f7c <prvCheckForValidListAndQueue+0x60>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d005      	beq.n	8005f70 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005f64:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <prvCheckForValidListAndQueue+0x60>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	490b      	ldr	r1, [pc, #44]	; (8005f98 <prvCheckForValidListAndQueue+0x7c>)
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	f7fe fc1a 	bl	80047a4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f70:	f000 f970 	bl	8006254 <vPortExitCritical>
}
 8005f74:	bf00      	nop
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	bf00      	nop
 8005f7c:	20000d90 	.word	0x20000d90
 8005f80:	20000d60 	.word	0x20000d60
 8005f84:	20000d74 	.word	0x20000d74
 8005f88:	20000d88 	.word	0x20000d88
 8005f8c:	20000d8c 	.word	0x20000d8c
 8005f90:	20000e3c 	.word	0x20000e3c
 8005f94:	20000d9c 	.word	0x20000d9c
 8005f98:	08007224 	.word	0x08007224

08005f9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	3b04      	subs	r3, #4
 8005fac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005fb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	3b04      	subs	r3, #4
 8005fba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	f023 0201 	bic.w	r2, r3, #1
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	3b04      	subs	r3, #4
 8005fca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005fcc:	4a0c      	ldr	r2, [pc, #48]	; (8006000 <pxPortInitialiseStack+0x64>)
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	3b14      	subs	r3, #20
 8005fd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	3b04      	subs	r3, #4
 8005fe2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f06f 0202 	mvn.w	r2, #2
 8005fea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	3b20      	subs	r3, #32
 8005ff0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	08006005 	.word	0x08006005

08006004 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006004:	b480      	push	{r7}
 8006006:	b085      	sub	sp, #20
 8006008:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800600a:	2300      	movs	r3, #0
 800600c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800600e:	4b12      	ldr	r3, [pc, #72]	; (8006058 <prvTaskExitError+0x54>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006016:	d00a      	beq.n	800602e <prvTaskExitError+0x2a>
	__asm volatile
 8006018:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601c:	f383 8811 	msr	BASEPRI, r3
 8006020:	f3bf 8f6f 	isb	sy
 8006024:	f3bf 8f4f 	dsb	sy
 8006028:	60fb      	str	r3, [r7, #12]
}
 800602a:	bf00      	nop
 800602c:	e7fe      	b.n	800602c <prvTaskExitError+0x28>
	__asm volatile
 800602e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006032:	f383 8811 	msr	BASEPRI, r3
 8006036:	f3bf 8f6f 	isb	sy
 800603a:	f3bf 8f4f 	dsb	sy
 800603e:	60bb      	str	r3, [r7, #8]
}
 8006040:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006042:	bf00      	nop
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d0fc      	beq.n	8006044 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800604a:	bf00      	nop
 800604c:	bf00      	nop
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	2000004c 	.word	0x2000004c
 800605c:	00000000 	.word	0x00000000

08006060 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006060:	4b07      	ldr	r3, [pc, #28]	; (8006080 <pxCurrentTCBConst2>)
 8006062:	6819      	ldr	r1, [r3, #0]
 8006064:	6808      	ldr	r0, [r1, #0]
 8006066:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800606a:	f380 8809 	msr	PSP, r0
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f04f 0000 	mov.w	r0, #0
 8006076:	f380 8811 	msr	BASEPRI, r0
 800607a:	4770      	bx	lr
 800607c:	f3af 8000 	nop.w

08006080 <pxCurrentTCBConst2>:
 8006080:	20000860 	.word	0x20000860
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006084:	bf00      	nop
 8006086:	bf00      	nop

08006088 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006088:	4808      	ldr	r0, [pc, #32]	; (80060ac <prvPortStartFirstTask+0x24>)
 800608a:	6800      	ldr	r0, [r0, #0]
 800608c:	6800      	ldr	r0, [r0, #0]
 800608e:	f380 8808 	msr	MSP, r0
 8006092:	f04f 0000 	mov.w	r0, #0
 8006096:	f380 8814 	msr	CONTROL, r0
 800609a:	b662      	cpsie	i
 800609c:	b661      	cpsie	f
 800609e:	f3bf 8f4f 	dsb	sy
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	df00      	svc	0
 80060a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80060aa:	bf00      	nop
 80060ac:	e000ed08 	.word	0xe000ed08

080060b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b086      	sub	sp, #24
 80060b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80060b6:	4b46      	ldr	r3, [pc, #280]	; (80061d0 <xPortStartScheduler+0x120>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a46      	ldr	r2, [pc, #280]	; (80061d4 <xPortStartScheduler+0x124>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d10a      	bne.n	80060d6 <xPortStartScheduler+0x26>
	__asm volatile
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	613b      	str	r3, [r7, #16]
}
 80060d2:	bf00      	nop
 80060d4:	e7fe      	b.n	80060d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80060d6:	4b3e      	ldr	r3, [pc, #248]	; (80061d0 <xPortStartScheduler+0x120>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a3f      	ldr	r2, [pc, #252]	; (80061d8 <xPortStartScheduler+0x128>)
 80060dc:	4293      	cmp	r3, r2
 80060de:	d10a      	bne.n	80060f6 <xPortStartScheduler+0x46>
	__asm volatile
 80060e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060e4:	f383 8811 	msr	BASEPRI, r3
 80060e8:	f3bf 8f6f 	isb	sy
 80060ec:	f3bf 8f4f 	dsb	sy
 80060f0:	60fb      	str	r3, [r7, #12]
}
 80060f2:	bf00      	nop
 80060f4:	e7fe      	b.n	80060f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80060f6:	4b39      	ldr	r3, [pc, #228]	; (80061dc <xPortStartScheduler+0x12c>)
 80060f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	22ff      	movs	r2, #255	; 0xff
 8006106:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	781b      	ldrb	r3, [r3, #0]
 800610c:	b2db      	uxtb	r3, r3
 800610e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006110:	78fb      	ldrb	r3, [r7, #3]
 8006112:	b2db      	uxtb	r3, r3
 8006114:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006118:	b2da      	uxtb	r2, r3
 800611a:	4b31      	ldr	r3, [pc, #196]	; (80061e0 <xPortStartScheduler+0x130>)
 800611c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800611e:	4b31      	ldr	r3, [pc, #196]	; (80061e4 <xPortStartScheduler+0x134>)
 8006120:	2207      	movs	r2, #7
 8006122:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006124:	e009      	b.n	800613a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006126:	4b2f      	ldr	r3, [pc, #188]	; (80061e4 <xPortStartScheduler+0x134>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3b01      	subs	r3, #1
 800612c:	4a2d      	ldr	r2, [pc, #180]	; (80061e4 <xPortStartScheduler+0x134>)
 800612e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006130:	78fb      	ldrb	r3, [r7, #3]
 8006132:	b2db      	uxtb	r3, r3
 8006134:	005b      	lsls	r3, r3, #1
 8006136:	b2db      	uxtb	r3, r3
 8006138:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800613a:	78fb      	ldrb	r3, [r7, #3]
 800613c:	b2db      	uxtb	r3, r3
 800613e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006142:	2b80      	cmp	r3, #128	; 0x80
 8006144:	d0ef      	beq.n	8006126 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006146:	4b27      	ldr	r3, [pc, #156]	; (80061e4 <xPortStartScheduler+0x134>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f1c3 0307 	rsb	r3, r3, #7
 800614e:	2b04      	cmp	r3, #4
 8006150:	d00a      	beq.n	8006168 <xPortStartScheduler+0xb8>
	__asm volatile
 8006152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006156:	f383 8811 	msr	BASEPRI, r3
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	f3bf 8f4f 	dsb	sy
 8006162:	60bb      	str	r3, [r7, #8]
}
 8006164:	bf00      	nop
 8006166:	e7fe      	b.n	8006166 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006168:	4b1e      	ldr	r3, [pc, #120]	; (80061e4 <xPortStartScheduler+0x134>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	021b      	lsls	r3, r3, #8
 800616e:	4a1d      	ldr	r2, [pc, #116]	; (80061e4 <xPortStartScheduler+0x134>)
 8006170:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006172:	4b1c      	ldr	r3, [pc, #112]	; (80061e4 <xPortStartScheduler+0x134>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800617a:	4a1a      	ldr	r2, [pc, #104]	; (80061e4 <xPortStartScheduler+0x134>)
 800617c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	b2da      	uxtb	r2, r3
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006186:	4b18      	ldr	r3, [pc, #96]	; (80061e8 <xPortStartScheduler+0x138>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a17      	ldr	r2, [pc, #92]	; (80061e8 <xPortStartScheduler+0x138>)
 800618c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006190:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006192:	4b15      	ldr	r3, [pc, #84]	; (80061e8 <xPortStartScheduler+0x138>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a14      	ldr	r2, [pc, #80]	; (80061e8 <xPortStartScheduler+0x138>)
 8006198:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800619c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800619e:	f000 f8dd 	bl	800635c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80061a2:	4b12      	ldr	r3, [pc, #72]	; (80061ec <xPortStartScheduler+0x13c>)
 80061a4:	2200      	movs	r2, #0
 80061a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80061a8:	f000 f8fc 	bl	80063a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80061ac:	4b10      	ldr	r3, [pc, #64]	; (80061f0 <xPortStartScheduler+0x140>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a0f      	ldr	r2, [pc, #60]	; (80061f0 <xPortStartScheduler+0x140>)
 80061b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80061b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80061b8:	f7ff ff66 	bl	8006088 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80061bc:	f7fe ff4c 	bl	8005058 <vTaskSwitchContext>
	prvTaskExitError();
 80061c0:	f7ff ff20 	bl	8006004 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	e000ed00 	.word	0xe000ed00
 80061d4:	410fc271 	.word	0x410fc271
 80061d8:	410fc270 	.word	0x410fc270
 80061dc:	e000e400 	.word	0xe000e400
 80061e0:	20000e8c 	.word	0x20000e8c
 80061e4:	20000e90 	.word	0x20000e90
 80061e8:	e000ed20 	.word	0xe000ed20
 80061ec:	2000004c 	.word	0x2000004c
 80061f0:	e000ef34 	.word	0xe000ef34

080061f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
	__asm volatile
 80061fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061fe:	f383 8811 	msr	BASEPRI, r3
 8006202:	f3bf 8f6f 	isb	sy
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	607b      	str	r3, [r7, #4]
}
 800620c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800620e:	4b0f      	ldr	r3, [pc, #60]	; (800624c <vPortEnterCritical+0x58>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	3301      	adds	r3, #1
 8006214:	4a0d      	ldr	r2, [pc, #52]	; (800624c <vPortEnterCritical+0x58>)
 8006216:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006218:	4b0c      	ldr	r3, [pc, #48]	; (800624c <vPortEnterCritical+0x58>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d10f      	bne.n	8006240 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006220:	4b0b      	ldr	r3, [pc, #44]	; (8006250 <vPortEnterCritical+0x5c>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b00      	cmp	r3, #0
 8006228:	d00a      	beq.n	8006240 <vPortEnterCritical+0x4c>
	__asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	603b      	str	r3, [r7, #0]
}
 800623c:	bf00      	nop
 800623e:	e7fe      	b.n	800623e <vPortEnterCritical+0x4a>
	}
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr
 800624c:	2000004c 	.word	0x2000004c
 8006250:	e000ed04 	.word	0xe000ed04

08006254 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800625a:	4b12      	ldr	r3, [pc, #72]	; (80062a4 <vPortExitCritical+0x50>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10a      	bne.n	8006278 <vPortExitCritical+0x24>
	__asm volatile
 8006262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	607b      	str	r3, [r7, #4]
}
 8006274:	bf00      	nop
 8006276:	e7fe      	b.n	8006276 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006278:	4b0a      	ldr	r3, [pc, #40]	; (80062a4 <vPortExitCritical+0x50>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	3b01      	subs	r3, #1
 800627e:	4a09      	ldr	r2, [pc, #36]	; (80062a4 <vPortExitCritical+0x50>)
 8006280:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006282:	4b08      	ldr	r3, [pc, #32]	; (80062a4 <vPortExitCritical+0x50>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d105      	bne.n	8006296 <vPortExitCritical+0x42>
 800628a:	2300      	movs	r3, #0
 800628c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	f383 8811 	msr	BASEPRI, r3
}
 8006294:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006296:	bf00      	nop
 8006298:	370c      	adds	r7, #12
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	2000004c 	.word	0x2000004c
	...

080062b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80062b0:	f3ef 8009 	mrs	r0, PSP
 80062b4:	f3bf 8f6f 	isb	sy
 80062b8:	4b15      	ldr	r3, [pc, #84]	; (8006310 <pxCurrentTCBConst>)
 80062ba:	681a      	ldr	r2, [r3, #0]
 80062bc:	f01e 0f10 	tst.w	lr, #16
 80062c0:	bf08      	it	eq
 80062c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80062c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062ca:	6010      	str	r0, [r2, #0]
 80062cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80062d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80062d4:	f380 8811 	msr	BASEPRI, r0
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	f3bf 8f6f 	isb	sy
 80062e0:	f7fe feba 	bl	8005058 <vTaskSwitchContext>
 80062e4:	f04f 0000 	mov.w	r0, #0
 80062e8:	f380 8811 	msr	BASEPRI, r0
 80062ec:	bc09      	pop	{r0, r3}
 80062ee:	6819      	ldr	r1, [r3, #0]
 80062f0:	6808      	ldr	r0, [r1, #0]
 80062f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062f6:	f01e 0f10 	tst.w	lr, #16
 80062fa:	bf08      	it	eq
 80062fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006300:	f380 8809 	msr	PSP, r0
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	f3af 8000 	nop.w

08006310 <pxCurrentTCBConst>:
 8006310:	20000860 	.word	0x20000860
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop

08006318 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b082      	sub	sp, #8
 800631c:	af00      	add	r7, sp, #0
	__asm volatile
 800631e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006322:	f383 8811 	msr	BASEPRI, r3
 8006326:	f3bf 8f6f 	isb	sy
 800632a:	f3bf 8f4f 	dsb	sy
 800632e:	607b      	str	r3, [r7, #4]
}
 8006330:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006332:	f7fe fdd7 	bl	8004ee4 <xTaskIncrementTick>
 8006336:	4603      	mov	r3, r0
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800633c:	4b06      	ldr	r3, [pc, #24]	; (8006358 <xPortSysTickHandler+0x40>)
 800633e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006342:	601a      	str	r2, [r3, #0]
 8006344:	2300      	movs	r3, #0
 8006346:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	f383 8811 	msr	BASEPRI, r3
}
 800634e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006350:	bf00      	nop
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	e000ed04 	.word	0xe000ed04

0800635c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800635c:	b480      	push	{r7}
 800635e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006360:	4b0b      	ldr	r3, [pc, #44]	; (8006390 <vPortSetupTimerInterrupt+0x34>)
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006366:	4b0b      	ldr	r3, [pc, #44]	; (8006394 <vPortSetupTimerInterrupt+0x38>)
 8006368:	2200      	movs	r2, #0
 800636a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800636c:	4b0a      	ldr	r3, [pc, #40]	; (8006398 <vPortSetupTimerInterrupt+0x3c>)
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a0a      	ldr	r2, [pc, #40]	; (800639c <vPortSetupTimerInterrupt+0x40>)
 8006372:	fba2 2303 	umull	r2, r3, r2, r3
 8006376:	099b      	lsrs	r3, r3, #6
 8006378:	4a09      	ldr	r2, [pc, #36]	; (80063a0 <vPortSetupTimerInterrupt+0x44>)
 800637a:	3b01      	subs	r3, #1
 800637c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800637e:	4b04      	ldr	r3, [pc, #16]	; (8006390 <vPortSetupTimerInterrupt+0x34>)
 8006380:	2207      	movs	r2, #7
 8006382:	601a      	str	r2, [r3, #0]
}
 8006384:	bf00      	nop
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr
 800638e:	bf00      	nop
 8006390:	e000e010 	.word	0xe000e010
 8006394:	e000e018 	.word	0xe000e018
 8006398:	20000040 	.word	0x20000040
 800639c:	10624dd3 	.word	0x10624dd3
 80063a0:	e000e014 	.word	0xe000e014

080063a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80063a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80063b4 <vPortEnableVFP+0x10>
 80063a8:	6801      	ldr	r1, [r0, #0]
 80063aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80063ae:	6001      	str	r1, [r0, #0]
 80063b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80063b2:	bf00      	nop
 80063b4:	e000ed88 	.word	0xe000ed88

080063b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80063b8:	b480      	push	{r7}
 80063ba:	b085      	sub	sp, #20
 80063bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80063be:	f3ef 8305 	mrs	r3, IPSR
 80063c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2b0f      	cmp	r3, #15
 80063c8:	d914      	bls.n	80063f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80063ca:	4a17      	ldr	r2, [pc, #92]	; (8006428 <vPortValidateInterruptPriority+0x70>)
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	4413      	add	r3, r2
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80063d4:	4b15      	ldr	r3, [pc, #84]	; (800642c <vPortValidateInterruptPriority+0x74>)
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	7afa      	ldrb	r2, [r7, #11]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d20a      	bcs.n	80063f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80063de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e2:	f383 8811 	msr	BASEPRI, r3
 80063e6:	f3bf 8f6f 	isb	sy
 80063ea:	f3bf 8f4f 	dsb	sy
 80063ee:	607b      	str	r3, [r7, #4]
}
 80063f0:	bf00      	nop
 80063f2:	e7fe      	b.n	80063f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80063f4:	4b0e      	ldr	r3, [pc, #56]	; (8006430 <vPortValidateInterruptPriority+0x78>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80063fc:	4b0d      	ldr	r3, [pc, #52]	; (8006434 <vPortValidateInterruptPriority+0x7c>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	d90a      	bls.n	800641a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	603b      	str	r3, [r7, #0]
}
 8006416:	bf00      	nop
 8006418:	e7fe      	b.n	8006418 <vPortValidateInterruptPriority+0x60>
	}
 800641a:	bf00      	nop
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	e000e3f0 	.word	0xe000e3f0
 800642c:	20000e8c 	.word	0x20000e8c
 8006430:	e000ed0c 	.word	0xe000ed0c
 8006434:	20000e90 	.word	0x20000e90

08006438 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b08a      	sub	sp, #40	; 0x28
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006440:	2300      	movs	r3, #0
 8006442:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006444:	f7fe fc92 	bl	8004d6c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006448:	4b5b      	ldr	r3, [pc, #364]	; (80065b8 <pvPortMalloc+0x180>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d101      	bne.n	8006454 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006450:	f000 f920 	bl	8006694 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006454:	4b59      	ldr	r3, [pc, #356]	; (80065bc <pvPortMalloc+0x184>)
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4013      	ands	r3, r2
 800645c:	2b00      	cmp	r3, #0
 800645e:	f040 8093 	bne.w	8006588 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d01d      	beq.n	80064a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006468:	2208      	movs	r2, #8
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4413      	add	r3, r2
 800646e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f003 0307 	and.w	r3, r3, #7
 8006476:	2b00      	cmp	r3, #0
 8006478:	d014      	beq.n	80064a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f023 0307 	bic.w	r3, r3, #7
 8006480:	3308      	adds	r3, #8
 8006482:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f003 0307 	and.w	r3, r3, #7
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00a      	beq.n	80064a4 <pvPortMalloc+0x6c>
	__asm volatile
 800648e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006492:	f383 8811 	msr	BASEPRI, r3
 8006496:	f3bf 8f6f 	isb	sy
 800649a:	f3bf 8f4f 	dsb	sy
 800649e:	617b      	str	r3, [r7, #20]
}
 80064a0:	bf00      	nop
 80064a2:	e7fe      	b.n	80064a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d06e      	beq.n	8006588 <pvPortMalloc+0x150>
 80064aa:	4b45      	ldr	r3, [pc, #276]	; (80065c0 <pvPortMalloc+0x188>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d869      	bhi.n	8006588 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80064b4:	4b43      	ldr	r3, [pc, #268]	; (80065c4 <pvPortMalloc+0x18c>)
 80064b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80064b8:	4b42      	ldr	r3, [pc, #264]	; (80065c4 <pvPortMalloc+0x18c>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064be:	e004      	b.n	80064ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80064c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80064c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80064ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064cc:	685b      	ldr	r3, [r3, #4]
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d903      	bls.n	80064dc <pvPortMalloc+0xa4>
 80064d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d1f1      	bne.n	80064c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80064dc:	4b36      	ldr	r3, [pc, #216]	; (80065b8 <pvPortMalloc+0x180>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d050      	beq.n	8006588 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	2208      	movs	r2, #8
 80064ec:	4413      	add	r3, r2
 80064ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80064f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80064f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fa:	685a      	ldr	r2, [r3, #4]
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	1ad2      	subs	r2, r2, r3
 8006500:	2308      	movs	r3, #8
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	429a      	cmp	r2, r3
 8006506:	d91f      	bls.n	8006548 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4413      	add	r3, r2
 800650e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	f003 0307 	and.w	r3, r3, #7
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00a      	beq.n	8006530 <pvPortMalloc+0xf8>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	613b      	str	r3, [r7, #16]
}
 800652c:	bf00      	nop
 800652e:	e7fe      	b.n	800652e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006532:	685a      	ldr	r2, [r3, #4]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	1ad2      	subs	r2, r2, r3
 8006538:	69bb      	ldr	r3, [r7, #24]
 800653a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800653c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800653e:	687a      	ldr	r2, [r7, #4]
 8006540:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006542:	69b8      	ldr	r0, [r7, #24]
 8006544:	f000 f908 	bl	8006758 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006548:	4b1d      	ldr	r3, [pc, #116]	; (80065c0 <pvPortMalloc+0x188>)
 800654a:	681a      	ldr	r2, [r3, #0]
 800654c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654e:	685b      	ldr	r3, [r3, #4]
 8006550:	1ad3      	subs	r3, r2, r3
 8006552:	4a1b      	ldr	r2, [pc, #108]	; (80065c0 <pvPortMalloc+0x188>)
 8006554:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006556:	4b1a      	ldr	r3, [pc, #104]	; (80065c0 <pvPortMalloc+0x188>)
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	4b1b      	ldr	r3, [pc, #108]	; (80065c8 <pvPortMalloc+0x190>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	429a      	cmp	r2, r3
 8006560:	d203      	bcs.n	800656a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006562:	4b17      	ldr	r3, [pc, #92]	; (80065c0 <pvPortMalloc+0x188>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a18      	ldr	r2, [pc, #96]	; (80065c8 <pvPortMalloc+0x190>)
 8006568:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	685a      	ldr	r2, [r3, #4]
 800656e:	4b13      	ldr	r3, [pc, #76]	; (80065bc <pvPortMalloc+0x184>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	431a      	orrs	r2, r3
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	2200      	movs	r2, #0
 800657c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800657e:	4b13      	ldr	r3, [pc, #76]	; (80065cc <pvPortMalloc+0x194>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	3301      	adds	r3, #1
 8006584:	4a11      	ldr	r2, [pc, #68]	; (80065cc <pvPortMalloc+0x194>)
 8006586:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006588:	f7fe fbfe 	bl	8004d88 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800658c:	69fb      	ldr	r3, [r7, #28]
 800658e:	f003 0307 	and.w	r3, r3, #7
 8006592:	2b00      	cmp	r3, #0
 8006594:	d00a      	beq.n	80065ac <pvPortMalloc+0x174>
	__asm volatile
 8006596:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659a:	f383 8811 	msr	BASEPRI, r3
 800659e:	f3bf 8f6f 	isb	sy
 80065a2:	f3bf 8f4f 	dsb	sy
 80065a6:	60fb      	str	r3, [r7, #12]
}
 80065a8:	bf00      	nop
 80065aa:	e7fe      	b.n	80065aa <pvPortMalloc+0x172>
	return pvReturn;
 80065ac:	69fb      	ldr	r3, [r7, #28]
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3728      	adds	r7, #40	; 0x28
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd80      	pop	{r7, pc}
 80065b6:	bf00      	nop
 80065b8:	20001a54 	.word	0x20001a54
 80065bc:	20001a68 	.word	0x20001a68
 80065c0:	20001a58 	.word	0x20001a58
 80065c4:	20001a4c 	.word	0x20001a4c
 80065c8:	20001a5c 	.word	0x20001a5c
 80065cc:	20001a60 	.word	0x20001a60

080065d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b086      	sub	sp, #24
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d04d      	beq.n	800667e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80065e2:	2308      	movs	r3, #8
 80065e4:	425b      	negs	r3, r3
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4413      	add	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	685a      	ldr	r2, [r3, #4]
 80065f4:	4b24      	ldr	r3, [pc, #144]	; (8006688 <vPortFree+0xb8>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	4013      	ands	r3, r2
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10a      	bne.n	8006614 <vPortFree+0x44>
	__asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	f383 8811 	msr	BASEPRI, r3
 8006606:	f3bf 8f6f 	isb	sy
 800660a:	f3bf 8f4f 	dsb	sy
 800660e:	60fb      	str	r3, [r7, #12]
}
 8006610:	bf00      	nop
 8006612:	e7fe      	b.n	8006612 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d00a      	beq.n	8006632 <vPortFree+0x62>
	__asm volatile
 800661c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	60bb      	str	r3, [r7, #8]
}
 800662e:	bf00      	nop
 8006630:	e7fe      	b.n	8006630 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006632:	693b      	ldr	r3, [r7, #16]
 8006634:	685a      	ldr	r2, [r3, #4]
 8006636:	4b14      	ldr	r3, [pc, #80]	; (8006688 <vPortFree+0xb8>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4013      	ands	r3, r2
 800663c:	2b00      	cmp	r3, #0
 800663e:	d01e      	beq.n	800667e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006640:	693b      	ldr	r3, [r7, #16]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d11a      	bne.n	800667e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	4b0e      	ldr	r3, [pc, #56]	; (8006688 <vPortFree+0xb8>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	43db      	mvns	r3, r3
 8006652:	401a      	ands	r2, r3
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006658:	f7fe fb88 	bl	8004d6c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	4b0a      	ldr	r3, [pc, #40]	; (800668c <vPortFree+0xbc>)
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4413      	add	r3, r2
 8006666:	4a09      	ldr	r2, [pc, #36]	; (800668c <vPortFree+0xbc>)
 8006668:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800666a:	6938      	ldr	r0, [r7, #16]
 800666c:	f000 f874 	bl	8006758 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006670:	4b07      	ldr	r3, [pc, #28]	; (8006690 <vPortFree+0xc0>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3301      	adds	r3, #1
 8006676:	4a06      	ldr	r2, [pc, #24]	; (8006690 <vPortFree+0xc0>)
 8006678:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800667a:	f7fe fb85 	bl	8004d88 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800667e:	bf00      	nop
 8006680:	3718      	adds	r7, #24
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	20001a68 	.word	0x20001a68
 800668c:	20001a58 	.word	0x20001a58
 8006690:	20001a64 	.word	0x20001a64

08006694 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800669a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800669e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80066a0:	4b27      	ldr	r3, [pc, #156]	; (8006740 <prvHeapInit+0xac>)
 80066a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f003 0307 	and.w	r3, r3, #7
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00c      	beq.n	80066c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	3307      	adds	r3, #7
 80066b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f023 0307 	bic.w	r3, r3, #7
 80066ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80066bc:	68ba      	ldr	r2, [r7, #8]
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	1ad3      	subs	r3, r2, r3
 80066c2:	4a1f      	ldr	r2, [pc, #124]	; (8006740 <prvHeapInit+0xac>)
 80066c4:	4413      	add	r3, r2
 80066c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80066cc:	4a1d      	ldr	r2, [pc, #116]	; (8006744 <prvHeapInit+0xb0>)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80066d2:	4b1c      	ldr	r3, [pc, #112]	; (8006744 <prvHeapInit+0xb0>)
 80066d4:	2200      	movs	r2, #0
 80066d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68ba      	ldr	r2, [r7, #8]
 80066dc:	4413      	add	r3, r2
 80066de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80066e0:	2208      	movs	r2, #8
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	1a9b      	subs	r3, r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f023 0307 	bic.w	r3, r3, #7
 80066ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	4a15      	ldr	r2, [pc, #84]	; (8006748 <prvHeapInit+0xb4>)
 80066f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80066f6:	4b14      	ldr	r3, [pc, #80]	; (8006748 <prvHeapInit+0xb4>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2200      	movs	r2, #0
 80066fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80066fe:	4b12      	ldr	r3, [pc, #72]	; (8006748 <prvHeapInit+0xb4>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	2200      	movs	r2, #0
 8006704:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	1ad2      	subs	r2, r2, r3
 8006710:	683b      	ldr	r3, [r7, #0]
 8006712:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006714:	4b0c      	ldr	r3, [pc, #48]	; (8006748 <prvHeapInit+0xb4>)
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	4a0a      	ldr	r2, [pc, #40]	; (800674c <prvHeapInit+0xb8>)
 8006722:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006724:	683b      	ldr	r3, [r7, #0]
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	4a09      	ldr	r2, [pc, #36]	; (8006750 <prvHeapInit+0xbc>)
 800672a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800672c:	4b09      	ldr	r3, [pc, #36]	; (8006754 <prvHeapInit+0xc0>)
 800672e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006732:	601a      	str	r2, [r3, #0]
}
 8006734:	bf00      	nop
 8006736:	3714      	adds	r7, #20
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	20000e94 	.word	0x20000e94
 8006744:	20001a4c 	.word	0x20001a4c
 8006748:	20001a54 	.word	0x20001a54
 800674c:	20001a5c 	.word	0x20001a5c
 8006750:	20001a58 	.word	0x20001a58
 8006754:	20001a68 	.word	0x20001a68

08006758 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006758:	b480      	push	{r7}
 800675a:	b085      	sub	sp, #20
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006760:	4b28      	ldr	r3, [pc, #160]	; (8006804 <prvInsertBlockIntoFreeList+0xac>)
 8006762:	60fb      	str	r3, [r7, #12]
 8006764:	e002      	b.n	800676c <prvInsertBlockIntoFreeList+0x14>
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	60fb      	str	r3, [r7, #12]
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	429a      	cmp	r2, r3
 8006774:	d8f7      	bhi.n	8006766 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	4413      	add	r3, r2
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	429a      	cmp	r2, r3
 8006786:	d108      	bne.n	800679a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	685a      	ldr	r2, [r3, #4]
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	685b      	ldr	r3, [r3, #4]
 8006790:	441a      	add	r2, r3
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	441a      	add	r2, r3
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d118      	bne.n	80067e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	4b15      	ldr	r3, [pc, #84]	; (8006808 <prvInsertBlockIntoFreeList+0xb0>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	429a      	cmp	r2, r3
 80067b8:	d00d      	beq.n	80067d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685a      	ldr	r2, [r3, #4]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	441a      	add	r2, r3
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681a      	ldr	r2, [r3, #0]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	601a      	str	r2, [r3, #0]
 80067d4:	e008      	b.n	80067e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80067d6:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <prvInsertBlockIntoFreeList+0xb0>)
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	e003      	b.n	80067e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681a      	ldr	r2, [r3, #0]
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	429a      	cmp	r2, r3
 80067ee:	d002      	beq.n	80067f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067f6:	bf00      	nop
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr
 8006802:	bf00      	nop
 8006804:	20001a4c 	.word	0x20001a4c
 8006808:	20001a54 	.word	0x20001a54

0800680c <__errno>:
 800680c:	4b01      	ldr	r3, [pc, #4]	; (8006814 <__errno+0x8>)
 800680e:	6818      	ldr	r0, [r3, #0]
 8006810:	4770      	bx	lr
 8006812:	bf00      	nop
 8006814:	20000050 	.word	0x20000050

08006818 <__libc_init_array>:
 8006818:	b570      	push	{r4, r5, r6, lr}
 800681a:	4d0d      	ldr	r5, [pc, #52]	; (8006850 <__libc_init_array+0x38>)
 800681c:	4c0d      	ldr	r4, [pc, #52]	; (8006854 <__libc_init_array+0x3c>)
 800681e:	1b64      	subs	r4, r4, r5
 8006820:	10a4      	asrs	r4, r4, #2
 8006822:	2600      	movs	r6, #0
 8006824:	42a6      	cmp	r6, r4
 8006826:	d109      	bne.n	800683c <__libc_init_array+0x24>
 8006828:	4d0b      	ldr	r5, [pc, #44]	; (8006858 <__libc_init_array+0x40>)
 800682a:	4c0c      	ldr	r4, [pc, #48]	; (800685c <__libc_init_array+0x44>)
 800682c:	f000 fcb8 	bl	80071a0 <_init>
 8006830:	1b64      	subs	r4, r4, r5
 8006832:	10a4      	asrs	r4, r4, #2
 8006834:	2600      	movs	r6, #0
 8006836:	42a6      	cmp	r6, r4
 8006838:	d105      	bne.n	8006846 <__libc_init_array+0x2e>
 800683a:	bd70      	pop	{r4, r5, r6, pc}
 800683c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006840:	4798      	blx	r3
 8006842:	3601      	adds	r6, #1
 8006844:	e7ee      	b.n	8006824 <__libc_init_array+0xc>
 8006846:	f855 3b04 	ldr.w	r3, [r5], #4
 800684a:	4798      	blx	r3
 800684c:	3601      	adds	r6, #1
 800684e:	e7f2      	b.n	8006836 <__libc_init_array+0x1e>
 8006850:	08007390 	.word	0x08007390
 8006854:	08007390 	.word	0x08007390
 8006858:	08007390 	.word	0x08007390
 800685c:	08007394 	.word	0x08007394

08006860 <__retarget_lock_acquire_recursive>:
 8006860:	4770      	bx	lr

08006862 <__retarget_lock_release_recursive>:
 8006862:	4770      	bx	lr

08006864 <memcpy>:
 8006864:	440a      	add	r2, r1
 8006866:	4291      	cmp	r1, r2
 8006868:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800686c:	d100      	bne.n	8006870 <memcpy+0xc>
 800686e:	4770      	bx	lr
 8006870:	b510      	push	{r4, lr}
 8006872:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006876:	f803 4f01 	strb.w	r4, [r3, #1]!
 800687a:	4291      	cmp	r1, r2
 800687c:	d1f9      	bne.n	8006872 <memcpy+0xe>
 800687e:	bd10      	pop	{r4, pc}

08006880 <memset>:
 8006880:	4402      	add	r2, r0
 8006882:	4603      	mov	r3, r0
 8006884:	4293      	cmp	r3, r2
 8006886:	d100      	bne.n	800688a <memset+0xa>
 8006888:	4770      	bx	lr
 800688a:	f803 1b01 	strb.w	r1, [r3], #1
 800688e:	e7f9      	b.n	8006884 <memset+0x4>

08006890 <_malloc_r>:
 8006890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006892:	1ccd      	adds	r5, r1, #3
 8006894:	f025 0503 	bic.w	r5, r5, #3
 8006898:	3508      	adds	r5, #8
 800689a:	2d0c      	cmp	r5, #12
 800689c:	bf38      	it	cc
 800689e:	250c      	movcc	r5, #12
 80068a0:	2d00      	cmp	r5, #0
 80068a2:	4606      	mov	r6, r0
 80068a4:	db01      	blt.n	80068aa <_malloc_r+0x1a>
 80068a6:	42a9      	cmp	r1, r5
 80068a8:	d903      	bls.n	80068b2 <_malloc_r+0x22>
 80068aa:	230c      	movs	r3, #12
 80068ac:	6033      	str	r3, [r6, #0]
 80068ae:	2000      	movs	r0, #0
 80068b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80068b2:	f000 f8e1 	bl	8006a78 <__malloc_lock>
 80068b6:	4921      	ldr	r1, [pc, #132]	; (800693c <_malloc_r+0xac>)
 80068b8:	680a      	ldr	r2, [r1, #0]
 80068ba:	4614      	mov	r4, r2
 80068bc:	b99c      	cbnz	r4, 80068e6 <_malloc_r+0x56>
 80068be:	4f20      	ldr	r7, [pc, #128]	; (8006940 <_malloc_r+0xb0>)
 80068c0:	683b      	ldr	r3, [r7, #0]
 80068c2:	b923      	cbnz	r3, 80068ce <_malloc_r+0x3e>
 80068c4:	4621      	mov	r1, r4
 80068c6:	4630      	mov	r0, r6
 80068c8:	f000 f8a6 	bl	8006a18 <_sbrk_r>
 80068cc:	6038      	str	r0, [r7, #0]
 80068ce:	4629      	mov	r1, r5
 80068d0:	4630      	mov	r0, r6
 80068d2:	f000 f8a1 	bl	8006a18 <_sbrk_r>
 80068d6:	1c43      	adds	r3, r0, #1
 80068d8:	d123      	bne.n	8006922 <_malloc_r+0x92>
 80068da:	230c      	movs	r3, #12
 80068dc:	6033      	str	r3, [r6, #0]
 80068de:	4630      	mov	r0, r6
 80068e0:	f000 f8d0 	bl	8006a84 <__malloc_unlock>
 80068e4:	e7e3      	b.n	80068ae <_malloc_r+0x1e>
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	1b5b      	subs	r3, r3, r5
 80068ea:	d417      	bmi.n	800691c <_malloc_r+0x8c>
 80068ec:	2b0b      	cmp	r3, #11
 80068ee:	d903      	bls.n	80068f8 <_malloc_r+0x68>
 80068f0:	6023      	str	r3, [r4, #0]
 80068f2:	441c      	add	r4, r3
 80068f4:	6025      	str	r5, [r4, #0]
 80068f6:	e004      	b.n	8006902 <_malloc_r+0x72>
 80068f8:	6863      	ldr	r3, [r4, #4]
 80068fa:	42a2      	cmp	r2, r4
 80068fc:	bf0c      	ite	eq
 80068fe:	600b      	streq	r3, [r1, #0]
 8006900:	6053      	strne	r3, [r2, #4]
 8006902:	4630      	mov	r0, r6
 8006904:	f000 f8be 	bl	8006a84 <__malloc_unlock>
 8006908:	f104 000b 	add.w	r0, r4, #11
 800690c:	1d23      	adds	r3, r4, #4
 800690e:	f020 0007 	bic.w	r0, r0, #7
 8006912:	1ac2      	subs	r2, r0, r3
 8006914:	d0cc      	beq.n	80068b0 <_malloc_r+0x20>
 8006916:	1a1b      	subs	r3, r3, r0
 8006918:	50a3      	str	r3, [r4, r2]
 800691a:	e7c9      	b.n	80068b0 <_malloc_r+0x20>
 800691c:	4622      	mov	r2, r4
 800691e:	6864      	ldr	r4, [r4, #4]
 8006920:	e7cc      	b.n	80068bc <_malloc_r+0x2c>
 8006922:	1cc4      	adds	r4, r0, #3
 8006924:	f024 0403 	bic.w	r4, r4, #3
 8006928:	42a0      	cmp	r0, r4
 800692a:	d0e3      	beq.n	80068f4 <_malloc_r+0x64>
 800692c:	1a21      	subs	r1, r4, r0
 800692e:	4630      	mov	r0, r6
 8006930:	f000 f872 	bl	8006a18 <_sbrk_r>
 8006934:	3001      	adds	r0, #1
 8006936:	d1dd      	bne.n	80068f4 <_malloc_r+0x64>
 8006938:	e7cf      	b.n	80068da <_malloc_r+0x4a>
 800693a:	bf00      	nop
 800693c:	20001a6c 	.word	0x20001a6c
 8006940:	20001a70 	.word	0x20001a70

08006944 <cleanup_glue>:
 8006944:	b538      	push	{r3, r4, r5, lr}
 8006946:	460c      	mov	r4, r1
 8006948:	6809      	ldr	r1, [r1, #0]
 800694a:	4605      	mov	r5, r0
 800694c:	b109      	cbz	r1, 8006952 <cleanup_glue+0xe>
 800694e:	f7ff fff9 	bl	8006944 <cleanup_glue>
 8006952:	4621      	mov	r1, r4
 8006954:	4628      	mov	r0, r5
 8006956:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800695a:	f000 b899 	b.w	8006a90 <_free_r>
	...

08006960 <_reclaim_reent>:
 8006960:	4b2c      	ldr	r3, [pc, #176]	; (8006a14 <_reclaim_reent+0xb4>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	4283      	cmp	r3, r0
 8006966:	b570      	push	{r4, r5, r6, lr}
 8006968:	4604      	mov	r4, r0
 800696a:	d051      	beq.n	8006a10 <_reclaim_reent+0xb0>
 800696c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800696e:	b143      	cbz	r3, 8006982 <_reclaim_reent+0x22>
 8006970:	68db      	ldr	r3, [r3, #12]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d14a      	bne.n	8006a0c <_reclaim_reent+0xac>
 8006976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006978:	6819      	ldr	r1, [r3, #0]
 800697a:	b111      	cbz	r1, 8006982 <_reclaim_reent+0x22>
 800697c:	4620      	mov	r0, r4
 800697e:	f000 f887 	bl	8006a90 <_free_r>
 8006982:	6961      	ldr	r1, [r4, #20]
 8006984:	b111      	cbz	r1, 800698c <_reclaim_reent+0x2c>
 8006986:	4620      	mov	r0, r4
 8006988:	f000 f882 	bl	8006a90 <_free_r>
 800698c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800698e:	b111      	cbz	r1, 8006996 <_reclaim_reent+0x36>
 8006990:	4620      	mov	r0, r4
 8006992:	f000 f87d 	bl	8006a90 <_free_r>
 8006996:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006998:	b111      	cbz	r1, 80069a0 <_reclaim_reent+0x40>
 800699a:	4620      	mov	r0, r4
 800699c:	f000 f878 	bl	8006a90 <_free_r>
 80069a0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80069a2:	b111      	cbz	r1, 80069aa <_reclaim_reent+0x4a>
 80069a4:	4620      	mov	r0, r4
 80069a6:	f000 f873 	bl	8006a90 <_free_r>
 80069aa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80069ac:	b111      	cbz	r1, 80069b4 <_reclaim_reent+0x54>
 80069ae:	4620      	mov	r0, r4
 80069b0:	f000 f86e 	bl	8006a90 <_free_r>
 80069b4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80069b6:	b111      	cbz	r1, 80069be <_reclaim_reent+0x5e>
 80069b8:	4620      	mov	r0, r4
 80069ba:	f000 f869 	bl	8006a90 <_free_r>
 80069be:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80069c0:	b111      	cbz	r1, 80069c8 <_reclaim_reent+0x68>
 80069c2:	4620      	mov	r0, r4
 80069c4:	f000 f864 	bl	8006a90 <_free_r>
 80069c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069ca:	b111      	cbz	r1, 80069d2 <_reclaim_reent+0x72>
 80069cc:	4620      	mov	r0, r4
 80069ce:	f000 f85f 	bl	8006a90 <_free_r>
 80069d2:	69a3      	ldr	r3, [r4, #24]
 80069d4:	b1e3      	cbz	r3, 8006a10 <_reclaim_reent+0xb0>
 80069d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80069d8:	4620      	mov	r0, r4
 80069da:	4798      	blx	r3
 80069dc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80069de:	b1b9      	cbz	r1, 8006a10 <_reclaim_reent+0xb0>
 80069e0:	4620      	mov	r0, r4
 80069e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80069e6:	f7ff bfad 	b.w	8006944 <cleanup_glue>
 80069ea:	5949      	ldr	r1, [r1, r5]
 80069ec:	b941      	cbnz	r1, 8006a00 <_reclaim_reent+0xa0>
 80069ee:	3504      	adds	r5, #4
 80069f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80069f2:	2d80      	cmp	r5, #128	; 0x80
 80069f4:	68d9      	ldr	r1, [r3, #12]
 80069f6:	d1f8      	bne.n	80069ea <_reclaim_reent+0x8a>
 80069f8:	4620      	mov	r0, r4
 80069fa:	f000 f849 	bl	8006a90 <_free_r>
 80069fe:	e7ba      	b.n	8006976 <_reclaim_reent+0x16>
 8006a00:	680e      	ldr	r6, [r1, #0]
 8006a02:	4620      	mov	r0, r4
 8006a04:	f000 f844 	bl	8006a90 <_free_r>
 8006a08:	4631      	mov	r1, r6
 8006a0a:	e7ef      	b.n	80069ec <_reclaim_reent+0x8c>
 8006a0c:	2500      	movs	r5, #0
 8006a0e:	e7ef      	b.n	80069f0 <_reclaim_reent+0x90>
 8006a10:	bd70      	pop	{r4, r5, r6, pc}
 8006a12:	bf00      	nop
 8006a14:	20000050 	.word	0x20000050

08006a18 <_sbrk_r>:
 8006a18:	b538      	push	{r3, r4, r5, lr}
 8006a1a:	4d06      	ldr	r5, [pc, #24]	; (8006a34 <_sbrk_r+0x1c>)
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	4604      	mov	r4, r0
 8006a20:	4608      	mov	r0, r1
 8006a22:	602b      	str	r3, [r5, #0]
 8006a24:	f7fa f91c 	bl	8000c60 <_sbrk>
 8006a28:	1c43      	adds	r3, r0, #1
 8006a2a:	d102      	bne.n	8006a32 <_sbrk_r+0x1a>
 8006a2c:	682b      	ldr	r3, [r5, #0]
 8006a2e:	b103      	cbz	r3, 8006a32 <_sbrk_r+0x1a>
 8006a30:	6023      	str	r3, [r4, #0]
 8006a32:	bd38      	pop	{r3, r4, r5, pc}
 8006a34:	20001bb0 	.word	0x20001bb0

08006a38 <siprintf>:
 8006a38:	b40e      	push	{r1, r2, r3}
 8006a3a:	b500      	push	{lr}
 8006a3c:	b09c      	sub	sp, #112	; 0x70
 8006a3e:	ab1d      	add	r3, sp, #116	; 0x74
 8006a40:	9002      	str	r0, [sp, #8]
 8006a42:	9006      	str	r0, [sp, #24]
 8006a44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006a48:	4809      	ldr	r0, [pc, #36]	; (8006a70 <siprintf+0x38>)
 8006a4a:	9107      	str	r1, [sp, #28]
 8006a4c:	9104      	str	r1, [sp, #16]
 8006a4e:	4909      	ldr	r1, [pc, #36]	; (8006a74 <siprintf+0x3c>)
 8006a50:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a54:	9105      	str	r1, [sp, #20]
 8006a56:	6800      	ldr	r0, [r0, #0]
 8006a58:	9301      	str	r3, [sp, #4]
 8006a5a:	a902      	add	r1, sp, #8
 8006a5c:	f000 f8c4 	bl	8006be8 <_svfiprintf_r>
 8006a60:	9b02      	ldr	r3, [sp, #8]
 8006a62:	2200      	movs	r2, #0
 8006a64:	701a      	strb	r2, [r3, #0]
 8006a66:	b01c      	add	sp, #112	; 0x70
 8006a68:	f85d eb04 	ldr.w	lr, [sp], #4
 8006a6c:	b003      	add	sp, #12
 8006a6e:	4770      	bx	lr
 8006a70:	20000050 	.word	0x20000050
 8006a74:	ffff0208 	.word	0xffff0208

08006a78 <__malloc_lock>:
 8006a78:	4801      	ldr	r0, [pc, #4]	; (8006a80 <__malloc_lock+0x8>)
 8006a7a:	f7ff bef1 	b.w	8006860 <__retarget_lock_acquire_recursive>
 8006a7e:	bf00      	nop
 8006a80:	20001ba8 	.word	0x20001ba8

08006a84 <__malloc_unlock>:
 8006a84:	4801      	ldr	r0, [pc, #4]	; (8006a8c <__malloc_unlock+0x8>)
 8006a86:	f7ff beec 	b.w	8006862 <__retarget_lock_release_recursive>
 8006a8a:	bf00      	nop
 8006a8c:	20001ba8 	.word	0x20001ba8

08006a90 <_free_r>:
 8006a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a92:	2900      	cmp	r1, #0
 8006a94:	d048      	beq.n	8006b28 <_free_r+0x98>
 8006a96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a9a:	9001      	str	r0, [sp, #4]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f1a1 0404 	sub.w	r4, r1, #4
 8006aa2:	bfb8      	it	lt
 8006aa4:	18e4      	addlt	r4, r4, r3
 8006aa6:	f7ff ffe7 	bl	8006a78 <__malloc_lock>
 8006aaa:	4a20      	ldr	r2, [pc, #128]	; (8006b2c <_free_r+0x9c>)
 8006aac:	9801      	ldr	r0, [sp, #4]
 8006aae:	6813      	ldr	r3, [r2, #0]
 8006ab0:	4615      	mov	r5, r2
 8006ab2:	b933      	cbnz	r3, 8006ac2 <_free_r+0x32>
 8006ab4:	6063      	str	r3, [r4, #4]
 8006ab6:	6014      	str	r4, [r2, #0]
 8006ab8:	b003      	add	sp, #12
 8006aba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006abe:	f7ff bfe1 	b.w	8006a84 <__malloc_unlock>
 8006ac2:	42a3      	cmp	r3, r4
 8006ac4:	d90b      	bls.n	8006ade <_free_r+0x4e>
 8006ac6:	6821      	ldr	r1, [r4, #0]
 8006ac8:	1862      	adds	r2, r4, r1
 8006aca:	4293      	cmp	r3, r2
 8006acc:	bf04      	itt	eq
 8006ace:	681a      	ldreq	r2, [r3, #0]
 8006ad0:	685b      	ldreq	r3, [r3, #4]
 8006ad2:	6063      	str	r3, [r4, #4]
 8006ad4:	bf04      	itt	eq
 8006ad6:	1852      	addeq	r2, r2, r1
 8006ad8:	6022      	streq	r2, [r4, #0]
 8006ada:	602c      	str	r4, [r5, #0]
 8006adc:	e7ec      	b.n	8006ab8 <_free_r+0x28>
 8006ade:	461a      	mov	r2, r3
 8006ae0:	685b      	ldr	r3, [r3, #4]
 8006ae2:	b10b      	cbz	r3, 8006ae8 <_free_r+0x58>
 8006ae4:	42a3      	cmp	r3, r4
 8006ae6:	d9fa      	bls.n	8006ade <_free_r+0x4e>
 8006ae8:	6811      	ldr	r1, [r2, #0]
 8006aea:	1855      	adds	r5, r2, r1
 8006aec:	42a5      	cmp	r5, r4
 8006aee:	d10b      	bne.n	8006b08 <_free_r+0x78>
 8006af0:	6824      	ldr	r4, [r4, #0]
 8006af2:	4421      	add	r1, r4
 8006af4:	1854      	adds	r4, r2, r1
 8006af6:	42a3      	cmp	r3, r4
 8006af8:	6011      	str	r1, [r2, #0]
 8006afa:	d1dd      	bne.n	8006ab8 <_free_r+0x28>
 8006afc:	681c      	ldr	r4, [r3, #0]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	6053      	str	r3, [r2, #4]
 8006b02:	4421      	add	r1, r4
 8006b04:	6011      	str	r1, [r2, #0]
 8006b06:	e7d7      	b.n	8006ab8 <_free_r+0x28>
 8006b08:	d902      	bls.n	8006b10 <_free_r+0x80>
 8006b0a:	230c      	movs	r3, #12
 8006b0c:	6003      	str	r3, [r0, #0]
 8006b0e:	e7d3      	b.n	8006ab8 <_free_r+0x28>
 8006b10:	6825      	ldr	r5, [r4, #0]
 8006b12:	1961      	adds	r1, r4, r5
 8006b14:	428b      	cmp	r3, r1
 8006b16:	bf04      	itt	eq
 8006b18:	6819      	ldreq	r1, [r3, #0]
 8006b1a:	685b      	ldreq	r3, [r3, #4]
 8006b1c:	6063      	str	r3, [r4, #4]
 8006b1e:	bf04      	itt	eq
 8006b20:	1949      	addeq	r1, r1, r5
 8006b22:	6021      	streq	r1, [r4, #0]
 8006b24:	6054      	str	r4, [r2, #4]
 8006b26:	e7c7      	b.n	8006ab8 <_free_r+0x28>
 8006b28:	b003      	add	sp, #12
 8006b2a:	bd30      	pop	{r4, r5, pc}
 8006b2c:	20001a6c 	.word	0x20001a6c

08006b30 <__ssputs_r>:
 8006b30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b34:	688e      	ldr	r6, [r1, #8]
 8006b36:	429e      	cmp	r6, r3
 8006b38:	4682      	mov	sl, r0
 8006b3a:	460c      	mov	r4, r1
 8006b3c:	4690      	mov	r8, r2
 8006b3e:	461f      	mov	r7, r3
 8006b40:	d838      	bhi.n	8006bb4 <__ssputs_r+0x84>
 8006b42:	898a      	ldrh	r2, [r1, #12]
 8006b44:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b48:	d032      	beq.n	8006bb0 <__ssputs_r+0x80>
 8006b4a:	6825      	ldr	r5, [r4, #0]
 8006b4c:	6909      	ldr	r1, [r1, #16]
 8006b4e:	eba5 0901 	sub.w	r9, r5, r1
 8006b52:	6965      	ldr	r5, [r4, #20]
 8006b54:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b58:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	444b      	add	r3, r9
 8006b60:	106d      	asrs	r5, r5, #1
 8006b62:	429d      	cmp	r5, r3
 8006b64:	bf38      	it	cc
 8006b66:	461d      	movcc	r5, r3
 8006b68:	0553      	lsls	r3, r2, #21
 8006b6a:	d531      	bpl.n	8006bd0 <__ssputs_r+0xa0>
 8006b6c:	4629      	mov	r1, r5
 8006b6e:	f7ff fe8f 	bl	8006890 <_malloc_r>
 8006b72:	4606      	mov	r6, r0
 8006b74:	b950      	cbnz	r0, 8006b8c <__ssputs_r+0x5c>
 8006b76:	230c      	movs	r3, #12
 8006b78:	f8ca 3000 	str.w	r3, [sl]
 8006b7c:	89a3      	ldrh	r3, [r4, #12]
 8006b7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b82:	81a3      	strh	r3, [r4, #12]
 8006b84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b8c:	6921      	ldr	r1, [r4, #16]
 8006b8e:	464a      	mov	r2, r9
 8006b90:	f7ff fe68 	bl	8006864 <memcpy>
 8006b94:	89a3      	ldrh	r3, [r4, #12]
 8006b96:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b9e:	81a3      	strh	r3, [r4, #12]
 8006ba0:	6126      	str	r6, [r4, #16]
 8006ba2:	6165      	str	r5, [r4, #20]
 8006ba4:	444e      	add	r6, r9
 8006ba6:	eba5 0509 	sub.w	r5, r5, r9
 8006baa:	6026      	str	r6, [r4, #0]
 8006bac:	60a5      	str	r5, [r4, #8]
 8006bae:	463e      	mov	r6, r7
 8006bb0:	42be      	cmp	r6, r7
 8006bb2:	d900      	bls.n	8006bb6 <__ssputs_r+0x86>
 8006bb4:	463e      	mov	r6, r7
 8006bb6:	4632      	mov	r2, r6
 8006bb8:	6820      	ldr	r0, [r4, #0]
 8006bba:	4641      	mov	r1, r8
 8006bbc:	f000 faa8 	bl	8007110 <memmove>
 8006bc0:	68a3      	ldr	r3, [r4, #8]
 8006bc2:	6822      	ldr	r2, [r4, #0]
 8006bc4:	1b9b      	subs	r3, r3, r6
 8006bc6:	4432      	add	r2, r6
 8006bc8:	60a3      	str	r3, [r4, #8]
 8006bca:	6022      	str	r2, [r4, #0]
 8006bcc:	2000      	movs	r0, #0
 8006bce:	e7db      	b.n	8006b88 <__ssputs_r+0x58>
 8006bd0:	462a      	mov	r2, r5
 8006bd2:	f000 fab7 	bl	8007144 <_realloc_r>
 8006bd6:	4606      	mov	r6, r0
 8006bd8:	2800      	cmp	r0, #0
 8006bda:	d1e1      	bne.n	8006ba0 <__ssputs_r+0x70>
 8006bdc:	6921      	ldr	r1, [r4, #16]
 8006bde:	4650      	mov	r0, sl
 8006be0:	f7ff ff56 	bl	8006a90 <_free_r>
 8006be4:	e7c7      	b.n	8006b76 <__ssputs_r+0x46>
	...

08006be8 <_svfiprintf_r>:
 8006be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bec:	4698      	mov	r8, r3
 8006bee:	898b      	ldrh	r3, [r1, #12]
 8006bf0:	061b      	lsls	r3, r3, #24
 8006bf2:	b09d      	sub	sp, #116	; 0x74
 8006bf4:	4607      	mov	r7, r0
 8006bf6:	460d      	mov	r5, r1
 8006bf8:	4614      	mov	r4, r2
 8006bfa:	d50e      	bpl.n	8006c1a <_svfiprintf_r+0x32>
 8006bfc:	690b      	ldr	r3, [r1, #16]
 8006bfe:	b963      	cbnz	r3, 8006c1a <_svfiprintf_r+0x32>
 8006c00:	2140      	movs	r1, #64	; 0x40
 8006c02:	f7ff fe45 	bl	8006890 <_malloc_r>
 8006c06:	6028      	str	r0, [r5, #0]
 8006c08:	6128      	str	r0, [r5, #16]
 8006c0a:	b920      	cbnz	r0, 8006c16 <_svfiprintf_r+0x2e>
 8006c0c:	230c      	movs	r3, #12
 8006c0e:	603b      	str	r3, [r7, #0]
 8006c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c14:	e0d1      	b.n	8006dba <_svfiprintf_r+0x1d2>
 8006c16:	2340      	movs	r3, #64	; 0x40
 8006c18:	616b      	str	r3, [r5, #20]
 8006c1a:	2300      	movs	r3, #0
 8006c1c:	9309      	str	r3, [sp, #36]	; 0x24
 8006c1e:	2320      	movs	r3, #32
 8006c20:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c24:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c28:	2330      	movs	r3, #48	; 0x30
 8006c2a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006dd4 <_svfiprintf_r+0x1ec>
 8006c2e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c32:	f04f 0901 	mov.w	r9, #1
 8006c36:	4623      	mov	r3, r4
 8006c38:	469a      	mov	sl, r3
 8006c3a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c3e:	b10a      	cbz	r2, 8006c44 <_svfiprintf_r+0x5c>
 8006c40:	2a25      	cmp	r2, #37	; 0x25
 8006c42:	d1f9      	bne.n	8006c38 <_svfiprintf_r+0x50>
 8006c44:	ebba 0b04 	subs.w	fp, sl, r4
 8006c48:	d00b      	beq.n	8006c62 <_svfiprintf_r+0x7a>
 8006c4a:	465b      	mov	r3, fp
 8006c4c:	4622      	mov	r2, r4
 8006c4e:	4629      	mov	r1, r5
 8006c50:	4638      	mov	r0, r7
 8006c52:	f7ff ff6d 	bl	8006b30 <__ssputs_r>
 8006c56:	3001      	adds	r0, #1
 8006c58:	f000 80aa 	beq.w	8006db0 <_svfiprintf_r+0x1c8>
 8006c5c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c5e:	445a      	add	r2, fp
 8006c60:	9209      	str	r2, [sp, #36]	; 0x24
 8006c62:	f89a 3000 	ldrb.w	r3, [sl]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f000 80a2 	beq.w	8006db0 <_svfiprintf_r+0x1c8>
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c72:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c76:	f10a 0a01 	add.w	sl, sl, #1
 8006c7a:	9304      	str	r3, [sp, #16]
 8006c7c:	9307      	str	r3, [sp, #28]
 8006c7e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c82:	931a      	str	r3, [sp, #104]	; 0x68
 8006c84:	4654      	mov	r4, sl
 8006c86:	2205      	movs	r2, #5
 8006c88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c8c:	4851      	ldr	r0, [pc, #324]	; (8006dd4 <_svfiprintf_r+0x1ec>)
 8006c8e:	f7f9 faa7 	bl	80001e0 <memchr>
 8006c92:	9a04      	ldr	r2, [sp, #16]
 8006c94:	b9d8      	cbnz	r0, 8006cce <_svfiprintf_r+0xe6>
 8006c96:	06d0      	lsls	r0, r2, #27
 8006c98:	bf44      	itt	mi
 8006c9a:	2320      	movmi	r3, #32
 8006c9c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ca0:	0711      	lsls	r1, r2, #28
 8006ca2:	bf44      	itt	mi
 8006ca4:	232b      	movmi	r3, #43	; 0x2b
 8006ca6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006caa:	f89a 3000 	ldrb.w	r3, [sl]
 8006cae:	2b2a      	cmp	r3, #42	; 0x2a
 8006cb0:	d015      	beq.n	8006cde <_svfiprintf_r+0xf6>
 8006cb2:	9a07      	ldr	r2, [sp, #28]
 8006cb4:	4654      	mov	r4, sl
 8006cb6:	2000      	movs	r0, #0
 8006cb8:	f04f 0c0a 	mov.w	ip, #10
 8006cbc:	4621      	mov	r1, r4
 8006cbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cc2:	3b30      	subs	r3, #48	; 0x30
 8006cc4:	2b09      	cmp	r3, #9
 8006cc6:	d94e      	bls.n	8006d66 <_svfiprintf_r+0x17e>
 8006cc8:	b1b0      	cbz	r0, 8006cf8 <_svfiprintf_r+0x110>
 8006cca:	9207      	str	r2, [sp, #28]
 8006ccc:	e014      	b.n	8006cf8 <_svfiprintf_r+0x110>
 8006cce:	eba0 0308 	sub.w	r3, r0, r8
 8006cd2:	fa09 f303 	lsl.w	r3, r9, r3
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	9304      	str	r3, [sp, #16]
 8006cda:	46a2      	mov	sl, r4
 8006cdc:	e7d2      	b.n	8006c84 <_svfiprintf_r+0x9c>
 8006cde:	9b03      	ldr	r3, [sp, #12]
 8006ce0:	1d19      	adds	r1, r3, #4
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	9103      	str	r1, [sp, #12]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	bfbb      	ittet	lt
 8006cea:	425b      	neglt	r3, r3
 8006cec:	f042 0202 	orrlt.w	r2, r2, #2
 8006cf0:	9307      	strge	r3, [sp, #28]
 8006cf2:	9307      	strlt	r3, [sp, #28]
 8006cf4:	bfb8      	it	lt
 8006cf6:	9204      	strlt	r2, [sp, #16]
 8006cf8:	7823      	ldrb	r3, [r4, #0]
 8006cfa:	2b2e      	cmp	r3, #46	; 0x2e
 8006cfc:	d10c      	bne.n	8006d18 <_svfiprintf_r+0x130>
 8006cfe:	7863      	ldrb	r3, [r4, #1]
 8006d00:	2b2a      	cmp	r3, #42	; 0x2a
 8006d02:	d135      	bne.n	8006d70 <_svfiprintf_r+0x188>
 8006d04:	9b03      	ldr	r3, [sp, #12]
 8006d06:	1d1a      	adds	r2, r3, #4
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	9203      	str	r2, [sp, #12]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	bfb8      	it	lt
 8006d10:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006d14:	3402      	adds	r4, #2
 8006d16:	9305      	str	r3, [sp, #20]
 8006d18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006de4 <_svfiprintf_r+0x1fc>
 8006d1c:	7821      	ldrb	r1, [r4, #0]
 8006d1e:	2203      	movs	r2, #3
 8006d20:	4650      	mov	r0, sl
 8006d22:	f7f9 fa5d 	bl	80001e0 <memchr>
 8006d26:	b140      	cbz	r0, 8006d3a <_svfiprintf_r+0x152>
 8006d28:	2340      	movs	r3, #64	; 0x40
 8006d2a:	eba0 000a 	sub.w	r0, r0, sl
 8006d2e:	fa03 f000 	lsl.w	r0, r3, r0
 8006d32:	9b04      	ldr	r3, [sp, #16]
 8006d34:	4303      	orrs	r3, r0
 8006d36:	3401      	adds	r4, #1
 8006d38:	9304      	str	r3, [sp, #16]
 8006d3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d3e:	4826      	ldr	r0, [pc, #152]	; (8006dd8 <_svfiprintf_r+0x1f0>)
 8006d40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d44:	2206      	movs	r2, #6
 8006d46:	f7f9 fa4b 	bl	80001e0 <memchr>
 8006d4a:	2800      	cmp	r0, #0
 8006d4c:	d038      	beq.n	8006dc0 <_svfiprintf_r+0x1d8>
 8006d4e:	4b23      	ldr	r3, [pc, #140]	; (8006ddc <_svfiprintf_r+0x1f4>)
 8006d50:	bb1b      	cbnz	r3, 8006d9a <_svfiprintf_r+0x1b2>
 8006d52:	9b03      	ldr	r3, [sp, #12]
 8006d54:	3307      	adds	r3, #7
 8006d56:	f023 0307 	bic.w	r3, r3, #7
 8006d5a:	3308      	adds	r3, #8
 8006d5c:	9303      	str	r3, [sp, #12]
 8006d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d60:	4433      	add	r3, r6
 8006d62:	9309      	str	r3, [sp, #36]	; 0x24
 8006d64:	e767      	b.n	8006c36 <_svfiprintf_r+0x4e>
 8006d66:	fb0c 3202 	mla	r2, ip, r2, r3
 8006d6a:	460c      	mov	r4, r1
 8006d6c:	2001      	movs	r0, #1
 8006d6e:	e7a5      	b.n	8006cbc <_svfiprintf_r+0xd4>
 8006d70:	2300      	movs	r3, #0
 8006d72:	3401      	adds	r4, #1
 8006d74:	9305      	str	r3, [sp, #20]
 8006d76:	4619      	mov	r1, r3
 8006d78:	f04f 0c0a 	mov.w	ip, #10
 8006d7c:	4620      	mov	r0, r4
 8006d7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d82:	3a30      	subs	r2, #48	; 0x30
 8006d84:	2a09      	cmp	r2, #9
 8006d86:	d903      	bls.n	8006d90 <_svfiprintf_r+0x1a8>
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d0c5      	beq.n	8006d18 <_svfiprintf_r+0x130>
 8006d8c:	9105      	str	r1, [sp, #20]
 8006d8e:	e7c3      	b.n	8006d18 <_svfiprintf_r+0x130>
 8006d90:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d94:	4604      	mov	r4, r0
 8006d96:	2301      	movs	r3, #1
 8006d98:	e7f0      	b.n	8006d7c <_svfiprintf_r+0x194>
 8006d9a:	ab03      	add	r3, sp, #12
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	462a      	mov	r2, r5
 8006da0:	4b0f      	ldr	r3, [pc, #60]	; (8006de0 <_svfiprintf_r+0x1f8>)
 8006da2:	a904      	add	r1, sp, #16
 8006da4:	4638      	mov	r0, r7
 8006da6:	f3af 8000 	nop.w
 8006daa:	1c42      	adds	r2, r0, #1
 8006dac:	4606      	mov	r6, r0
 8006dae:	d1d6      	bne.n	8006d5e <_svfiprintf_r+0x176>
 8006db0:	89ab      	ldrh	r3, [r5, #12]
 8006db2:	065b      	lsls	r3, r3, #25
 8006db4:	f53f af2c 	bmi.w	8006c10 <_svfiprintf_r+0x28>
 8006db8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006dba:	b01d      	add	sp, #116	; 0x74
 8006dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc0:	ab03      	add	r3, sp, #12
 8006dc2:	9300      	str	r3, [sp, #0]
 8006dc4:	462a      	mov	r2, r5
 8006dc6:	4b06      	ldr	r3, [pc, #24]	; (8006de0 <_svfiprintf_r+0x1f8>)
 8006dc8:	a904      	add	r1, sp, #16
 8006dca:	4638      	mov	r0, r7
 8006dcc:	f000 f87a 	bl	8006ec4 <_printf_i>
 8006dd0:	e7eb      	b.n	8006daa <_svfiprintf_r+0x1c2>
 8006dd2:	bf00      	nop
 8006dd4:	08007354 	.word	0x08007354
 8006dd8:	0800735e 	.word	0x0800735e
 8006ddc:	00000000 	.word	0x00000000
 8006de0:	08006b31 	.word	0x08006b31
 8006de4:	0800735a 	.word	0x0800735a

08006de8 <_printf_common>:
 8006de8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006dec:	4616      	mov	r6, r2
 8006dee:	4699      	mov	r9, r3
 8006df0:	688a      	ldr	r2, [r1, #8]
 8006df2:	690b      	ldr	r3, [r1, #16]
 8006df4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	bfb8      	it	lt
 8006dfc:	4613      	movlt	r3, r2
 8006dfe:	6033      	str	r3, [r6, #0]
 8006e00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e04:	4607      	mov	r7, r0
 8006e06:	460c      	mov	r4, r1
 8006e08:	b10a      	cbz	r2, 8006e0e <_printf_common+0x26>
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	6033      	str	r3, [r6, #0]
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	0699      	lsls	r1, r3, #26
 8006e12:	bf42      	ittt	mi
 8006e14:	6833      	ldrmi	r3, [r6, #0]
 8006e16:	3302      	addmi	r3, #2
 8006e18:	6033      	strmi	r3, [r6, #0]
 8006e1a:	6825      	ldr	r5, [r4, #0]
 8006e1c:	f015 0506 	ands.w	r5, r5, #6
 8006e20:	d106      	bne.n	8006e30 <_printf_common+0x48>
 8006e22:	f104 0a19 	add.w	sl, r4, #25
 8006e26:	68e3      	ldr	r3, [r4, #12]
 8006e28:	6832      	ldr	r2, [r6, #0]
 8006e2a:	1a9b      	subs	r3, r3, r2
 8006e2c:	42ab      	cmp	r3, r5
 8006e2e:	dc26      	bgt.n	8006e7e <_printf_common+0x96>
 8006e30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e34:	1e13      	subs	r3, r2, #0
 8006e36:	6822      	ldr	r2, [r4, #0]
 8006e38:	bf18      	it	ne
 8006e3a:	2301      	movne	r3, #1
 8006e3c:	0692      	lsls	r2, r2, #26
 8006e3e:	d42b      	bmi.n	8006e98 <_printf_common+0xb0>
 8006e40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e44:	4649      	mov	r1, r9
 8006e46:	4638      	mov	r0, r7
 8006e48:	47c0      	blx	r8
 8006e4a:	3001      	adds	r0, #1
 8006e4c:	d01e      	beq.n	8006e8c <_printf_common+0xa4>
 8006e4e:	6823      	ldr	r3, [r4, #0]
 8006e50:	68e5      	ldr	r5, [r4, #12]
 8006e52:	6832      	ldr	r2, [r6, #0]
 8006e54:	f003 0306 	and.w	r3, r3, #6
 8006e58:	2b04      	cmp	r3, #4
 8006e5a:	bf08      	it	eq
 8006e5c:	1aad      	subeq	r5, r5, r2
 8006e5e:	68a3      	ldr	r3, [r4, #8]
 8006e60:	6922      	ldr	r2, [r4, #16]
 8006e62:	bf0c      	ite	eq
 8006e64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e68:	2500      	movne	r5, #0
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	bfc4      	itt	gt
 8006e6e:	1a9b      	subgt	r3, r3, r2
 8006e70:	18ed      	addgt	r5, r5, r3
 8006e72:	2600      	movs	r6, #0
 8006e74:	341a      	adds	r4, #26
 8006e76:	42b5      	cmp	r5, r6
 8006e78:	d11a      	bne.n	8006eb0 <_printf_common+0xc8>
 8006e7a:	2000      	movs	r0, #0
 8006e7c:	e008      	b.n	8006e90 <_printf_common+0xa8>
 8006e7e:	2301      	movs	r3, #1
 8006e80:	4652      	mov	r2, sl
 8006e82:	4649      	mov	r1, r9
 8006e84:	4638      	mov	r0, r7
 8006e86:	47c0      	blx	r8
 8006e88:	3001      	adds	r0, #1
 8006e8a:	d103      	bne.n	8006e94 <_printf_common+0xac>
 8006e8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e94:	3501      	adds	r5, #1
 8006e96:	e7c6      	b.n	8006e26 <_printf_common+0x3e>
 8006e98:	18e1      	adds	r1, r4, r3
 8006e9a:	1c5a      	adds	r2, r3, #1
 8006e9c:	2030      	movs	r0, #48	; 0x30
 8006e9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ea2:	4422      	add	r2, r4
 8006ea4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ea8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006eac:	3302      	adds	r3, #2
 8006eae:	e7c7      	b.n	8006e40 <_printf_common+0x58>
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	4622      	mov	r2, r4
 8006eb4:	4649      	mov	r1, r9
 8006eb6:	4638      	mov	r0, r7
 8006eb8:	47c0      	blx	r8
 8006eba:	3001      	adds	r0, #1
 8006ebc:	d0e6      	beq.n	8006e8c <_printf_common+0xa4>
 8006ebe:	3601      	adds	r6, #1
 8006ec0:	e7d9      	b.n	8006e76 <_printf_common+0x8e>
	...

08006ec4 <_printf_i>:
 8006ec4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006ec8:	460c      	mov	r4, r1
 8006eca:	4691      	mov	r9, r2
 8006ecc:	7e27      	ldrb	r7, [r4, #24]
 8006ece:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006ed0:	2f78      	cmp	r7, #120	; 0x78
 8006ed2:	4680      	mov	r8, r0
 8006ed4:	469a      	mov	sl, r3
 8006ed6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006eda:	d807      	bhi.n	8006eec <_printf_i+0x28>
 8006edc:	2f62      	cmp	r7, #98	; 0x62
 8006ede:	d80a      	bhi.n	8006ef6 <_printf_i+0x32>
 8006ee0:	2f00      	cmp	r7, #0
 8006ee2:	f000 80d8 	beq.w	8007096 <_printf_i+0x1d2>
 8006ee6:	2f58      	cmp	r7, #88	; 0x58
 8006ee8:	f000 80a3 	beq.w	8007032 <_printf_i+0x16e>
 8006eec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006ef0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ef4:	e03a      	b.n	8006f6c <_printf_i+0xa8>
 8006ef6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006efa:	2b15      	cmp	r3, #21
 8006efc:	d8f6      	bhi.n	8006eec <_printf_i+0x28>
 8006efe:	a001      	add	r0, pc, #4	; (adr r0, 8006f04 <_printf_i+0x40>)
 8006f00:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006f04:	08006f5d 	.word	0x08006f5d
 8006f08:	08006f71 	.word	0x08006f71
 8006f0c:	08006eed 	.word	0x08006eed
 8006f10:	08006eed 	.word	0x08006eed
 8006f14:	08006eed 	.word	0x08006eed
 8006f18:	08006eed 	.word	0x08006eed
 8006f1c:	08006f71 	.word	0x08006f71
 8006f20:	08006eed 	.word	0x08006eed
 8006f24:	08006eed 	.word	0x08006eed
 8006f28:	08006eed 	.word	0x08006eed
 8006f2c:	08006eed 	.word	0x08006eed
 8006f30:	0800707d 	.word	0x0800707d
 8006f34:	08006fa1 	.word	0x08006fa1
 8006f38:	0800705f 	.word	0x0800705f
 8006f3c:	08006eed 	.word	0x08006eed
 8006f40:	08006eed 	.word	0x08006eed
 8006f44:	0800709f 	.word	0x0800709f
 8006f48:	08006eed 	.word	0x08006eed
 8006f4c:	08006fa1 	.word	0x08006fa1
 8006f50:	08006eed 	.word	0x08006eed
 8006f54:	08006eed 	.word	0x08006eed
 8006f58:	08007067 	.word	0x08007067
 8006f5c:	680b      	ldr	r3, [r1, #0]
 8006f5e:	1d1a      	adds	r2, r3, #4
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	600a      	str	r2, [r1, #0]
 8006f64:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006f68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f6c:	2301      	movs	r3, #1
 8006f6e:	e0a3      	b.n	80070b8 <_printf_i+0x1f4>
 8006f70:	6825      	ldr	r5, [r4, #0]
 8006f72:	6808      	ldr	r0, [r1, #0]
 8006f74:	062e      	lsls	r6, r5, #24
 8006f76:	f100 0304 	add.w	r3, r0, #4
 8006f7a:	d50a      	bpl.n	8006f92 <_printf_i+0xce>
 8006f7c:	6805      	ldr	r5, [r0, #0]
 8006f7e:	600b      	str	r3, [r1, #0]
 8006f80:	2d00      	cmp	r5, #0
 8006f82:	da03      	bge.n	8006f8c <_printf_i+0xc8>
 8006f84:	232d      	movs	r3, #45	; 0x2d
 8006f86:	426d      	negs	r5, r5
 8006f88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f8c:	485e      	ldr	r0, [pc, #376]	; (8007108 <_printf_i+0x244>)
 8006f8e:	230a      	movs	r3, #10
 8006f90:	e019      	b.n	8006fc6 <_printf_i+0x102>
 8006f92:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006f96:	6805      	ldr	r5, [r0, #0]
 8006f98:	600b      	str	r3, [r1, #0]
 8006f9a:	bf18      	it	ne
 8006f9c:	b22d      	sxthne	r5, r5
 8006f9e:	e7ef      	b.n	8006f80 <_printf_i+0xbc>
 8006fa0:	680b      	ldr	r3, [r1, #0]
 8006fa2:	6825      	ldr	r5, [r4, #0]
 8006fa4:	1d18      	adds	r0, r3, #4
 8006fa6:	6008      	str	r0, [r1, #0]
 8006fa8:	0628      	lsls	r0, r5, #24
 8006faa:	d501      	bpl.n	8006fb0 <_printf_i+0xec>
 8006fac:	681d      	ldr	r5, [r3, #0]
 8006fae:	e002      	b.n	8006fb6 <_printf_i+0xf2>
 8006fb0:	0669      	lsls	r1, r5, #25
 8006fb2:	d5fb      	bpl.n	8006fac <_printf_i+0xe8>
 8006fb4:	881d      	ldrh	r5, [r3, #0]
 8006fb6:	4854      	ldr	r0, [pc, #336]	; (8007108 <_printf_i+0x244>)
 8006fb8:	2f6f      	cmp	r7, #111	; 0x6f
 8006fba:	bf0c      	ite	eq
 8006fbc:	2308      	moveq	r3, #8
 8006fbe:	230a      	movne	r3, #10
 8006fc0:	2100      	movs	r1, #0
 8006fc2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006fc6:	6866      	ldr	r6, [r4, #4]
 8006fc8:	60a6      	str	r6, [r4, #8]
 8006fca:	2e00      	cmp	r6, #0
 8006fcc:	bfa2      	ittt	ge
 8006fce:	6821      	ldrge	r1, [r4, #0]
 8006fd0:	f021 0104 	bicge.w	r1, r1, #4
 8006fd4:	6021      	strge	r1, [r4, #0]
 8006fd6:	b90d      	cbnz	r5, 8006fdc <_printf_i+0x118>
 8006fd8:	2e00      	cmp	r6, #0
 8006fda:	d04d      	beq.n	8007078 <_printf_i+0x1b4>
 8006fdc:	4616      	mov	r6, r2
 8006fde:	fbb5 f1f3 	udiv	r1, r5, r3
 8006fe2:	fb03 5711 	mls	r7, r3, r1, r5
 8006fe6:	5dc7      	ldrb	r7, [r0, r7]
 8006fe8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006fec:	462f      	mov	r7, r5
 8006fee:	42bb      	cmp	r3, r7
 8006ff0:	460d      	mov	r5, r1
 8006ff2:	d9f4      	bls.n	8006fde <_printf_i+0x11a>
 8006ff4:	2b08      	cmp	r3, #8
 8006ff6:	d10b      	bne.n	8007010 <_printf_i+0x14c>
 8006ff8:	6823      	ldr	r3, [r4, #0]
 8006ffa:	07df      	lsls	r7, r3, #31
 8006ffc:	d508      	bpl.n	8007010 <_printf_i+0x14c>
 8006ffe:	6923      	ldr	r3, [r4, #16]
 8007000:	6861      	ldr	r1, [r4, #4]
 8007002:	4299      	cmp	r1, r3
 8007004:	bfde      	ittt	le
 8007006:	2330      	movle	r3, #48	; 0x30
 8007008:	f806 3c01 	strble.w	r3, [r6, #-1]
 800700c:	f106 36ff 	addle.w	r6, r6, #4294967295	; 0xffffffff
 8007010:	1b92      	subs	r2, r2, r6
 8007012:	6122      	str	r2, [r4, #16]
 8007014:	f8cd a000 	str.w	sl, [sp]
 8007018:	464b      	mov	r3, r9
 800701a:	aa03      	add	r2, sp, #12
 800701c:	4621      	mov	r1, r4
 800701e:	4640      	mov	r0, r8
 8007020:	f7ff fee2 	bl	8006de8 <_printf_common>
 8007024:	3001      	adds	r0, #1
 8007026:	d14c      	bne.n	80070c2 <_printf_i+0x1fe>
 8007028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800702c:	b004      	add	sp, #16
 800702e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007032:	4835      	ldr	r0, [pc, #212]	; (8007108 <_printf_i+0x244>)
 8007034:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007038:	6823      	ldr	r3, [r4, #0]
 800703a:	680e      	ldr	r6, [r1, #0]
 800703c:	061f      	lsls	r7, r3, #24
 800703e:	f856 5b04 	ldr.w	r5, [r6], #4
 8007042:	600e      	str	r6, [r1, #0]
 8007044:	d514      	bpl.n	8007070 <_printf_i+0x1ac>
 8007046:	07d9      	lsls	r1, r3, #31
 8007048:	bf44      	itt	mi
 800704a:	f043 0320 	orrmi.w	r3, r3, #32
 800704e:	6023      	strmi	r3, [r4, #0]
 8007050:	b91d      	cbnz	r5, 800705a <_printf_i+0x196>
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	f023 0320 	bic.w	r3, r3, #32
 8007058:	6023      	str	r3, [r4, #0]
 800705a:	2310      	movs	r3, #16
 800705c:	e7b0      	b.n	8006fc0 <_printf_i+0xfc>
 800705e:	6823      	ldr	r3, [r4, #0]
 8007060:	f043 0320 	orr.w	r3, r3, #32
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	2378      	movs	r3, #120	; 0x78
 8007068:	4828      	ldr	r0, [pc, #160]	; (800710c <_printf_i+0x248>)
 800706a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800706e:	e7e3      	b.n	8007038 <_printf_i+0x174>
 8007070:	065e      	lsls	r6, r3, #25
 8007072:	bf48      	it	mi
 8007074:	b2ad      	uxthmi	r5, r5
 8007076:	e7e6      	b.n	8007046 <_printf_i+0x182>
 8007078:	4616      	mov	r6, r2
 800707a:	e7bb      	b.n	8006ff4 <_printf_i+0x130>
 800707c:	680b      	ldr	r3, [r1, #0]
 800707e:	6826      	ldr	r6, [r4, #0]
 8007080:	6960      	ldr	r0, [r4, #20]
 8007082:	1d1d      	adds	r5, r3, #4
 8007084:	600d      	str	r5, [r1, #0]
 8007086:	0635      	lsls	r5, r6, #24
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	d501      	bpl.n	8007090 <_printf_i+0x1cc>
 800708c:	6018      	str	r0, [r3, #0]
 800708e:	e002      	b.n	8007096 <_printf_i+0x1d2>
 8007090:	0671      	lsls	r1, r6, #25
 8007092:	d5fb      	bpl.n	800708c <_printf_i+0x1c8>
 8007094:	8018      	strh	r0, [r3, #0]
 8007096:	2300      	movs	r3, #0
 8007098:	6123      	str	r3, [r4, #16]
 800709a:	4616      	mov	r6, r2
 800709c:	e7ba      	b.n	8007014 <_printf_i+0x150>
 800709e:	680b      	ldr	r3, [r1, #0]
 80070a0:	1d1a      	adds	r2, r3, #4
 80070a2:	600a      	str	r2, [r1, #0]
 80070a4:	681e      	ldr	r6, [r3, #0]
 80070a6:	6862      	ldr	r2, [r4, #4]
 80070a8:	2100      	movs	r1, #0
 80070aa:	4630      	mov	r0, r6
 80070ac:	f7f9 f898 	bl	80001e0 <memchr>
 80070b0:	b108      	cbz	r0, 80070b6 <_printf_i+0x1f2>
 80070b2:	1b80      	subs	r0, r0, r6
 80070b4:	6060      	str	r0, [r4, #4]
 80070b6:	6863      	ldr	r3, [r4, #4]
 80070b8:	6123      	str	r3, [r4, #16]
 80070ba:	2300      	movs	r3, #0
 80070bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80070c0:	e7a8      	b.n	8007014 <_printf_i+0x150>
 80070c2:	6923      	ldr	r3, [r4, #16]
 80070c4:	4632      	mov	r2, r6
 80070c6:	4649      	mov	r1, r9
 80070c8:	4640      	mov	r0, r8
 80070ca:	47d0      	blx	sl
 80070cc:	3001      	adds	r0, #1
 80070ce:	d0ab      	beq.n	8007028 <_printf_i+0x164>
 80070d0:	6823      	ldr	r3, [r4, #0]
 80070d2:	079b      	lsls	r3, r3, #30
 80070d4:	d413      	bmi.n	80070fe <_printf_i+0x23a>
 80070d6:	68e0      	ldr	r0, [r4, #12]
 80070d8:	9b03      	ldr	r3, [sp, #12]
 80070da:	4298      	cmp	r0, r3
 80070dc:	bfb8      	it	lt
 80070de:	4618      	movlt	r0, r3
 80070e0:	e7a4      	b.n	800702c <_printf_i+0x168>
 80070e2:	2301      	movs	r3, #1
 80070e4:	4632      	mov	r2, r6
 80070e6:	4649      	mov	r1, r9
 80070e8:	4640      	mov	r0, r8
 80070ea:	47d0      	blx	sl
 80070ec:	3001      	adds	r0, #1
 80070ee:	d09b      	beq.n	8007028 <_printf_i+0x164>
 80070f0:	3501      	adds	r5, #1
 80070f2:	68e3      	ldr	r3, [r4, #12]
 80070f4:	9903      	ldr	r1, [sp, #12]
 80070f6:	1a5b      	subs	r3, r3, r1
 80070f8:	42ab      	cmp	r3, r5
 80070fa:	dcf2      	bgt.n	80070e2 <_printf_i+0x21e>
 80070fc:	e7eb      	b.n	80070d6 <_printf_i+0x212>
 80070fe:	2500      	movs	r5, #0
 8007100:	f104 0619 	add.w	r6, r4, #25
 8007104:	e7f5      	b.n	80070f2 <_printf_i+0x22e>
 8007106:	bf00      	nop
 8007108:	08007365 	.word	0x08007365
 800710c:	08007376 	.word	0x08007376

08007110 <memmove>:
 8007110:	4288      	cmp	r0, r1
 8007112:	b510      	push	{r4, lr}
 8007114:	eb01 0402 	add.w	r4, r1, r2
 8007118:	d902      	bls.n	8007120 <memmove+0x10>
 800711a:	4284      	cmp	r4, r0
 800711c:	4623      	mov	r3, r4
 800711e:	d807      	bhi.n	8007130 <memmove+0x20>
 8007120:	1e43      	subs	r3, r0, #1
 8007122:	42a1      	cmp	r1, r4
 8007124:	d008      	beq.n	8007138 <memmove+0x28>
 8007126:	f811 2b01 	ldrb.w	r2, [r1], #1
 800712a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800712e:	e7f8      	b.n	8007122 <memmove+0x12>
 8007130:	4402      	add	r2, r0
 8007132:	4601      	mov	r1, r0
 8007134:	428a      	cmp	r2, r1
 8007136:	d100      	bne.n	800713a <memmove+0x2a>
 8007138:	bd10      	pop	{r4, pc}
 800713a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800713e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007142:	e7f7      	b.n	8007134 <memmove+0x24>

08007144 <_realloc_r>:
 8007144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007146:	4607      	mov	r7, r0
 8007148:	4614      	mov	r4, r2
 800714a:	460e      	mov	r6, r1
 800714c:	b921      	cbnz	r1, 8007158 <_realloc_r+0x14>
 800714e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007152:	4611      	mov	r1, r2
 8007154:	f7ff bb9c 	b.w	8006890 <_malloc_r>
 8007158:	b922      	cbnz	r2, 8007164 <_realloc_r+0x20>
 800715a:	f7ff fc99 	bl	8006a90 <_free_r>
 800715e:	4625      	mov	r5, r4
 8007160:	4628      	mov	r0, r5
 8007162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007164:	f000 f814 	bl	8007190 <_malloc_usable_size_r>
 8007168:	42a0      	cmp	r0, r4
 800716a:	d20f      	bcs.n	800718c <_realloc_r+0x48>
 800716c:	4621      	mov	r1, r4
 800716e:	4638      	mov	r0, r7
 8007170:	f7ff fb8e 	bl	8006890 <_malloc_r>
 8007174:	4605      	mov	r5, r0
 8007176:	2800      	cmp	r0, #0
 8007178:	d0f2      	beq.n	8007160 <_realloc_r+0x1c>
 800717a:	4631      	mov	r1, r6
 800717c:	4622      	mov	r2, r4
 800717e:	f7ff fb71 	bl	8006864 <memcpy>
 8007182:	4631      	mov	r1, r6
 8007184:	4638      	mov	r0, r7
 8007186:	f7ff fc83 	bl	8006a90 <_free_r>
 800718a:	e7e9      	b.n	8007160 <_realloc_r+0x1c>
 800718c:	4635      	mov	r5, r6
 800718e:	e7e7      	b.n	8007160 <_realloc_r+0x1c>

08007190 <_malloc_usable_size_r>:
 8007190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007194:	1f18      	subs	r0, r3, #4
 8007196:	2b00      	cmp	r3, #0
 8007198:	bfbc      	itt	lt
 800719a:	580b      	ldrlt	r3, [r1, r0]
 800719c:	18c0      	addlt	r0, r0, r3
 800719e:	4770      	bx	lr

080071a0 <_init>:
 80071a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071a2:	bf00      	nop
 80071a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071a6:	bc08      	pop	{r3}
 80071a8:	469e      	mov	lr, r3
 80071aa:	4770      	bx	lr

080071ac <_fini>:
 80071ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ae:	bf00      	nop
 80071b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071b2:	bc08      	pop	{r3}
 80071b4:	469e      	mov	lr, r3
 80071b6:	4770      	bx	lr
